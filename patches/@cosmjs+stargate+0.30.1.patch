# diff --git a/node_modules/@cosmjs/stargate/.DS_Store b/node_modules/@cosmjs/stargate/.DS_Store
# new file mode 100644
# index 0000000..a554dd4
# Binary files /dev/null and b/node_modules/@cosmjs/stargate/.DS_Store differ
# diff --git a/node_modules/@cosmjs/stargate/build/.DS_Store b/node_modules/@cosmjs/stargate/build/.DS_Store
# new file mode 100644
# index 0000000..e97f2f6
# Binary files /dev/null and b/node_modules/@cosmjs/stargate/build/.DS_Store differ
# diff --git a/node_modules/@cosmjs/stargate/build/accounts.js b/node_modules/@cosmjs/stargate/build/accounts.js
# index 1739c71..9ecb609 100644
# --- a/node_modules/@cosmjs/stargate/build/accounts.js
# +++ b/node_modules/@cosmjs/stargate/build/accounts.js
# @@ -11,7 +11,7 @@ function uint64FromProto(input) {
#  }
#  function accountFromBaseAccount(input) {
#      const { address, pubKey, accountNumber, sequence } = input;
# -    const pubkey = pubKey ? (0, proto_signing_1.decodePubkey)(pubKey) : null;
# +    const pubkey = (0, proto_signing_1.decodePubkey)(pubKey);
#      return {
#          address: address,
#          pubkey: pubkey,
# @@ -25,6 +25,7 @@ function accountFromBaseAccount(input) {
#   * you'll need to write your own account decoder.
#   */
#  function accountFromAny(input) {
# +    var _a, _b, _c, _d, _e, _f, _g;
#      const { typeUrl, value } = input;
#      switch (typeUrl) {
#          // auth
# @@ -35,24 +36,28 @@ function accountFromAny(input) {
#              (0, utils_1.assert)(baseAccount);
#              return accountFromBaseAccount(baseAccount);
#          }
# +        case "/ethermint.types.v1.EthAccount":
# +            const baseAccount = auth_1.ModuleAccount.decode(value).baseAccount;
# +            (0, utils_1.assert)(baseAccount);
# +            return accountFromBaseAccount(baseAccount);
#          // vesting
#          case "/cosmos.vesting.v1beta1.BaseVestingAccount": {
# -            const baseAccount = vesting_1.BaseVestingAccount.decode(value)?.baseAccount;
# +            const baseAccount = (_a = vesting_1.BaseVestingAccount.decode(value)) === null || _a === void 0 ? void 0 : _a.baseAccount;
#              (0, utils_1.assert)(baseAccount);
#              return accountFromBaseAccount(baseAccount);
#          }
#          case "/cosmos.vesting.v1beta1.ContinuousVestingAccount": {
# -            const baseAccount = vesting_1.ContinuousVestingAccount.decode(value)?.baseVestingAccount?.baseAccount;
# +            const baseAccount = (_c = (_b = vesting_1.ContinuousVestingAccount.decode(value)) === null || _b === void 0 ? void 0 : _b.baseVestingAccount) === null || _c === void 0 ? void 0 : _c.baseAccount;
#              (0, utils_1.assert)(baseAccount);
#              return accountFromBaseAccount(baseAccount);
#          }
#          case "/cosmos.vesting.v1beta1.DelayedVestingAccount": {
# -            const baseAccount = vesting_1.DelayedVestingAccount.decode(value)?.baseVestingAccount?.baseAccount;
# +            const baseAccount = (_e = (_d = vesting_1.DelayedVestingAccount.decode(value)) === null || _d === void 0 ? void 0 : _d.baseVestingAccount) === null || _e === void 0 ? void 0 : _e.baseAccount;
#              (0, utils_1.assert)(baseAccount);
#              return accountFromBaseAccount(baseAccount);
#          }
#          case "/cosmos.vesting.v1beta1.PeriodicVestingAccount": {
# -            const baseAccount = vesting_1.PeriodicVestingAccount.decode(value)?.baseVestingAccount?.baseAccount;
# +            const baseAccount = (_g = (_f = vesting_1.PeriodicVestingAccount.decode(value)) === null || _f === void 0 ? void 0 : _f.baseVestingAccount) === null || _g === void 0 ? void 0 : _g.baseAccount;
#              (0, utils_1.assert)(baseAccount);
#              return accountFromBaseAccount(baseAccount);
#          }
# diff --git a/node_modules/@cosmjs/stargate/build/accounts.js.map b/node_modules/@cosmjs/stargate/build/accounts.js.map
# index b06e283..f30d142 100644
# --- a/node_modules/@cosmjs/stargate/build/accounts.js.map
# +++ b/node_modules/@cosmjs/stargate/build/accounts.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../src/accounts.ts"],"names":[],"mappings":";;;AACA,uCAAsC;AACtC,yDAAqD;AACrD,yCAAuC;AACvC,gEAAmF;AACnF,yEAKqD;AAYrD,SAAS,eAAe,CAAC,KAAoB;IAC3C,OAAO,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC7C,CAAC;AAED,SAAS,sBAAsB,CAAC,KAAkB;IAChD,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;IAC3D,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,IAAA,4BAAY,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACpD,OAAO;QACL,OAAO,EAAE,OAAO;QAChB,MAAM,EAAE,MAAM;QACd,aAAa,EAAE,eAAe,CAAC,aAAa,CAAC,CAAC,QAAQ,EAAE;QACxD,QAAQ,EAAE,eAAe,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE;KAC/C,CAAC;AACJ,CAAC;AAQD;;;;GAIG;AACH,SAAgB,cAAc,CAAC,KAAU;IACvC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;IAEjC,QAAQ,OAAO,EAAE;QACf,OAAO;QAEP,KAAK,kCAAkC;YACrC,OAAO,sBAAsB,CAAC,kBAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAC3D,KAAK,oCAAoC,CAAC,CAAC;YACzC,MAAM,WAAW,GAAG,oBAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC;YAC5D,IAAA,cAAM,EAAC,WAAW,CAAC,CAAC;YACpB,OAAO,sBAAsB,CAAC,WAAW,CAAC,CAAC;SAC5C;QAED,UAAU;QAEV,KAAK,4CAA4C,CAAC,CAAC;YACjD,MAAM,WAAW,GAAG,4BAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,WAAW,CAAC;YAClE,IAAA,cAAM,EAAC,WAAW,CAAC,CAAC;YACpB,OAAO,sBAAsB,CAAC,WAAW,CAAC,CAAC;SAC5C;QACD,KAAK,kDAAkD,CAAC,CAAC;YACvD,MAAM,WAAW,GAAG,kCAAwB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,kBAAkB,EAAE,WAAW,CAAC;YAC5F,IAAA,cAAM,EAAC,WAAW,CAAC,CAAC;YACpB,OAAO,sBAAsB,CAAC,WAAW,CAAC,CAAC;SAC5C;QACD,KAAK,+CAA+C,CAAC,CAAC;YACpD,MAAM,WAAW,GAAG,+BAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,kBAAkB,EAAE,WAAW,CAAC;YACzF,IAAA,cAAM,EAAC,WAAW,CAAC,CAAC;YACpB,OAAO,sBAAsB,CAAC,WAAW,CAAC,CAAC;SAC5C;QACD,KAAK,gDAAgD,CAAC,CAAC;YACrD,MAAM,WAAW,GAAG,gCAAsB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,kBAAkB,EAAE,WAAW,CAAC;YAC1F,IAAA,cAAM,EAAC,WAAW,CAAC,CAAC;YACpB,OAAO,sBAAsB,CAAC,WAAW,CAAC,CAAC;SAC5C;QAED;YACE,MAAM,IAAI,KAAK,CAAC,sBAAsB,OAAO,GAAG,CAAC,CAAC;KACrD;AACH,CAAC;AAxCD,wCAwCC"}
# \ No newline at end of file
# +{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../src/accounts.ts"],"names":[],"mappings":";;;AACA,uCAAsC;AACtC,yDAAqD;AACrD,yCAAuC;AACvC,gEAAmF;AACnF,yEAKqD;AAYrD,SAAS,eAAe,CAAC,KAAoB;IAC3C,OAAO,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC7C,CAAC;AAED,SAAS,sBAAsB,CAAC,KAAkB;IAChD,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;IAC3D,MAAM,MAAM,GAAG,IAAA,4BAAY,EAAC,MAAM,CAAC,CAAC;IACpC,OAAO;QACL,OAAO,EAAE,OAAO;QAChB,MAAM,EAAE,MAAM;QACd,aAAa,EAAE,eAAe,CAAC,aAAa,CAAC,CAAC,QAAQ,EAAE;QACxD,QAAQ,EAAE,eAAe,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE;KAC/C,CAAC;AACJ,CAAC;AAQD;;;;GAIG;AACH,SAAgB,cAAc,CAAC,KAAU;;IACvC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;IAEjC,QAAQ,OAAO,EAAE;QACf,OAAO;QAEP,KAAK,kCAAkC;YACrC,OAAO,sBAAsB,CAAC,kBAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAC3D,KAAK,oCAAoC,CAAC,CAAC;YACzC,MAAM,WAAW,GAAG,oBAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC;YAC5D,IAAA,cAAM,EAAC,WAAW,CAAC,CAAC;YACpB,OAAO,sBAAsB,CAAC,WAAW,CAAC,CAAC;SAC5C;QACD,KAAK,gCAAgC;YACnC,MAAM,WAAW,GAAG,oBAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC;YAC5D,IAAA,cAAM,EAAC,WAAW,CAAC,CAAC;YACpB,OAAO,sBAAsB,CAAC,WAAW,CAAC,CAAC;QAE7C,UAAU;QAEV,KAAK,4CAA4C,CAAC,CAAC;YACjD,MAAM,WAAW,GAAG,MAAA,4BAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,0CAAE,WAAW,CAAC;YAClE,IAAA,cAAM,EAAC,WAAW,CAAC,CAAC;YACpB,OAAO,sBAAsB,CAAC,WAAW,CAAC,CAAC;SAC5C;QACD,KAAK,kDAAkD,CAAC,CAAC;YACvD,MAAM,WAAW,GAAG,MAAA,MAAA,kCAAwB,CAAC,MAAM,CAAC,KAAK,CAAC,0CAAE,kBAAkB,0CAAE,WAAW,CAAC;YAC5F,IAAA,cAAM,EAAC,WAAW,CAAC,CAAC;YACpB,OAAO,sBAAsB,CAAC,WAAW,CAAC,CAAC;SAC5C;QACD,KAAK,+CAA+C,CAAC,CAAC;YACpD,MAAM,WAAW,GAAG,MAAA,MAAA,+BAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,0CAAE,kBAAkB,0CAAE,WAAW,CAAC;YACzF,IAAA,cAAM,EAAC,WAAW,CAAC,CAAC;YACpB,OAAO,sBAAsB,CAAC,WAAW,CAAC,CAAC;SAC5C;QACD,KAAK,gDAAgD,CAAC,CAAC;YACrD,MAAM,WAAW,GAAG,MAAA,MAAA,gCAAsB,CAAC,MAAM,CAAC,KAAK,CAAC,0CAAE,kBAAkB,0CAAE,WAAW,CAAC;YAC1F,IAAA,cAAM,EAAC,WAAW,CAAC,CAAC;YACpB,OAAO,sBAAsB,CAAC,WAAW,CAAC,CAAC;SAC5C;QAED;YACE,MAAM,IAAI,KAAK,CAAC,sBAAsB,OAAO,GAAG,CAAC,CAAC;KACrD;AACH,CAAC;AA5CD,wCA4CC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/accounts.spec.d.ts b/node_modules/@cosmjs/stargate/build/accounts.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/accounts.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/accounts.spec.js b/node_modules/@cosmjs/stargate/build/accounts.spec.js
# new file mode 100644
# index 0000000..3f97010
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/accounts.spec.js
# @@ -0,0 +1,26 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +const any_1 = require("cosmjs-types/google/protobuf/any");
# +const accounts_1 = require("./accounts");
# +describe("accounts", () => {
# +    describe("accountFromAny", () => {
# +        it("works for PeriodicVestingAccount", () => {
# +            // Queried from chain via `packages/cli/examples/get_akash_vesting_account.ts`.
# +            const any = any_1.Any.fromJSON({
# +                typeUrl: "/cosmos.vesting.v1beta1.PeriodicVestingAccount",
# +                value: "CsMBCnoKLGFrYXNoMXF5MHZ1cjNmbDJ1Y3p0cHpjcmZlYTdtYzhqd3o4eGptdnE3cXZ5EkYKHy9jb3Ntb3MuY3J5cHRvLnNlY3AyNTZrMS5QdWJLZXkSIwohA/XsdhwSIKU73TltD9STcaS07FNw0szR4a+oDLr6vikaGDggGxIUCgR1YWt0EgwxNjY2NjY2NzAwMDAaEwoEdWFrdBILMzcxOTAzMzAwMDAiFAoEdWFrdBIMMTY2NjY2NjcwMDAwKOC9wZkGEODvt/sFGhoIgOeEDxITCgR1YWt0Egs4MzMzMzMzNTAwMBoaCIC/ugcSEwoEdWFrdBILNDE2NjY2Njc1MDAaGgiAqMoHEhMKBHVha3QSCzQxNjY2NjY3NTAw",
# +            });
# +            const account = (0, accounts_1.accountFromAny)(any);
# +            expect(account).toEqual({
# +                address: "akash1qy0vur3fl2ucztpzcrfea7mc8jwz8xjmvq7qvy",
# +                pubkey: {
# +                    type: "tendermint/PubKeySecp256k1",
# +                    value: "A/XsdhwSIKU73TltD9STcaS07FNw0szR4a+oDLr6vika",
# +                },
# +                accountNumber: 56,
# +                sequence: 27,
# +            });
# +        });
# +    });
# +});
# +//# sourceMappingURL=accounts.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/accounts.spec.js.map b/node_modules/@cosmjs/stargate/build/accounts.spec.js.map
# new file mode 100644
# index 0000000..5349922
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/accounts.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"accounts.spec.js","sourceRoot":"","sources":["../src/accounts.spec.ts"],"names":[],"mappings":";;AAAA,0DAAuD;AAEvD,yCAA4C;AAE5C,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACxB,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,+EAA+E;YAC/E,MAAM,GAAG,GAAG,SAAG,CAAC,QAAQ,CAAC;gBACvB,OAAO,EAAE,gDAAgD;gBACzD,KAAK,EACH,kYAAkY;aACrY,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,IAAA,yBAAc,EAAC,GAAG,CAAC,CAAC;YACpC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC;gBACtB,OAAO,EAAE,8CAA8C;gBACvD,MAAM,EAAE;oBACN,IAAI,EAAE,4BAA4B;oBAClC,KAAK,EAAE,8CAA8C;iBACtD;gBACD,aAAa,EAAE,EAAE;gBACjB,QAAQ,EAAE,EAAE;aACb,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/aminotypes.spec.d.ts b/node_modules/@cosmjs/stargate/build/aminotypes.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/aminotypes.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/aminotypes.spec.js b/node_modules/@cosmjs/stargate/build/aminotypes.spec.js
# new file mode 100644
# index 0000000..72443b3
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/aminotypes.spec.js
# @@ -0,0 +1,201 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +const proto_signing_1 = require("@cosmjs/proto-signing");
# +const aminotypes_1 = require("./aminotypes");
# +const modules_1 = require("./modules");
# +describe("AminoTypes", () => {
# +    describe("constructor", () => {
# +        const msg = {
# +            delegatorAddress: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +            validatorAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +            amount: (0, proto_signing_1.coin)(1234, "ucosm"),
# +        };
# +        it("can override type by type URL", () => {
# +            const types = new aminotypes_1.AminoTypes({
# +                "/cosmos.staking.v1beta1.MsgDelegate": {
# +                    aminoType: "my-override/MsgDelegate",
# +                    toAmino: (m) => {
# +                        var _a;
# +                        return ({
# +                            foo: (_a = m.delegatorAddress) !== null && _a !== void 0 ? _a : "",
# +                        });
# +                    },
# +                    fromAmino: () => ({
# +                        bar: 123,
# +                    }),
# +                },
# +            });
# +            const aminoMsg = types.toAmino({
# +                typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                value: msg,
# +            });
# +            expect(aminoMsg).toEqual({
# +                type: "my-override/MsgDelegate",
# +                value: {
# +                    foo: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                },
# +            });
# +            expect(types.fromAmino(aminoMsg)).toEqual({
# +                typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                value: {
# +                    bar: 123,
# +                },
# +            });
# +        });
# +        it("can override type with Amino type collision", () => {
# +            const types = new aminotypes_1.AminoTypes({
# +                ...(0, modules_1.createStakingAminoConverters)("cosmos"),
# +                "/cosmos.staking.otherVersion456.MsgDelegate": {
# +                    aminoType: "cosmos-sdk/MsgDelegate",
# +                    toAmino: (m) => {
# +                        var _a;
# +                        return ({
# +                            foo: (_a = m.delegatorAddress) !== null && _a !== void 0 ? _a : "",
# +                        });
# +                    },
# +                    fromAmino: () => ({
# +                        bar: 123,
# +                    }),
# +                },
# +            });
# +            const aminoMsg = types.toAmino({
# +                typeUrl: "/cosmos.staking.otherVersion456.MsgDelegate",
# +                value: msg,
# +            });
# +            expect(aminoMsg).toEqual({
# +                type: "cosmos-sdk/MsgDelegate",
# +                value: {
# +                    foo: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                },
# +            });
# +            expect(() => types.fromAmino(aminoMsg)).toThrowError("Multiple types are registered with Amino type identifier 'cosmos-sdk/MsgDelegate': '/cosmos.staking.otherVersion456.MsgDelegate', '/cosmos.staking.v1beta1.MsgDelegate'. Thus fromAmino cannot be performed.");
# +        });
# +    });
# +    describe("toAmino", () => {
# +        it("works with custom type url", () => {
# +            const msg = {
# +                foo: "bar",
# +            };
# +            const aminoMsg = new aminotypes_1.AminoTypes({
# +                "/my.CustomType": {
# +                    aminoType: "my-sdk/CustomType",
# +                    toAmino: ({ foo, }) => ({
# +                        foo: `amino-prefix-${foo}`,
# +                        constant: "something-for-amino",
# +                    }),
# +                    fromAmino: () => { },
# +                },
# +            }).toAmino({ typeUrl: "/my.CustomType", value: msg });
# +            expect(aminoMsg).toEqual({
# +                type: "my-sdk/CustomType",
# +                value: {
# +                    foo: "amino-prefix-bar",
# +                    constant: "something-for-amino",
# +                },
# +            });
# +        });
# +        it("works with overridden type url", () => {
# +            const msg = {
# +                delegatorAddress: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                validatorAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                amount: (0, proto_signing_1.coin)(1234, "ucosm"),
# +            };
# +            const aminoMsg = new aminotypes_1.AminoTypes({
# +                "/cosmos.staking.v1beta1.MsgDelegate": {
# +                    aminoType: "my-override/MsgDelegate",
# +                    toAmino: (m) => {
# +                        var _a;
# +                        return ({
# +                            foo: (_a = m.delegatorAddress) !== null && _a !== void 0 ? _a : "",
# +                        });
# +                    },
# +                    fromAmino: () => { },
# +                },
# +            }).toAmino({
# +                typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "my-override/MsgDelegate",
# +                value: {
# +                    foo: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +        it("throws for unknown type url", () => {
# +            expect(() => new aminotypes_1.AminoTypes((0, modules_1.createBankAminoConverters)()).toAmino({
# +                typeUrl: "/xxx.Unknown",
# +                value: { foo: "bar" },
# +            })).toThrowError(/Type URL '\/xxx\.Unknown' does not exist in the Amino message type register./i);
# +        });
# +    });
# +    describe("fromAmino", () => {
# +        it("works for custom type url", () => {
# +            const aminoMsg = {
# +                type: "my-sdk/CustomType",
# +                value: {
# +                    foo: "amino-prefix-bar",
# +                    constant: "something-for-amino",
# +                },
# +            };
# +            const msg = new aminotypes_1.AminoTypes({
# +                "/my.CustomType": {
# +                    aminoType: "my-sdk/CustomType",
# +                    toAmino: () => { },
# +                    fromAmino: ({ foo }) => ({
# +                        foo: foo.slice(13),
# +                    }),
# +                },
# +            }).fromAmino(aminoMsg);
# +            const expectedValue = {
# +                foo: "bar",
# +            };
# +            expect(msg).toEqual({
# +                typeUrl: "/my.CustomType",
# +                value: expectedValue,
# +            });
# +        });
# +        it("works with overridden type URL", () => {
# +            const msg = new aminotypes_1.AminoTypes({
# +                "/cosmos.staking.v1beta1.MsgDelegate": {
# +                    aminoType: "cosmos-sdk/MsgDelegate2",
# +                    toAmino: () => { },
# +                    fromAmino: ({ foo }) => ({
# +                        delegatorAddress: foo,
# +                        validatorAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                        amount: (0, proto_signing_1.coin)(1234, "ucosm"),
# +                    }),
# +                },
# +            }).fromAmino({
# +                type: "cosmos-sdk/MsgDelegate2",
# +                value: {
# +                    foo: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                },
# +            });
# +            expect(msg).toEqual({
# +                typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                value: {
# +                    delegatorAddress: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    validatorAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    amount: (0, proto_signing_1.coin)(1234, "ucosm"),
# +                },
# +            });
# +        });
# +        it("throws for types which are not on chain yet", () => {
# +            expect(() => {
# +                new aminotypes_1.AminoTypes({ "/cosmos.feegrant.v1beta1.MsgRevokeAllowance": "not_supported_by_chain" }).toAmino({
# +                    typeUrl: "/cosmos.feegrant.v1beta1.MsgRevokeAllowance",
# +                    value: 0,
# +                });
# +            }).toThrowError(/The message type '\/cosmos.feegrant.v1beta1.MsgRevokeAllowance' cannot be signed using the Amino JSON sign mode because this is not supported by chain./i);
# +        });
# +        it("throws for unknown type url", () => {
# +            expect(() => new aminotypes_1.AminoTypes((0, modules_1.createBankAminoConverters)()).fromAmino({
# +                type: "cosmos-sdk/MsgUnknown",
# +                value: { foo: "bar" },
# +            })).toThrowError(/Amino type identifier 'cosmos-sdk\/MsgUnknown' does not exist in the Amino message type register./i);
# +        });
# +    });
# +});
# +//# sourceMappingURL=aminotypes.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/aminotypes.spec.js.map b/node_modules/@cosmjs/stargate/build/aminotypes.spec.js.map
# new file mode 100644
# index 0000000..83a7b05
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/aminotypes.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"aminotypes.spec.js","sourceRoot":"","sources":["../src/aminotypes.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/events.d.ts b/node_modules/@cosmjs/stargate/build/events.d.ts
# deleted file mode 100644
# index ca35ce9..0000000
# --- a/node_modules/@cosmjs/stargate/build/events.d.ts
# +++ /dev/null
# @@ -1,32 +0,0 @@
# -import { tendermint34, tendermint37 } from "@cosmjs/tendermint-rpc";
# -/**
# - * An event attribute.
# - *
# - * This is the same attribute type as tendermint34.Attribute and tendermint35.EventAttribute
# - * but `key` and `value` are unified to strings. The conversion
# - * from bytes to string in the Tendermint 0.34 case should be done by performing
# - * [lossy] UTF-8 decoding.
# - *
# - * [lossy]: https://doc.rust-lang.org/stable/std/string/struct.String.html#method.from_utf8_lossy
# - */
# -export interface Attribute {
# -    readonly key: string;
# -    readonly value: string;
# -}
# -/**
# - * The same event type as tendermint34.Event and tendermint35.Event
# - * but attribute keys and values are unified to strings. The conversion
# - * from bytes to string in the Tendermint 0.34 case should be done by performing
# - * [lossy] UTF-8 decoding.
# - *
# - * [lossy]: https://doc.rust-lang.org/stable/std/string/struct.String.html#method.from_utf8_lossy
# - */
# -export interface Event {
# -    readonly type: string;
# -    readonly attributes: readonly Attribute[];
# -}
# -/**
# - * Takes a Tendermint 0.34 or 0.37 event with binary encoded key and value
# - * and converts it into an `Event` with string attributes.
# - */
# -export declare function fromTendermintEvent(event: tendermint34.Event | tendermint37.Event): Event;
# diff --git a/node_modules/@cosmjs/stargate/build/events.js b/node_modules/@cosmjs/stargate/build/events.js
# deleted file mode 100644
# index 90364c5..0000000
# --- a/node_modules/@cosmjs/stargate/build/events.js
# +++ /dev/null
# @@ -1,19 +0,0 @@
# -"use strict";
# -Object.defineProperty(exports, "__esModule", { value: true });
# -exports.fromTendermintEvent = void 0;
# -const encoding_1 = require("@cosmjs/encoding");
# -/**
# - * Takes a Tendermint 0.34 or 0.37 event with binary encoded key and value
# - * and converts it into an `Event` with string attributes.
# - */
# -function fromTendermintEvent(event) {
# -    return {
# -        type: event.type,
# -        attributes: event.attributes.map((attr) => ({
# -            key: typeof attr.key == "string" ? attr.key : (0, encoding_1.fromUtf8)(attr.key, true),
# -            value: typeof attr.value == "string" ? attr.value : (0, encoding_1.fromUtf8)(attr.value, true),
# -        })),
# -    };
# -}
# -exports.fromTendermintEvent = fromTendermintEvent;
# -//# sourceMappingURL=events.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/events.js.map b/node_modules/@cosmjs/stargate/build/events.js.map
# deleted file mode 100644
# index c50fc1e..0000000
# --- a/node_modules/@cosmjs/stargate/build/events.js.map
# +++ /dev/null
# @@ -1 +0,0 @@
# -{"version":3,"file":"events.js","sourceRoot":"","sources":["../src/events.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AA+B5C;;;GAGG;AACH,SAAgB,mBAAmB,CAAC,KAA8C;IAChF,OAAO;QACL,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,UAAU,EAAE,KAAK,CAAC,UAAU,CAAC,GAAG,CAC9B,CAAC,IAAI,EAAa,EAAE,CAAC,CAAC;YACpB,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAA,mBAAQ,EAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC;YACtE,KAAK,EAAE,OAAO,IAAI,CAAC,KAAK,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAA,mBAAQ,EAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC;SAC/E,CAAC,CACH;KACF,CAAC;AACJ,CAAC;AAVD,kDAUC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/fee.js b/node_modules/@cosmjs/stargate/build/fee.js
# index 3da2e07..67f3d36 100644
# --- a/node_modules/@cosmjs/stargate/build/fee.js
# +++ b/node_modules/@cosmjs/stargate/build/fee.js
# @@ -55,9 +55,7 @@ exports.GasPrice = GasPrice;
#  function calculateFee(gasLimit, gasPrice) {
#      const processedGasPrice = typeof gasPrice === "string" ? GasPrice.fromString(gasPrice) : gasPrice;
#      const { denom, amount: gasPriceAmount } = processedGasPrice;
# -    // Note: Amount can exceed the safe integer range (https://github.com/cosmos/cosmjs/issues/1134),
# -    // which we handle by converting from Decimal to string without going through number.
# -    const amount = gasPriceAmount.multiply(new math_1.Uint53(gasLimit)).ceil().toString();
# +    const amount = Math.ceil(gasPriceAmount.multiply(new math_1.Uint53(gasLimit)).toFloatApproximation());
#      return {
#          amount: (0, proto_signing_1.coins)(amount, denom),
#          gas: gasLimit.toString(),
# diff --git a/node_modules/@cosmjs/stargate/build/fee.js.map b/node_modules/@cosmjs/stargate/build/fee.js.map
# index f992326..ee48e0a 100644
# --- a/node_modules/@cosmjs/stargate/build/fee.js.map
# +++ b/node_modules/@cosmjs/stargate/build/fee.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"fee.js","sourceRoot":"","sources":["../src/fee.ts"],"names":[],"mappings":";;;AACA,uCAA+C;AAC/C,yDAA8C;AAE9C;;;;;GAKG;AACH,SAAS,UAAU,CAAC,KAAa;IAC/B,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE;QAC1C,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;KAC/D;AACH,CAAC;AAED;;;GAGG;AACH,MAAa,QAAQ;IAInB,YAAmB,MAAe,EAAE,KAAa;QAC/C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED;;;;;;;OAOG;IACI,MAAM,CAAC,UAAU,CAAC,QAAgB;QACvC,0FAA0F;QAC1F,MAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;QACnE,IAAI,CAAC,WAAW,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;SAC7C;QACD,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC,GAAG,WAAW,CAAC;QACvC,UAAU,CAAC,KAAK,CAAC,CAAC;QAClB,MAAM,gBAAgB,GAAG,EAAE,CAAC;QAC5B,MAAM,aAAa,GAAG,cAAO,CAAC,aAAa,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;QACtE,OAAO,IAAI,QAAQ,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED;;;OAGG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;IAC7C,CAAC;CACF;AArCD,4BAqCC;AAED,SAAgB,YAAY,CAAC,QAAgB,EAAE,QAA2B;IACxE,MAAM,iBAAiB,GAAG,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;IAClG,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,cAAc,EAAE,GAAG,iBAAiB,CAAC;IAC5D,iGAAiG;IACjG,qFAAqF;IACrF,MAAM,MAAM,GAAG,cAAc,CAAC,QAAQ,CAAC,IAAI,aAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC;IAC/E,OAAO;QACL,MAAM,EAAE,IAAA,qBAAK,EAAC,MAAM,EAAE,KAAK,CAAC;QAC5B,GAAG,EAAE,QAAQ,CAAC,QAAQ,EAAE;KACzB,CAAC;AACJ,CAAC;AAVD,oCAUC"}
# \ No newline at end of file
# +{"version":3,"file":"fee.js","sourceRoot":"","sources":["../src/fee.ts"],"names":[],"mappings":";;;AACA,uCAA+C;AAC/C,yDAA8C;AAE9C;;;;;GAKG;AACH,SAAS,UAAU,CAAC,KAAa;IAC/B,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE;QAC1C,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;KAC/D;AACH,CAAC;AAED;;;GAGG;AACH,MAAa,QAAQ;IAInB,YAAmB,MAAe,EAAE,KAAa;QAC/C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED;;;;;;;OAOG;IACI,MAAM,CAAC,UAAU,CAAC,QAAgB;QACvC,0FAA0F;QAC1F,MAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;QACnE,IAAI,CAAC,WAAW,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;SAC7C;QACD,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC,GAAG,WAAW,CAAC;QACvC,UAAU,CAAC,KAAK,CAAC,CAAC;QAClB,MAAM,gBAAgB,GAAG,EAAE,CAAC;QAC5B,MAAM,aAAa,GAAG,cAAO,CAAC,aAAa,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;QACtE,OAAO,IAAI,QAAQ,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED;;;OAGG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;IAC7C,CAAC;CACF;AArCD,4BAqCC;AAED,SAAgB,YAAY,CAAC,QAAgB,EAAE,QAA2B;IACxE,MAAM,iBAAiB,GAAG,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;IAClG,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,cAAc,EAAE,GAAG,iBAAiB,CAAC;IAC5D,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,aAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,oBAAoB,EAAE,CAAC,CAAC;IAC/F,OAAO;QACL,MAAM,EAAE,IAAA,qBAAK,EAAC,MAAM,EAAE,KAAK,CAAC;QAC5B,GAAG,EAAE,QAAQ,CAAC,QAAQ,EAAE;KACzB,CAAC;AACJ,CAAC;AARD,oCAQC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/fee.spec.d.ts b/node_modules/@cosmjs/stargate/build/fee.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/fee.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/fee.spec.js b/node_modules/@cosmjs/stargate/build/fee.spec.js
# new file mode 100644
# index 0000000..da0f436
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/fee.spec.js
# @@ -0,0 +1,85 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +const math_1 = require("@cosmjs/math");
# +const fee_1 = require("./fee");
# +describe("GasPrice", () => {
# +    it("can be constructed", () => {
# +        const inputs = ["3.14", "3", "0.14"];
# +        inputs.forEach((input) => {
# +            const gasPrice = new fee_1.GasPrice(math_1.Decimal.fromUserInput(input, 18), "utest");
# +            expect(gasPrice.amount.toString()).toEqual(input);
# +            expect(gasPrice.denom).toEqual("utest");
# +        });
# +    });
# +    describe("fromString", () => {
# +        it("works", () => {
# +            const inputs = {
# +                // Test amounts
# +                "3.14utest": { amount: "3.14", denom: "utest" },
# +                "3utest": { amount: "3", denom: "utest" },
# +                "0.14utest": { amount: "0.14", denom: "utest" },
# +                // Test denoms
# +                "0.14sht": { amount: "0.14", denom: "sht" },
# +                "0.14testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest": {
# +                    amount: "0.14",
# +                    denom: "testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest",
# +                },
# +                "0.14ucoin2": { amount: "0.14", denom: "ucoin2" },
# +                // eslint-disable-next-line @typescript-eslint/naming-convention
# +                "0.14FOOBAR": { amount: "0.14", denom: "FOOBAR" },
# +            };
# +            for (const [input, expected] of Object.entries(inputs)) {
# +                const gasPrice = fee_1.GasPrice.fromString(input);
# +                expect(gasPrice.amount.toString()).withContext(`Input: ${input}`).toEqual(expected.amount);
# +                expect(gasPrice.denom).withContext(`Input: ${input}`).toEqual(expected.denom);
# +            }
# +        });
# +        it("errors for invalid gas price", () => {
# +            // Checks basic format <amount><denom>
# +            expect(() => fee_1.GasPrice.fromString("")).toThrowError(/Invalid gas price string/i);
# +            expect(() => fee_1.GasPrice.fromString("utkn")).toThrowError(/Invalid gas price string/i);
# +            expect(() => fee_1.GasPrice.fromString("@utkn")).toThrowError(/Invalid gas price string/i);
# +            expect(() => fee_1.GasPrice.fromString("234")).toThrowError(/Invalid gas price string/i);
# +            expect(() => fee_1.GasPrice.fromString("-234tkn")).toThrowError(/Invalid gas price string/i);
# +            // Checks details of <denom>
# +            expect(() => fee_1.GasPrice.fromString("234t")).toThrowError(/denom must be between 3 and 128 characters/i);
# +            expect(() => fee_1.GasPrice.fromString("234tt")).toThrowError(/denom must be between 3 and 128 characters/i);
# +            expect(() => fee_1.GasPrice.fromString("234ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt")).toThrowError(/denom must be between 3 and 128 characters/i);
# +            // Checks details of <amount>
# +            expect(() => fee_1.GasPrice.fromString("3.utkn")).toThrowError(/Fractional part missing/i);
# +            expect(() => fee_1.GasPrice.fromString("..utkn")).toThrowError(/More than one separator found/i);
# +        });
# +    });
# +    describe("toString", () => {
# +        it("works", () => {
# +            const price1 = new fee_1.GasPrice(math_1.Decimal.fromUserInput("3.14", 18), "utest");
# +            expect(price1.toString()).toEqual("3.14utest");
# +            const price2 = new fee_1.GasPrice(math_1.Decimal.fromUserInput("0.14", 18), "utest");
# +            expect(price2.toString()).toEqual("0.14utest");
# +            // is normalized just like other Decimals
# +            const price3 = new fee_1.GasPrice(math_1.Decimal.fromUserInput("003.000", 18), "utest");
# +            expect(price3.toString()).toEqual("3utest");
# +        });
# +    });
# +});
# +describe("calculateFee", () => {
# +    it("multiplies the gas price by the gas limit", () => {
# +        const gasLimit = 80000;
# +        const gasPrice = fee_1.GasPrice.fromString("0.025ucosm");
# +        const fee = (0, fee_1.calculateFee)(gasLimit, gasPrice);
# +        expect(fee).toEqual({
# +            amount: [{ amount: "2000", denom: "ucosm" }],
# +            gas: "80000",
# +        });
# +    });
# +    it("accepts a string gas price", () => {
# +        const gasLimit = 80000;
# +        const gasPrice = "0.025ucosm";
# +        const fee = (0, fee_1.calculateFee)(gasLimit, gasPrice);
# +        expect(fee).toEqual({
# +            amount: [{ amount: "2000", denom: "ucosm" }],
# +            gas: "80000",
# +        });
# +    });
# +});
# +//# sourceMappingURL=fee.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/fee.spec.js.map b/node_modules/@cosmjs/stargate/build/fee.spec.js.map
# new file mode 100644
# index 0000000..097fb46
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/fee.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"fee.spec.js","sourceRoot":"","sources":["../src/fee.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/index.d.ts b/node_modules/@cosmjs/stargate/build/index.d.ts
# index 9007f70..1bb3d94 100644
# --- a/node_modules/@cosmjs/stargate/build/index.d.ts
# +++ b/node_modules/@cosmjs/stargate/build/index.d.ts
# @@ -1,14 +1,13 @@
#  export { Account, accountFromAny, AccountParser } from "./accounts";
#  export { AminoConverter, AminoConverters, AminoTypes } from "./aminotypes";
# -export { Attribute, Event, fromTendermintEvent } from "./events";
#  export { calculateFee, GasPrice } from "./fee";
#  export * as logs from "./logs";
# -export { AminoMsgBeginRedelegate, AminoMsgCreateValidator, AminoMsgCreateVestingAccount, AminoMsgDelegate, AminoMsgDeposit, AminoMsgEditValidator, AminoMsgFundCommunityPool, AminoMsgMultiSend, AminoMsgSend, AminoMsgSetWithdrawAddress, AminoMsgSubmitEvidence, AminoMsgSubmitProposal, AminoMsgTransfer, AminoMsgUndelegate, AminoMsgUnjail, AminoMsgVerifyInvariant, AminoMsgVote, AminoMsgVoteWeighted, AminoMsgWithdrawDelegatorReward, AminoMsgWithdrawValidatorCommission, AuthExtension, BankExtension, createAuthzAminoConverters, createBankAminoConverters, createCrysisAminoConverters, createDistributionAminoConverters, createEvidenceAminoConverters, createFeegrantAminoConverters, createGovAminoConverters, createIbcAminoConverters, createSlashingAminoConverters, createStakingAminoConverters, createVestingAminoConverters, DistributionExtension, GovExtension, GovParamsType, GovProposalId, IbcExtension, isAminoMsgBeginRedelegate, isAminoMsgCreateValidator, isAminoMsgCreateVestingAccount, isAminoMsgDelegate, isAminoMsgDeposit, isAminoMsgEditValidator, isAminoMsgFundCommunityPool, isAminoMsgMultiSend, isAminoMsgSend, isAminoMsgSetWithdrawAddress, isAminoMsgSubmitEvidence, isAminoMsgSubmitProposal, isAminoMsgTransfer, isAminoMsgUndelegate, isAminoMsgUnjail, isAminoMsgVerifyInvariant, isAminoMsgVote, isAminoMsgVoteWeighted, isAminoMsgWithdrawDelegatorReward, isAminoMsgWithdrawValidatorCommission, isMsgBeginRedelegateEncodeObject, isMsgCreateValidatorEncodeObject, isMsgDelegateEncodeObject, isMsgDepositEncodeObject, isMsgEditValidatorEncodeObject, isMsgSendEncodeObject, isMsgSubmitProposalEncodeObject, isMsgTransferEncodeObject, isMsgUndelegateEncodeObject, isMsgVoteEncodeObject, isMsgVoteWeightedEncodeObject, isMsgWithdrawDelegatorRewardEncodeObject, MintExtension, MintParams, MsgBeginRedelegateEncodeObject, MsgCreateValidatorEncodeObject, MsgDelegateEncodeObject, MsgDepositEncodeObject, MsgEditValidatorEncodeObject, MsgSendEncodeObject, MsgSubmitProposalEncodeObject, MsgTransferEncodeObject, MsgUndelegateEncodeObject, MsgVoteEncodeObject, MsgVoteWeightedEncodeObject, MsgWithdrawDelegatorRewardEncodeObject, setupAuthExtension, setupAuthzExtension, setupBankExtension, setupDistributionExtension, setupFeegrantExtension, setupGovExtension, setupIbcExtension, setupMintExtension, setupSlashingExtension, setupStakingExtension, setupTxExtension, StakingExtension, TxExtension, } from "./modules";
# -export { makeMultisignedTx, makeMultisignedTxBytes } from "./multisignature";
# -export { createPagination, createProtobufRpcClient, decodeCosmosSdkDecFromProto, ProtobufRpcClient, QueryAbciResponse, QueryClient, QueryStoreResponse, } from "./queryclient";
# +export { AminoMsgBeginRedelegate, AminoMsgCreateValidator, AminoMsgDelegate, AminoMsgDeposit, AminoMsgEditValidator, AminoMsgFundCommunityPool, AminoMsgMultiSend, AminoMsgSend, AminoMsgSetWithdrawAddress, AminoMsgSubmitEvidence, AminoMsgSubmitProposal, AminoMsgUndelegate, AminoMsgUnjail, AminoMsgVerifyInvariant, AminoMsgVote, AminoMsgWithdrawDelegatorReward, AminoMsgWithdrawValidatorCommission, AuthExtension, BankExtension, DistributionExtension, GovExtension, GovParamsType, GovProposalId, IbcExtension, isAminoMsgBeginRedelegate, isAminoMsgCreateValidator, isAminoMsgDelegate, isAminoMsgDeposit, isAminoMsgEditValidator, isAminoMsgFundCommunityPool, isAminoMsgMultiSend, isAminoMsgSend, isAminoMsgSetWithdrawAddress, isAminoMsgSubmitEvidence, isAminoMsgSubmitProposal, isAminoMsgUndelegate, isAminoMsgUnjail, isAminoMsgVerifyInvariant, isAminoMsgVote, isAminoMsgWithdrawDelegatorReward, isAminoMsgWithdrawValidatorCommission, isMsgDelegateEncodeObject, isMsgDepositEncodeObject, isMsgSendEncodeObject, isMsgSubmitProposalEncodeObject, isMsgTransferEncodeObject, isMsgUndelegateEncodeObject, isMsgVoteEncodeObject, isMsgWithdrawDelegatorRewardEncodeObject, MintExtension, MintParams, MsgDelegateEncodeObject, MsgDepositEncodeObject, MsgSendEncodeObject, MsgSubmitProposalEncodeObject, MsgTransferEncodeObject, MsgUndelegateEncodeObject, MsgVoteEncodeObject, MsgWithdrawDelegatorRewardEncodeObject, setupAuthExtension, setupBankExtension, setupDistributionExtension, setupGovExtension, setupIbcExtension, setupMintExtension, setupStakingExtension, setupTxExtension, StakingExtension, TxExtension, } from "./modules";
# +export { createAuthzAminoConverters, createBankAminoConverters, createDistributionAminoConverters, createFreegrantAminoConverters, createGovAminoConverters, createIbcAminoConverters, createStakingAminoConverters, } from "./modules";
# +export { makeMultisignedTx } from "./multisignature";
# +export { createPagination, createProtobufRpcClient, decodeCosmosSdkDecFromProto, ProtobufRpcClient, QueryClient, } from "./queryclient";
#  export { isSearchByHeightQuery, isSearchBySentFromOrToQuery, isSearchByTagsQuery, SearchByHeightQuery, SearchBySentFromOrToQuery, SearchByTagsQuery, SearchTxFilter, SearchTxQuery, } from "./search";
# -export { createDefaultAminoConverters, defaultRegistryTypes, SignerData, SigningStargateClient, SigningStargateClientOptions, } from "./signingstargateclient";
# -export { assertIsDeliverTxFailure, assertIsDeliverTxSuccess, Block, BlockHeader, BroadcastTxError, DeliverTxResponse, IndexedTx, isDeliverTxFailure, isDeliverTxSuccess, SequenceResponse, StargateClient, StargateClientOptions, TimeoutError, } from "./stargateclient";
# +export { defaultRegistryTypes, SignerData, SigningStargateClient, SigningStargateClientOptions, } from "./signingstargateclient";
# +export { assertIsDeliverTxFailure, assertIsDeliverTxSuccess, Block, BlockHeader, DeliverTxResponse, IndexedTx, isDeliverTxFailure, isDeliverTxSuccess, SequenceResponse, StargateClient, StargateClientOptions, TimeoutError, } from "./stargateclient";
#  export { StdFee } from "@cosmjs/amino";
#  export { Coin, coin, coins, makeCosmoshubPath, parseCoins } from "@cosmjs/proto-signing";
# -export { HttpEndpoint } from "@cosmjs/tendermint-rpc";
# diff --git a/node_modules/@cosmjs/stargate/build/index.js b/node_modules/@cosmjs/stargate/build/index.js
# index 1e3708e..d006428 100644
# --- a/node_modules/@cosmjs/stargate/build/index.js
# +++ b/node_modules/@cosmjs/stargate/build/index.js
# @@ -1,11 +1,7 @@
#  "use strict";
#  var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
#      if (k2 === undefined) k2 = k;
# -    var desc = Object.getOwnPropertyDescriptor(m, k);
# -    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
# -      desc = { enumerable: true, get: function() { return m[k]; } };
# -    }
# -    Object.defineProperty(o, k2, desc);
# +    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
#  }) : (function(o, m, k, k2) {
#      if (k2 === undefined) k2 = k;
#      o[k2] = m[k];
# @@ -23,33 +19,19 @@ var __importStar = (this && this.__importStar) || function (mod) {
#      return result;
#  };
#  Object.defineProperty(exports, "__esModule", { value: true });
# -exports.setupAuthExtension = exports.isMsgWithdrawDelegatorRewardEncodeObject = exports.isMsgVoteWeightedEncodeObject = exports.isMsgVoteEncodeObject = exports.isMsgUndelegateEncodeObject = exports.isMsgTransferEncodeObject = exports.isMsgSubmitProposalEncodeObject = exports.isMsgSendEncodeObject = exports.isMsgEditValidatorEncodeObject = exports.isMsgDepositEncodeObject = exports.isMsgDelegateEncodeObject = exports.isMsgCreateValidatorEncodeObject = exports.isMsgBeginRedelegateEncodeObject = exports.isAminoMsgWithdrawValidatorCommission = exports.isAminoMsgWithdrawDelegatorReward = exports.isAminoMsgVoteWeighted = exports.isAminoMsgVote = exports.isAminoMsgVerifyInvariant = exports.isAminoMsgUnjail = exports.isAminoMsgUndelegate = exports.isAminoMsgTransfer = exports.isAminoMsgSubmitProposal = exports.isAminoMsgSubmitEvidence = exports.isAminoMsgSetWithdrawAddress = exports.isAminoMsgSend = exports.isAminoMsgMultiSend = exports.isAminoMsgFundCommunityPool = exports.isAminoMsgEditValidator = exports.isAminoMsgDeposit = exports.isAminoMsgDelegate = exports.isAminoMsgCreateVestingAccount = exports.isAminoMsgCreateValidator = exports.isAminoMsgBeginRedelegate = exports.createVestingAminoConverters = exports.createStakingAminoConverters = exports.createSlashingAminoConverters = exports.createIbcAminoConverters = exports.createGovAminoConverters = exports.createFeegrantAminoConverters = exports.createEvidenceAminoConverters = exports.createDistributionAminoConverters = exports.createCrysisAminoConverters = exports.createBankAminoConverters = exports.createAuthzAminoConverters = exports.logs = exports.GasPrice = exports.calculateFee = exports.fromTendermintEvent = exports.AminoTypes = exports.accountFromAny = void 0;
# -exports.parseCoins = exports.makeCosmoshubPath = exports.coins = exports.coin = exports.TimeoutError = exports.StargateClient = exports.isDeliverTxSuccess = exports.isDeliverTxFailure = exports.BroadcastTxError = exports.assertIsDeliverTxSuccess = exports.assertIsDeliverTxFailure = exports.SigningStargateClient = exports.defaultRegistryTypes = exports.createDefaultAminoConverters = exports.isSearchByTagsQuery = exports.isSearchBySentFromOrToQuery = exports.isSearchByHeightQuery = exports.QueryClient = exports.decodeCosmosSdkDecFromProto = exports.createProtobufRpcClient = exports.createPagination = exports.makeMultisignedTxBytes = exports.makeMultisignedTx = exports.setupTxExtension = exports.setupStakingExtension = exports.setupSlashingExtension = exports.setupMintExtension = exports.setupIbcExtension = exports.setupGovExtension = exports.setupFeegrantExtension = exports.setupDistributionExtension = exports.setupBankExtension = exports.setupAuthzExtension = void 0;
# +exports.QueryClient = exports.decodeCosmosSdkDecFromProto = exports.createProtobufRpcClient = exports.createPagination = exports.makeMultisignedTx = exports.createStakingAminoConverters = exports.createIbcAminoConverters = exports.createGovAminoConverters = exports.createFreegrantAminoConverters = exports.createDistributionAminoConverters = exports.createBankAminoConverters = exports.createAuthzAminoConverters = exports.setupTxExtension = exports.setupStakingExtension = exports.setupMintExtension = exports.setupIbcExtension = exports.setupGovExtension = exports.setupDistributionExtension = exports.setupBankExtension = exports.setupAuthExtension = exports.isMsgWithdrawDelegatorRewardEncodeObject = exports.isMsgVoteEncodeObject = exports.isMsgUndelegateEncodeObject = exports.isMsgTransferEncodeObject = exports.isMsgSubmitProposalEncodeObject = exports.isMsgSendEncodeObject = exports.isMsgDepositEncodeObject = exports.isMsgDelegateEncodeObject = exports.isAminoMsgWithdrawValidatorCommission = exports.isAminoMsgWithdrawDelegatorReward = exports.isAminoMsgVote = exports.isAminoMsgVerifyInvariant = exports.isAminoMsgUnjail = exports.isAminoMsgUndelegate = exports.isAminoMsgSubmitProposal = exports.isAminoMsgSubmitEvidence = exports.isAminoMsgSetWithdrawAddress = exports.isAminoMsgSend = exports.isAminoMsgMultiSend = exports.isAminoMsgFundCommunityPool = exports.isAminoMsgEditValidator = exports.isAminoMsgDeposit = exports.isAminoMsgDelegate = exports.isAminoMsgCreateValidator = exports.isAminoMsgBeginRedelegate = exports.logs = exports.GasPrice = exports.calculateFee = exports.AminoTypes = exports.accountFromAny = void 0;
# +exports.parseCoins = exports.makeCosmoshubPath = exports.coins = exports.coin = exports.TimeoutError = exports.StargateClient = exports.isDeliverTxSuccess = exports.isDeliverTxFailure = exports.assertIsDeliverTxSuccess = exports.assertIsDeliverTxFailure = exports.SigningStargateClient = exports.defaultRegistryTypes = exports.isSearchByTagsQuery = exports.isSearchBySentFromOrToQuery = exports.isSearchByHeightQuery = void 0;
#  var accounts_1 = require("./accounts");
#  Object.defineProperty(exports, "accountFromAny", { enumerable: true, get: function () { return accounts_1.accountFromAny; } });
#  var aminotypes_1 = require("./aminotypes");
#  Object.defineProperty(exports, "AminoTypes", { enumerable: true, get: function () { return aminotypes_1.AminoTypes; } });
# -var events_1 = require("./events");
# -Object.defineProperty(exports, "fromTendermintEvent", { enumerable: true, get: function () { return events_1.fromTendermintEvent; } });
#  var fee_1 = require("./fee");
#  Object.defineProperty(exports, "calculateFee", { enumerable: true, get: function () { return fee_1.calculateFee; } });
#  Object.defineProperty(exports, "GasPrice", { enumerable: true, get: function () { return fee_1.GasPrice; } });
#  exports.logs = __importStar(require("./logs"));
#  var modules_1 = require("./modules");
# -Object.defineProperty(exports, "createAuthzAminoConverters", { enumerable: true, get: function () { return modules_1.createAuthzAminoConverters; } });
# -Object.defineProperty(exports, "createBankAminoConverters", { enumerable: true, get: function () { return modules_1.createBankAminoConverters; } });
# -Object.defineProperty(exports, "createCrysisAminoConverters", { enumerable: true, get: function () { return modules_1.createCrysisAminoConverters; } });
# -Object.defineProperty(exports, "createDistributionAminoConverters", { enumerable: true, get: function () { return modules_1.createDistributionAminoConverters; } });
# -Object.defineProperty(exports, "createEvidenceAminoConverters", { enumerable: true, get: function () { return modules_1.createEvidenceAminoConverters; } });
# -Object.defineProperty(exports, "createFeegrantAminoConverters", { enumerable: true, get: function () { return modules_1.createFeegrantAminoConverters; } });
# -Object.defineProperty(exports, "createGovAminoConverters", { enumerable: true, get: function () { return modules_1.createGovAminoConverters; } });
# -Object.defineProperty(exports, "createIbcAminoConverters", { enumerable: true, get: function () { return modules_1.createIbcAminoConverters; } });
# -Object.defineProperty(exports, "createSlashingAminoConverters", { enumerable: true, get: function () { return modules_1.createSlashingAminoConverters; } });
# -Object.defineProperty(exports, "createStakingAminoConverters", { enumerable: true, get: function () { return modules_1.createStakingAminoConverters; } });
# -Object.defineProperty(exports, "createVestingAminoConverters", { enumerable: true, get: function () { return modules_1.createVestingAminoConverters; } });
#  Object.defineProperty(exports, "isAminoMsgBeginRedelegate", { enumerable: true, get: function () { return modules_1.isAminoMsgBeginRedelegate; } });
#  Object.defineProperty(exports, "isAminoMsgCreateValidator", { enumerable: true, get: function () { return modules_1.isAminoMsgCreateValidator; } });
# -Object.defineProperty(exports, "isAminoMsgCreateVestingAccount", { enumerable: true, get: function () { return modules_1.isAminoMsgCreateVestingAccount; } });
#  Object.defineProperty(exports, "isAminoMsgDelegate", { enumerable: true, get: function () { return modules_1.isAminoMsgDelegate; } });
#  Object.defineProperty(exports, "isAminoMsgDeposit", { enumerable: true, get: function () { return modules_1.isAminoMsgDeposit; } });
#  Object.defineProperty(exports, "isAminoMsgEditValidator", { enumerable: true, get: function () { return modules_1.isAminoMsgEditValidator; } });
# @@ -59,40 +41,38 @@ Object.defineProperty(exports, "isAminoMsgSend", { enumerable: true, get: functi
#  Object.defineProperty(exports, "isAminoMsgSetWithdrawAddress", { enumerable: true, get: function () { return modules_1.isAminoMsgSetWithdrawAddress; } });
#  Object.defineProperty(exports, "isAminoMsgSubmitEvidence", { enumerable: true, get: function () { return modules_1.isAminoMsgSubmitEvidence; } });
#  Object.defineProperty(exports, "isAminoMsgSubmitProposal", { enumerable: true, get: function () { return modules_1.isAminoMsgSubmitProposal; } });
# -Object.defineProperty(exports, "isAminoMsgTransfer", { enumerable: true, get: function () { return modules_1.isAminoMsgTransfer; } });
#  Object.defineProperty(exports, "isAminoMsgUndelegate", { enumerable: true, get: function () { return modules_1.isAminoMsgUndelegate; } });
#  Object.defineProperty(exports, "isAminoMsgUnjail", { enumerable: true, get: function () { return modules_1.isAminoMsgUnjail; } });
#  Object.defineProperty(exports, "isAminoMsgVerifyInvariant", { enumerable: true, get: function () { return modules_1.isAminoMsgVerifyInvariant; } });
#  Object.defineProperty(exports, "isAminoMsgVote", { enumerable: true, get: function () { return modules_1.isAminoMsgVote; } });
# -Object.defineProperty(exports, "isAminoMsgVoteWeighted", { enumerable: true, get: function () { return modules_1.isAminoMsgVoteWeighted; } });
#  Object.defineProperty(exports, "isAminoMsgWithdrawDelegatorReward", { enumerable: true, get: function () { return modules_1.isAminoMsgWithdrawDelegatorReward; } });
#  Object.defineProperty(exports, "isAminoMsgWithdrawValidatorCommission", { enumerable: true, get: function () { return modules_1.isAminoMsgWithdrawValidatorCommission; } });
# -Object.defineProperty(exports, "isMsgBeginRedelegateEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgBeginRedelegateEncodeObject; } });
# -Object.defineProperty(exports, "isMsgCreateValidatorEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgCreateValidatorEncodeObject; } });
#  Object.defineProperty(exports, "isMsgDelegateEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgDelegateEncodeObject; } });
#  Object.defineProperty(exports, "isMsgDepositEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgDepositEncodeObject; } });
# -Object.defineProperty(exports, "isMsgEditValidatorEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgEditValidatorEncodeObject; } });
#  Object.defineProperty(exports, "isMsgSendEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgSendEncodeObject; } });
#  Object.defineProperty(exports, "isMsgSubmitProposalEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgSubmitProposalEncodeObject; } });
#  Object.defineProperty(exports, "isMsgTransferEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgTransferEncodeObject; } });
#  Object.defineProperty(exports, "isMsgUndelegateEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgUndelegateEncodeObject; } });
#  Object.defineProperty(exports, "isMsgVoteEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgVoteEncodeObject; } });
# -Object.defineProperty(exports, "isMsgVoteWeightedEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgVoteWeightedEncodeObject; } });
#  Object.defineProperty(exports, "isMsgWithdrawDelegatorRewardEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgWithdrawDelegatorRewardEncodeObject; } });
#  Object.defineProperty(exports, "setupAuthExtension", { enumerable: true, get: function () { return modules_1.setupAuthExtension; } });
# -Object.defineProperty(exports, "setupAuthzExtension", { enumerable: true, get: function () { return modules_1.setupAuthzExtension; } });
#  Object.defineProperty(exports, "setupBankExtension", { enumerable: true, get: function () { return modules_1.setupBankExtension; } });
#  Object.defineProperty(exports, "setupDistributionExtension", { enumerable: true, get: function () { return modules_1.setupDistributionExtension; } });
# -Object.defineProperty(exports, "setupFeegrantExtension", { enumerable: true, get: function () { return modules_1.setupFeegrantExtension; } });
#  Object.defineProperty(exports, "setupGovExtension", { enumerable: true, get: function () { return modules_1.setupGovExtension; } });
#  Object.defineProperty(exports, "setupIbcExtension", { enumerable: true, get: function () { return modules_1.setupIbcExtension; } });
#  Object.defineProperty(exports, "setupMintExtension", { enumerable: true, get: function () { return modules_1.setupMintExtension; } });
# -Object.defineProperty(exports, "setupSlashingExtension", { enumerable: true, get: function () { return modules_1.setupSlashingExtension; } });
#  Object.defineProperty(exports, "setupStakingExtension", { enumerable: true, get: function () { return modules_1.setupStakingExtension; } });
#  Object.defineProperty(exports, "setupTxExtension", { enumerable: true, get: function () { return modules_1.setupTxExtension; } });
# +var modules_2 = require("./modules");
# +Object.defineProperty(exports, "createAuthzAminoConverters", { enumerable: true, get: function () { return modules_2.createAuthzAminoConverters; } });
# +Object.defineProperty(exports, "createBankAminoConverters", { enumerable: true, get: function () { return modules_2.createBankAminoConverters; } });
# +Object.defineProperty(exports, "createDistributionAminoConverters", { enumerable: true, get: function () { return modules_2.createDistributionAminoConverters; } });
# +Object.defineProperty(exports, "createFreegrantAminoConverters", { enumerable: true, get: function () { return modules_2.createFreegrantAminoConverters; } });
# +Object.defineProperty(exports, "createGovAminoConverters", { enumerable: true, get: function () { return modules_2.createGovAminoConverters; } });
# +Object.defineProperty(exports, "createIbcAminoConverters", { enumerable: true, get: function () { return modules_2.createIbcAminoConverters; } });
# +Object.defineProperty(exports, "createStakingAminoConverters", { enumerable: true, get: function () { return modules_2.createStakingAminoConverters; } });
#  var multisignature_1 = require("./multisignature");
#  Object.defineProperty(exports, "makeMultisignedTx", { enumerable: true, get: function () { return multisignature_1.makeMultisignedTx; } });
# -Object.defineProperty(exports, "makeMultisignedTxBytes", { enumerable: true, get: function () { return multisignature_1.makeMultisignedTxBytes; } });
#  var queryclient_1 = require("./queryclient");
#  Object.defineProperty(exports, "createPagination", { enumerable: true, get: function () { return queryclient_1.createPagination; } });
#  Object.defineProperty(exports, "createProtobufRpcClient", { enumerable: true, get: function () { return queryclient_1.createProtobufRpcClient; } });
# @@ -103,13 +83,11 @@ Object.defineProperty(exports, "isSearchByHeightQuery", { enumerable: true, get:
#  Object.defineProperty(exports, "isSearchBySentFromOrToQuery", { enumerable: true, get: function () { return search_1.isSearchBySentFromOrToQuery; } });
#  Object.defineProperty(exports, "isSearchByTagsQuery", { enumerable: true, get: function () { return search_1.isSearchByTagsQuery; } });
#  var signingstargateclient_1 = require("./signingstargateclient");
# -Object.defineProperty(exports, "createDefaultAminoConverters", { enumerable: true, get: function () { return signingstargateclient_1.createDefaultAminoConverters; } });
#  Object.defineProperty(exports, "defaultRegistryTypes", { enumerable: true, get: function () { return signingstargateclient_1.defaultRegistryTypes; } });
#  Object.defineProperty(exports, "SigningStargateClient", { enumerable: true, get: function () { return signingstargateclient_1.SigningStargateClient; } });
#  var stargateclient_1 = require("./stargateclient");
#  Object.defineProperty(exports, "assertIsDeliverTxFailure", { enumerable: true, get: function () { return stargateclient_1.assertIsDeliverTxFailure; } });
#  Object.defineProperty(exports, "assertIsDeliverTxSuccess", { enumerable: true, get: function () { return stargateclient_1.assertIsDeliverTxSuccess; } });
# -Object.defineProperty(exports, "BroadcastTxError", { enumerable: true, get: function () { return stargateclient_1.BroadcastTxError; } });
#  Object.defineProperty(exports, "isDeliverTxFailure", { enumerable: true, get: function () { return stargateclient_1.isDeliverTxFailure; } });
#  Object.defineProperty(exports, "isDeliverTxSuccess", { enumerable: true, get: function () { return stargateclient_1.isDeliverTxSuccess; } });
#  Object.defineProperty(exports, "StargateClient", { enumerable: true, get: function () { return stargateclient_1.StargateClient; } });
# diff --git a/node_modules/@cosmjs/stargate/build/index.js.map b/node_modules/@cosmjs/stargate/build/index.js.map
# index 274d44a..b1d6b09 100644
# --- a/node_modules/@cosmjs/stargate/build/index.js.map
# +++ b/node_modules/@cosmjs/stargate/build/index.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# +{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAoE;AAAlD,0GAAA,cAAc,OAAA;AAChC,2CAA2E;AAAjC,wGAAA,UAAU,OAAA;AACpD,6BAA+C;AAAtC,mGAAA,YAAY,OAAA;AAAE,+FAAA,QAAQ,OAAA;AAC/B,+CAA+B;AAC/B,qCAsEmB;AA7CjB,oHAAA,yBAAyB,OAAA;AACzB,oHAAA,yBAAyB,OAAA;AACzB,6GAAA,kBAAkB,OAAA;AAClB,4GAAA,iBAAiB,OAAA;AACjB,kHAAA,uBAAuB,OAAA;AACvB,sHAAA,2BAA2B,OAAA;AAC3B,8GAAA,mBAAmB,OAAA;AACnB,yGAAA,cAAc,OAAA;AACd,uHAAA,4BAA4B,OAAA;AAC5B,mHAAA,wBAAwB,OAAA;AACxB,mHAAA,wBAAwB,OAAA;AACxB,+GAAA,oBAAoB,OAAA;AACpB,2GAAA,gBAAgB,OAAA;AAChB,oHAAA,yBAAyB,OAAA;AACzB,yGAAA,cAAc,OAAA;AACd,4HAAA,iCAAiC,OAAA;AACjC,gIAAA,qCAAqC,OAAA;AACrC,oHAAA,yBAAyB,OAAA;AACzB,mHAAA,wBAAwB,OAAA;AACxB,gHAAA,qBAAqB,OAAA;AACrB,0HAAA,+BAA+B,OAAA;AAC/B,oHAAA,yBAAyB,OAAA;AACzB,sHAAA,2BAA2B,OAAA;AAC3B,gHAAA,qBAAqB,OAAA;AACrB,mIAAA,wCAAwC,OAAA;AAWxC,6GAAA,kBAAkB,OAAA;AAClB,6GAAA,kBAAkB,OAAA;AAClB,qHAAA,0BAA0B,OAAA;AAC1B,4GAAA,iBAAiB,OAAA;AACjB,4GAAA,iBAAiB,OAAA;AACjB,6GAAA,kBAAkB,OAAA;AAClB,gHAAA,qBAAqB,OAAA;AACrB,2GAAA,gBAAgB,OAAA;AAIlB,qCAQmB;AAPjB,qHAAA,0BAA0B,OAAA;AAC1B,oHAAA,yBAAyB,OAAA;AACzB,4HAAA,iCAAiC,OAAA;AACjC,yHAAA,8BAA8B,OAAA;AAC9B,mHAAA,wBAAwB,OAAA;AACxB,mHAAA,wBAAwB,OAAA;AACxB,uHAAA,4BAA4B,OAAA;AAE9B,mDAAqD;AAA5C,mHAAA,iBAAiB,OAAA;AAC1B,6CAMuB;AALrB,+GAAA,gBAAgB,OAAA;AAChB,sHAAA,uBAAuB,OAAA;AACvB,0HAAA,2BAA2B,OAAA;AAE3B,0GAAA,WAAW,OAAA;AAEb,mCASkB;AARhB,+GAAA,qBAAqB,OAAA;AACrB,qHAAA,2BAA2B,OAAA;AAC3B,6GAAA,mBAAmB,OAAA;AAOrB,iEAKiC;AAJ/B,6HAAA,oBAAoB,OAAA;AAEpB,8HAAA,qBAAqB,OAAA;AAGvB,mDAa0B;AAZxB,0HAAA,wBAAwB,OAAA;AACxB,0HAAA,wBAAwB,OAAA;AAKxB,oHAAA,kBAAkB,OAAA;AAClB,oHAAA,kBAAkB,OAAA;AAElB,gHAAA,cAAc,OAAA;AAEd,8GAAA,YAAY,OAAA;AAGd,uDAAyF;AAA1E,qGAAA,IAAI,OAAA;AAAE,sGAAA,KAAK,OAAA;AAAE,kHAAA,iBAAiB,OAAA;AAAE,2GAAA,UAAU,OAAA"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/logs.d.ts b/node_modules/@cosmjs/stargate/build/logs.d.ts
# index 09e35c2..c4ee487 100644
# --- a/node_modules/@cosmjs/stargate/build/logs.d.ts
# +++ b/node_modules/@cosmjs/stargate/build/logs.d.ts
# @@ -1,4 +1,11 @@
# -import { Attribute, Event } from "./events";
# +export interface Attribute {
# +    readonly key: string;
# +    readonly value: string;
# +}
# +export interface Event {
# +    readonly type: string;
# +    readonly attributes: readonly Attribute[];
# +}
#  export interface Log {
#      readonly msg_index: number;
#      readonly log: string;
# diff --git a/node_modules/@cosmjs/stargate/build/logs.js b/node_modules/@cosmjs/stargate/build/logs.js
# index 38d7500..69a15fa 100644
# --- a/node_modules/@cosmjs/stargate/build/logs.js
# +++ b/node_modules/@cosmjs/stargate/build/logs.js
# @@ -72,10 +72,9 @@ exports.parseRawLog = parseRawLog;
#   * Throws if the attribute was not found.
#   */
#  function findAttribute(logs, eventType, attrKey) {
# +    var _a;
#      const firstLogs = logs.find(() => true);
# -    const out = firstLogs?.events
# -        .find((event) => event.type === eventType)
# -        ?.attributes.find((attr) => attr.key === attrKey);
# +    const out = (_a = firstLogs === null || firstLogs === void 0 ? void 0 : firstLogs.events.find((event) => event.type === eventType)) === null || _a === void 0 ? void 0 : _a.attributes.find((attr) => attr.key === attrKey);
#      if (!out) {
#          throw new Error(`Could not find attribute '${attrKey}' in first event of type '${eventType}' in first log.`);
#      }
# diff --git a/node_modules/@cosmjs/stargate/build/logs.js.map b/node_modules/@cosmjs/stargate/build/logs.js.map
# index ed67c8f..77c3d16 100644
# --- a/node_modules/@cosmjs/stargate/build/logs.js.map
# +++ b/node_modules/@cosmjs/stargate/build/logs.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"logs.js","sourceRoot":"","sources":["../src/logs.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# +{"version":3,"file":"logs.js","sourceRoot":"","sources":["../src/logs.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/auth/queries.js b/node_modules/@cosmjs/stargate/build/modules/auth/queries.js
# index 6d8c55b..654aa77 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/auth/queries.js
# +++ b/node_modules/@cosmjs/stargate/build/modules/auth/queries.js
# @@ -12,7 +12,7 @@ function setupAuthExtension(base) {
#          auth: {
#              account: async (address) => {
#                  const { account } = await queryService.Account({ address: address });
# -                return account ?? null;
# +                return account !== null && account !== void 0 ? account : null;
#              },
#          },
#      };
# diff --git a/node_modules/@cosmjs/stargate/build/modules/auth/queries.js.map b/node_modules/@cosmjs/stargate/build/modules/auth/queries.js.map
# index bfc8b52..3ba3791 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/auth/queries.js.map
# +++ b/node_modules/@cosmjs/stargate/build/modules/auth/queries.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../src/modules/auth/queries.ts"],"names":[],"mappings":";;;AAAA,kEAAyE;AAGzE,mDAAyE;AAezE,SAAgB,kBAAkB,CAAC,IAAiB;IAClD,MAAM,GAAG,GAAG,IAAA,qCAAuB,EAAC,IAAI,CAAC,CAAC;IAC1C,6DAA6D;IAC7D,6CAA6C;IAC7C,MAAM,YAAY,GAAG,IAAI,uBAAe,CAAC,GAAG,CAAC,CAAC;IAE9C,OAAO;QACL,IAAI,EAAE;YACJ,OAAO,EAAE,KAAK,EAAE,OAAe,EAAE,EAAE;gBACjC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;gBACrE,OAAO,OAAO,IAAI,IAAI,CAAC;YACzB,CAAC;SACF;KACF,CAAC;AACJ,CAAC;AAdD,gDAcC"}
# \ No newline at end of file
# +{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../src/modules/auth/queries.ts"],"names":[],"mappings":";;;AAAA,kEAAyE;AAGzE,mDAAyE;AAezE,SAAgB,kBAAkB,CAAC,IAAiB;IAClD,MAAM,GAAG,GAAG,IAAA,qCAAuB,EAAC,IAAI,CAAC,CAAC;IAC1C,6DAA6D;IAC7D,6CAA6C;IAC7C,MAAM,YAAY,GAAG,IAAI,uBAAe,CAAC,GAAG,CAAC,CAAC;IAE9C,OAAO;QACL,IAAI,EAAE;YACJ,OAAO,EAAE,KAAK,EAAE,OAAe,EAAE,EAAE;gBACjC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;gBACrE,OAAO,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,IAAI,CAAC;YACzB,CAAC;SACF;KACF,CAAC;AACJ,CAAC;AAdD,gDAcC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/auth/queries.spec.d.ts b/node_modules/@cosmjs/stargate/build/modules/auth/queries.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/auth/queries.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/modules/auth/queries.spec.js b/node_modules/@cosmjs/stargate/build/modules/auth/queries.spec.js
# new file mode 100644
# index 0000000..4866611
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/auth/queries.spec.js
# @@ -0,0 +1,58 @@
# +"use strict";
# +var __importDefault = (this && this.__importDefault) || function (mod) {
# +    return (mod && mod.__esModule) ? mod : { "default": mod };
# +};
# +Object.defineProperty(exports, "__esModule", { value: true });
# +/* eslint-disable @typescript-eslint/naming-convention */
# +const proto_signing_1 = require("@cosmjs/proto-signing");
# +const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
# +const utils_1 = require("@cosmjs/utils");
# +const auth_1 = require("cosmjs-types/cosmos/auth/v1beta1/auth");
# +const any_1 = require("cosmjs-types/google/protobuf/any");
# +const long_1 = __importDefault(require("long"));
# +const queryclient_1 = require("../../queryclient");
# +const testutils_spec_1 = require("../../testutils.spec");
# +const queries_1 = require("./queries");
# +async function makeClientWithAuth(rpcUrl) {
# +    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(rpcUrl);
# +    return [queryclient_1.QueryClient.withExtensions(tmClient, queries_1.setupAuthExtension), tmClient];
# +}
# +describe("AuthExtension", () => {
# +    describe("account", () => {
# +        it("works for unused account", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithAuth(testutils_spec_1.simapp.tendermintUrl);
# +            const account = await client.auth.account(testutils_spec_1.unused.address);
# +            (0, utils_1.assert)(account);
# +            expect(account.typeUrl).toEqual("/cosmos.auth.v1beta1.BaseAccount");
# +            expect(auth_1.BaseAccount.decode(account.value)).toEqual({
# +                address: testutils_spec_1.unused.address,
# +                // pubKey not set
# +                accountNumber: long_1.default.fromNumber(testutils_spec_1.unused.accountNumber, true),
# +                sequence: long_1.default.fromNumber(0, true),
# +            });
# +            tmClient.disconnect();
# +        });
# +        it("works for account with pubkey and non-zero sequence", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithAuth(testutils_spec_1.simapp.tendermintUrl);
# +            const account = await client.auth.account(testutils_spec_1.validator.delegatorAddress);
# +            (0, utils_1.assert)(account);
# +            expect(account.typeUrl).toEqual("/cosmos.auth.v1beta1.BaseAccount");
# +            expect(auth_1.BaseAccount.decode(account.value)).toEqual({
# +                address: testutils_spec_1.validator.delegatorAddress,
# +                pubKey: any_1.Any.fromPartial((0, proto_signing_1.encodePubkey)(testutils_spec_1.validator.pubkey)),
# +                accountNumber: long_1.default.fromNumber(0, true),
# +                sequence: long_1.default.fromNumber(testutils_spec_1.validator.sequence, true),
# +            });
# +            tmClient.disconnect();
# +        });
# +        it("rejects for non-existent address", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithAuth(testutils_spec_1.simapp.tendermintUrl);
# +            await expectAsync(client.auth.account(testutils_spec_1.nonExistentAddress)).toBeRejectedWithError(/account cosmos1p79apjaufyphcmsn4g07cynqf0wyjuezqu84hd not found/i);
# +            tmClient.disconnect();
# +        });
# +    });
# +});
# +//# sourceMappingURL=queries.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/auth/queries.spec.js.map b/node_modules/@cosmjs/stargate/build/modules/auth/queries.spec.js.map
# new file mode 100644
# index 0000000..8cbd92e
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/auth/queries.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"queries.spec.js","sourceRoot":"","sources":["../../../src/modules/auth/queries.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/authz/queries.d.ts b/node_modules/@cosmjs/stargate/build/modules/authz/queries.d.ts
# index 354eba5..f517339 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/authz/queries.d.ts
# +++ b/node_modules/@cosmjs/stargate/build/modules/authz/queries.d.ts
# @@ -1,10 +1,8 @@
# -import { QueryGranteeGrantsResponse, QueryGranterGrantsResponse, QueryGrantsResponse } from "cosmjs-types/cosmos/authz/v1beta1/query";
# +import { QueryGrantsResponse } from "cosmjs-types/cosmos/authz/v1beta1/query";
#  import { QueryClient } from "../../queryclient";
#  export interface AuthzExtension {
#      readonly authz: {
#          readonly grants: (granter: string, grantee: string, msgTypeUrl: string, paginationKey?: Uint8Array) => Promise<QueryGrantsResponse>;
# -        readonly granteeGrants: (grantee: string, paginationKey?: Uint8Array) => Promise<QueryGranteeGrantsResponse>;
# -        readonly granterGrants: (granter: string, paginationKey?: Uint8Array) => Promise<QueryGranterGrantsResponse>;
#      };
#  }
#  export declare function setupAuthzExtension(base: QueryClient): AuthzExtension;
# diff --git a/node_modules/@cosmjs/stargate/build/modules/authz/queries.js b/node_modules/@cosmjs/stargate/build/modules/authz/queries.js
# index 8a8d787..0f99da2 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/authz/queries.js
# +++ b/node_modules/@cosmjs/stargate/build/modules/authz/queries.js
# @@ -11,24 +11,13 @@ function setupAuthzExtension(base) {
#      return {
#          authz: {
#              grants: async (granter, grantee, msgTypeUrl, paginationKey) => {
# -                return await queryService.Grants({
# +                const response = await queryService.Grants({
#                      granter: granter,
#                      grantee: grantee,
#                      msgTypeUrl: msgTypeUrl,
#                      pagination: (0, queryclient_1.createPagination)(paginationKey),
#                  });
# -            },
# -            granteeGrants: async (grantee, paginationKey) => {
# -                return await queryService.GranteeGrants({
# -                    grantee: grantee,
# -                    pagination: (0, queryclient_1.createPagination)(paginationKey),
# -                });
# -            },
# -            granterGrants: async (granter, paginationKey) => {
# -                return await queryService.GranterGrants({
# -                    granter: granter,
# -                    pagination: (0, queryclient_1.createPagination)(paginationKey),
# -                });
# +                return response;
#              },
#          },
#      };
# diff --git a/node_modules/@cosmjs/stargate/build/modules/authz/queries.js.map b/node_modules/@cosmjs/stargate/build/modules/authz/queries.js.map
# index 970dc3b..c18239a 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/authz/queries.js.map
# +++ b/node_modules/@cosmjs/stargate/build/modules/authz/queries.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../src/modules/authz/queries.ts"],"names":[],"mappings":";;;AAAA,mEAKiD;AAEjD,mDAA2F;AAqB3F,SAAgB,mBAAmB,CAAC,IAAiB;IACnD,6DAA6D;IAC7D,6CAA6C;IAC7C,MAAM,GAAG,GAAG,IAAA,qCAAuB,EAAC,IAAI,CAAC,CAAC;IAC1C,MAAM,YAAY,GAAG,IAAI,uBAAe,CAAC,GAAG,CAAC,CAAC;IAE9C,OAAO;QACL,KAAK,EAAE;YACL,MAAM,EAAE,KAAK,EAAE,OAAe,EAAE,OAAe,EAAE,UAAkB,EAAE,aAA0B,EAAE,EAAE;gBACjG,OAAO,MAAM,YAAY,CAAC,MAAM,CAAC;oBAC/B,OAAO,EAAE,OAAO;oBAChB,OAAO,EAAE,OAAO;oBAChB,UAAU,EAAE,UAAU;oBACtB,UAAU,EAAE,IAAA,8BAAgB,EAAC,aAAa,CAAC;iBAC5C,CAAC,CAAC;YACL,CAAC;YACD,aAAa,EAAE,KAAK,EAAE,OAAe,EAAE,aAA0B,EAAE,EAAE;gBACnE,OAAO,MAAM,YAAY,CAAC,aAAa,CAAC;oBACtC,OAAO,EAAE,OAAO;oBAChB,UAAU,EAAE,IAAA,8BAAgB,EAAC,aAAa,CAAC;iBAC5C,CAAC,CAAC;YACL,CAAC;YACD,aAAa,EAAE,KAAK,EAAE,OAAe,EAAE,aAA0B,EAAE,EAAE;gBACnE,OAAO,MAAM,YAAY,CAAC,aAAa,CAAC;oBACtC,OAAO,EAAE,OAAO;oBAChB,UAAU,EAAE,IAAA,8BAAgB,EAAC,aAAa,CAAC;iBAC5C,CAAC,CAAC;YACL,CAAC;SACF;KACF,CAAC;AACJ,CAAC;AA9BD,kDA8BC"}
# \ No newline at end of file
# +{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../src/modules/authz/queries.ts"],"names":[],"mappings":";;;AAAA,mEAA+F;AAE/F,mDAA2F;AAa3F,SAAgB,mBAAmB,CAAC,IAAiB;IACnD,6DAA6D;IAC7D,6CAA6C;IAC7C,MAAM,GAAG,GAAG,IAAA,qCAAuB,EAAC,IAAI,CAAC,CAAC;IAC1C,MAAM,YAAY,GAAG,IAAI,uBAAe,CAAC,GAAG,CAAC,CAAC;IAE9C,OAAO;QACL,KAAK,EAAE;YACL,MAAM,EAAE,KAAK,EAAE,OAAe,EAAE,OAAe,EAAE,UAAkB,EAAE,aAA0B,EAAE,EAAE;gBACjG,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,MAAM,CAAC;oBACzC,OAAO,EAAE,OAAO;oBAChB,OAAO,EAAE,OAAO;oBAChB,UAAU,EAAE,UAAU;oBACtB,UAAU,EAAE,IAAA,8BAAgB,EAAC,aAAa,CAAC;iBAC5C,CAAC,CAAC;gBAEH,OAAO,QAAQ,CAAC;YAClB,CAAC;SACF;KACF,CAAC;AACJ,CAAC;AApBD,kDAoBC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/authz/queries.spec.d.ts b/node_modules/@cosmjs/stargate/build/modules/authz/queries.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/authz/queries.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/modules/authz/queries.spec.js b/node_modules/@cosmjs/stargate/build/modules/authz/queries.spec.js
# new file mode 100644
# index 0000000..8b3544f
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/authz/queries.spec.js
# @@ -0,0 +1,73 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +const amino_1 = require("@cosmjs/amino");
# +const proto_signing_1 = require("@cosmjs/proto-signing");
# +const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
# +const utils_1 = require("@cosmjs/utils");
# +const authz_1 = require("cosmjs-types/cosmos/authz/v1beta1/authz");
# +const queryclient_1 = require("../../queryclient");
# +const signingstargateclient_1 = require("../../signingstargateclient");
# +const stargateclient_1 = require("../../stargateclient");
# +const testutils_spec_1 = require("../../testutils.spec");
# +const queries_1 = require("./queries");
# +async function makeClientWithAuthz(rpcUrl) {
# +    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(rpcUrl);
# +    return [queryclient_1.QueryClient.withExtensions(tmClient, queries_1.setupAuthzExtension), tmClient];
# +}
# +describe("AuthzExtension", () => {
# +    const defaultFee = {
# +        amount: (0, proto_signing_1.coins)(25000, "ucosm"),
# +        gas: "1500000", // 1.5 million
# +    };
# +    const granter1Address = testutils_spec_1.faucet.address1;
# +    const grantee1Address = (0, testutils_spec_1.makeRandomAddress)();
# +    const grantedMsg = "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward";
# +    beforeAll(async () => {
# +        if ((0, testutils_spec_1.simapp44Enabled)()) {
# +            const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic, {
# +                // Use address 1 and 2 instead of 0 to avoid conflicts with other delegation tests
# +                // This must match `voterAddress` above.
# +                hdPaths: [(0, amino_1.makeCosmoshubPath)(1), (0, amino_1.makeCosmoshubPath)(2)],
# +            });
# +            const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +            const grantMsg = {
# +                typeUrl: "/cosmos.authz.v1beta1.MsgGrant",
# +                value: {
# +                    granter: granter1Address,
# +                    grantee: grantee1Address,
# +                    grant: {
# +                        authorization: {
# +                            typeUrl: "/cosmos.authz.v1beta1.GenericAuthorization",
# +                            value: authz_1.GenericAuthorization.encode(authz_1.GenericAuthorization.fromPartial({
# +                                msg: grantedMsg,
# +                            })).finish(),
# +                        },
# +                    },
# +                },
# +            };
# +            const grantResult = await client.signAndBroadcast(granter1Address, [grantMsg], defaultFee, "Test grant for simd");
# +            (0, stargateclient_1.assertIsDeliverTxSuccess)(grantResult);
# +            await (0, utils_1.sleep)(75); // wait until transactions are indexed
# +            client.disconnect();
# +        }
# +    });
# +    describe("grants", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp44)();
# +            const [client, tmClient] = await makeClientWithAuthz(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.authz.grants(granter1Address, grantee1Address, "");
# +            expect(response.grants.length).toEqual(1);
# +            const grant = response.grants[0];
# +            // Needs to respond with a grant
# +            (0, utils_1.assertDefined)(grant.authorization);
# +            // Needs to be GenericAuthorization to decode it below
# +            expect(grant.authorization.typeUrl).toEqual("/cosmos.authz.v1beta1.GenericAuthorization");
# +            // Decode the message
# +            const msgDecoded = authz_1.GenericAuthorization.decode(grant.authorization.value).msg;
# +            // Check if its the same one then we granted
# +            expect(msgDecoded).toEqual(grantedMsg);
# +            tmClient.disconnect();
# +        });
# +    });
# +});
# +//# sourceMappingURL=queries.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/authz/queries.spec.js.map b/node_modules/@cosmjs/stargate/build/modules/authz/queries.spec.js.map
# new file mode 100644
# index 0000000..ac35384
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/authz/queries.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"queries.spec.js","sourceRoot":"","sources":["../../../src/modules/authz/queries.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/bank/aminomessages.spec.d.ts b/node_modules/@cosmjs/stargate/build/modules/bank/aminomessages.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/bank/aminomessages.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/modules/bank/aminomessages.spec.js b/node_modules/@cosmjs/stargate/build/modules/bank/aminomessages.spec.js
# new file mode 100644
# index 0000000..8370d05
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/bank/aminomessages.spec.js
# @@ -0,0 +1,115 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +/* eslint-disable @typescript-eslint/naming-convention */
# +const proto_signing_1 = require("@cosmjs/proto-signing");
# +const aminotypes_1 = require("../../aminotypes");
# +const aminomessages_1 = require("./aminomessages");
# +describe("AminoTypes", () => {
# +    describe("toAmino", () => {
# +        it("works for MsgSend", () => {
# +            const msg = {
# +                fromAddress: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                toAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                amount: (0, proto_signing_1.coins)(1234, "ucosm"),
# +            };
# +            const aminoTypes = new aminotypes_1.AminoTypes((0, aminomessages_1.createBankAminoConverters)());
# +            const aminoMsg = aminoTypes.toAmino({
# +                typeUrl: "/cosmos.bank.v1beta1.MsgSend",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "cosmos-sdk/MsgSend",
# +                value: {
# +                    from_address: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    to_address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    amount: (0, proto_signing_1.coins)(1234, "ucosm"),
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +        it("works for MsgMultiSend", () => {
# +            const msg = {
# +                inputs: [
# +                    { address: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6", coins: (0, proto_signing_1.coins)(1234, "ucosm") },
# +                    { address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5", coins: (0, proto_signing_1.coins)(5678, "ucosm") },
# +                ],
# +                outputs: [
# +                    { address: "cosmos1xy4yqngt0nlkdcenxymg8tenrghmek4nmqm28k", coins: (0, proto_signing_1.coins)(6000, "ucosm") },
# +                    { address: "cosmos142u9fgcjdlycfcez3lw8x6x5h7rfjlnfhpw2lx", coins: (0, proto_signing_1.coins)(912, "ucosm") },
# +                ],
# +            };
# +            const aminoTypes = new aminotypes_1.AminoTypes((0, aminomessages_1.createBankAminoConverters)());
# +            const aminoMsg = aminoTypes.toAmino({
# +                typeUrl: "/cosmos.bank.v1beta1.MsgMultiSend",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "cosmos-sdk/MsgMultiSend",
# +                value: {
# +                    inputs: [
# +                        { address: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6", coins: (0, proto_signing_1.coins)(1234, "ucosm") },
# +                        { address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5", coins: (0, proto_signing_1.coins)(5678, "ucosm") },
# +                    ],
# +                    outputs: [
# +                        { address: "cosmos1xy4yqngt0nlkdcenxymg8tenrghmek4nmqm28k", coins: (0, proto_signing_1.coins)(6000, "ucosm") },
# +                        { address: "cosmos142u9fgcjdlycfcez3lw8x6x5h7rfjlnfhpw2lx", coins: (0, proto_signing_1.coins)(912, "ucosm") },
# +                    ],
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +    });
# +    describe("fromAmino", () => {
# +        it("works for MsgSend", () => {
# +            const aminoMsg = {
# +                type: "cosmos-sdk/MsgSend",
# +                value: {
# +                    from_address: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    to_address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    amount: (0, proto_signing_1.coins)(1234, "ucosm"),
# +                },
# +            };
# +            const msg = new aminotypes_1.AminoTypes((0, aminomessages_1.createBankAminoConverters)()).fromAmino(aminoMsg);
# +            const expectedValue = {
# +                fromAddress: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                toAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                amount: (0, proto_signing_1.coins)(1234, "ucosm"),
# +            };
# +            expect(msg).toEqual({
# +                typeUrl: "/cosmos.bank.v1beta1.MsgSend",
# +                value: expectedValue,
# +            });
# +        });
# +        it("works for MsgMultiSend", () => {
# +            const aminoMsg = {
# +                type: "cosmos-sdk/MsgMultiSend",
# +                value: {
# +                    inputs: [
# +                        { address: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6", coins: (0, proto_signing_1.coins)(1234, "ucosm") },
# +                        { address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5", coins: (0, proto_signing_1.coins)(5678, "ucosm") },
# +                    ],
# +                    outputs: [
# +                        { address: "cosmos1xy4yqngt0nlkdcenxymg8tenrghmek4nmqm28k", coins: (0, proto_signing_1.coins)(6000, "ucosm") },
# +                        { address: "cosmos142u9fgcjdlycfcez3lw8x6x5h7rfjlnfhpw2lx", coins: (0, proto_signing_1.coins)(912, "ucosm") },
# +                    ],
# +                },
# +            };
# +            const msg = new aminotypes_1.AminoTypes((0, aminomessages_1.createBankAminoConverters)()).fromAmino(aminoMsg);
# +            const expectedValue = {
# +                inputs: [
# +                    { address: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6", coins: (0, proto_signing_1.coins)(1234, "ucosm") },
# +                    { address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5", coins: (0, proto_signing_1.coins)(5678, "ucosm") },
# +                ],
# +                outputs: [
# +                    { address: "cosmos1xy4yqngt0nlkdcenxymg8tenrghmek4nmqm28k", coins: (0, proto_signing_1.coins)(6000, "ucosm") },
# +                    { address: "cosmos142u9fgcjdlycfcez3lw8x6x5h7rfjlnfhpw2lx", coins: (0, proto_signing_1.coins)(912, "ucosm") },
# +                ],
# +            };
# +            expect(msg).toEqual({
# +                typeUrl: "/cosmos.bank.v1beta1.MsgMultiSend",
# +                value: expectedValue,
# +            });
# +        });
# +    });
# +});
# +//# sourceMappingURL=aminomessages.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/bank/aminomessages.spec.js.map b/node_modules/@cosmjs/stargate/build/modules/bank/aminomessages.spec.js.map
# new file mode 100644
# index 0000000..d04d5b8
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/bank/aminomessages.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"aminomessages.spec.js","sourceRoot":"","sources":["../../../src/modules/bank/aminomessages.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/bank/queries.d.ts b/node_modules/@cosmjs/stargate/build/modules/bank/queries.d.ts
# index 5caaa52..09acac9 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/bank/queries.d.ts
# +++ b/node_modules/@cosmjs/stargate/build/modules/bank/queries.d.ts
# @@ -1,12 +1,11 @@
#  import { Metadata } from "cosmjs-types/cosmos/bank/v1beta1/bank";
# -import { QueryTotalSupplyResponse } from "cosmjs-types/cosmos/bank/v1beta1/query";
#  import { Coin } from "cosmjs-types/cosmos/base/v1beta1/coin";
#  import { QueryClient } from "../../queryclient";
#  export interface BankExtension {
#      readonly bank: {
#          readonly balance: (address: string, denom: string) => Promise<Coin>;
#          readonly allBalances: (address: string) => Promise<Coin[]>;
# -        readonly totalSupply: (paginationKey?: Uint8Array) => Promise<QueryTotalSupplyResponse>;
# +        readonly totalSupply: () => Promise<Coin[]>;
#          readonly supplyOf: (denom: string) => Promise<Coin>;
#          readonly denomMetadata: (denom: string) => Promise<Metadata>;
#          readonly denomsMetadata: () => Promise<Metadata[]>;
# diff --git a/node_modules/@cosmjs/stargate/build/modules/bank/queries.js b/node_modules/@cosmjs/stargate/build/modules/bank/queries.js
# index af6f830..3d39d86 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/bank/queries.js
# +++ b/node_modules/@cosmjs/stargate/build/modules/bank/queries.js
# @@ -21,11 +21,9 @@ function setupBankExtension(base) {
#                  const { balances } = await queryService.AllBalances({ address: address });
#                  return balances;
#              },
# -            totalSupply: async (paginationKey) => {
# -                const response = await queryService.TotalSupply({
# -                    pagination: (0, queryclient_1.createPagination)(paginationKey),
# -                });
# -                return response;
# +            totalSupply: async () => {
# +                const { supply } = await queryService.TotalSupply({});
# +                return supply;
#              },
#              supplyOf: async (denom) => {
#                  const { amount } = await queryService.SupplyOf({ denom: denom });
# diff --git a/node_modules/@cosmjs/stargate/build/modules/bank/queries.js.map b/node_modules/@cosmjs/stargate/build/modules/bank/queries.js.map
# index 044848c..8fefb5b 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/bank/queries.js.map
# +++ b/node_modules/@cosmjs/stargate/build/modules/bank/queries.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../src/modules/bank/queries.ts"],"names":[],"mappings":";;;AAAA,yDAAyD;AACzD,yCAAuC;AAEvC,kEAAmG;AAGnG,mDAA2F;AAa3F,SAAgB,kBAAkB,CAAC,IAAiB;IAClD,MAAM,GAAG,GAAG,IAAA,qCAAuB,EAAC,IAAI,CAAC,CAAC;IAC1C,6DAA6D;IAC7D,6CAA6C;IAC7C,MAAM,YAAY,GAAG,IAAI,uBAAe,CAAC,GAAG,CAAC,CAAC;IAE9C,OAAO;QACL,IAAI,EAAE;YACJ,OAAO,EAAE,KAAK,EAAE,OAAe,EAAE,KAAa,EAAE,EAAE;gBAChD,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;gBACnF,IAAA,cAAM,EAAC,OAAO,CAAC,CAAC;gBAChB,OAAO,OAAO,CAAC;YACjB,CAAC;YACD,WAAW,EAAE,KAAK,EAAE,OAAe,EAAE,EAAE;gBACrC,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,YAAY,CAAC,WAAW,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;gBAC1E,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,WAAW,EAAE,KAAK,EAAE,aAA0B,EAAE,EAAE;gBAChD,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,WAAW,CAAC;oBAC9C,UAAU,EAAE,IAAA,8BAAgB,EAAC,aAAa,CAAC;iBAC5C,CAAC,CAAC;gBACH,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,QAAQ,EAAE,KAAK,EAAE,KAAa,EAAE,EAAE;gBAChC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;gBACjE,IAAA,cAAM,EAAC,MAAM,CAAC,CAAC;gBACf,OAAO,MAAM,CAAC;YAChB,CAAC;YACD,aAAa,EAAE,KAAK,EAAE,KAAa,EAAE,EAAE;gBACrC,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,YAAY,CAAC,aAAa,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;gBACjE,IAAA,cAAM,EAAC,QAAQ,CAAC,CAAC;gBACjB,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,cAAc,EAAE,KAAK,IAAI,EAAE;gBACzB,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,YAAY,CAAC,cAAc,CAAC;oBACtD,UAAU,EAAE,SAAS,EAAE,kBAAkB;iBAC1C,CAAC,CAAC;gBACH,OAAO,SAAS,CAAC;YACnB,CAAC;SACF;KACF,CAAC;AACJ,CAAC;AAzCD,gDAyCC"}
# \ No newline at end of file
# +{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../src/modules/bank/queries.ts"],"names":[],"mappings":";;;AAAA,yDAAyD;AACzD,yCAAuC;AAEvC,kEAAyE;AAGzE,mDAAyE;AAazE,SAAgB,kBAAkB,CAAC,IAAiB;IAClD,MAAM,GAAG,GAAG,IAAA,qCAAuB,EAAC,IAAI,CAAC,CAAC;IAC1C,6DAA6D;IAC7D,6CAA6C;IAC7C,MAAM,YAAY,GAAG,IAAI,uBAAe,CAAC,GAAG,CAAC,CAAC;IAE9C,OAAO;QACL,IAAI,EAAE;YACJ,OAAO,EAAE,KAAK,EAAE,OAAe,EAAE,KAAa,EAAE,EAAE;gBAChD,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;gBACnF,IAAA,cAAM,EAAC,OAAO,CAAC,CAAC;gBAChB,OAAO,OAAO,CAAC;YACjB,CAAC;YACD,WAAW,EAAE,KAAK,EAAE,OAAe,EAAE,EAAE;gBACrC,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,YAAY,CAAC,WAAW,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;gBAC1E,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,WAAW,EAAE,KAAK,IAAI,EAAE;gBACtB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,YAAY,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;gBACtD,OAAO,MAAM,CAAC;YAChB,CAAC;YACD,QAAQ,EAAE,KAAK,EAAE,KAAa,EAAE,EAAE;gBAChC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;gBACjE,IAAA,cAAM,EAAC,MAAM,CAAC,CAAC;gBACf,OAAO,MAAM,CAAC;YAChB,CAAC;YACD,aAAa,EAAE,KAAK,EAAE,KAAa,EAAE,EAAE;gBACrC,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,YAAY,CAAC,aAAa,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;gBACjE,IAAA,cAAM,EAAC,QAAQ,CAAC,CAAC;gBACjB,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,cAAc,EAAE,KAAK,IAAI,EAAE;gBACzB,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,YAAY,CAAC,cAAc,CAAC;oBACtD,UAAU,EAAE,SAAS,EAAE,kBAAkB;iBAC1C,CAAC,CAAC;gBACH,OAAO,SAAS,CAAC;YACnB,CAAC;SACF;KACF,CAAC;AACJ,CAAC;AAvCD,gDAuCC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/bank/queries.spec.d.ts b/node_modules/@cosmjs/stargate/build/modules/bank/queries.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/bank/queries.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/modules/bank/queries.spec.js b/node_modules/@cosmjs/stargate/build/modules/bank/queries.spec.js
# new file mode 100644
# index 0000000..795f880
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/bank/queries.spec.js
# @@ -0,0 +1,176 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
# +const queryclient_1 = require("../../queryclient");
# +const testutils_spec_1 = require("../../testutils.spec");
# +const queries_1 = require("./queries");
# +async function makeClientWithBank(rpcUrl) {
# +    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(rpcUrl);
# +    return [queryclient_1.QueryClient.withExtensions(tmClient, queries_1.setupBankExtension), tmClient];
# +}
# +describe("BankExtension", () => {
# +    describe("balance", () => {
# +        it("works for different existing balances", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithBank(testutils_spec_1.simapp.tendermintUrl);
# +            const response1 = await client.bank.balance(testutils_spec_1.unused.address, testutils_spec_1.simapp.denomFee);
# +            expect(response1).toEqual({
# +                amount: testutils_spec_1.unused.balanceFee,
# +                denom: testutils_spec_1.simapp.denomFee,
# +            });
# +            const response2 = await client.bank.balance(testutils_spec_1.unused.address, testutils_spec_1.simapp.denomStaking);
# +            expect(response2).toEqual({
# +                amount: testutils_spec_1.unused.balanceStaking,
# +                denom: testutils_spec_1.simapp.denomStaking,
# +            });
# +            tmClient.disconnect();
# +        });
# +        it("returns zero for non-existent balance", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithBank(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.bank.balance(testutils_spec_1.unused.address, "gintonic");
# +            expect(response).toEqual({
# +                amount: "0",
# +                denom: "gintonic",
# +            });
# +            tmClient.disconnect();
# +        });
# +        it("returns zero for non-existent address", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithBank(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.bank.balance(testutils_spec_1.nonExistentAddress, testutils_spec_1.simapp.denomFee);
# +            expect(response).toEqual({
# +                amount: "0",
# +                denom: testutils_spec_1.simapp.denomFee,
# +            });
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("allBalances", () => {
# +        it("returns all balances for unused account", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithBank(testutils_spec_1.simapp.tendermintUrl);
# +            const balances = await client.bank.allBalances(testutils_spec_1.unused.address);
# +            expect(balances).toEqual([
# +                {
# +                    amount: testutils_spec_1.unused.balanceFee,
# +                    denom: testutils_spec_1.simapp.denomFee,
# +                },
# +                {
# +                    amount: testutils_spec_1.unused.balanceStaking,
# +                    denom: testutils_spec_1.simapp.denomStaking,
# +                },
# +            ]);
# +            tmClient.disconnect();
# +        });
# +        it("returns an empty list for non-existent account", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithBank(testutils_spec_1.simapp.tendermintUrl);
# +            const balances = await client.bank.allBalances(testutils_spec_1.nonExistentAddress);
# +            expect(balances).toEqual([]);
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("totalSupply", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithBank(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.bank.totalSupply();
# +            expect(response).toEqual([
# +                {
# +                    amount: testutils_spec_1.simapp.totalSupply.toString(),
# +                    denom: testutils_spec_1.simapp.denomFee,
# +                },
# +                {
# +                    amount: jasmine.stringMatching(testutils_spec_1.nonNegativeIntegerMatcher),
# +                    denom: testutils_spec_1.simapp.denomStaking,
# +                },
# +            ]);
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("supplyOf", () => {
# +        it("works for existing denom", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithBank(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.bank.supplyOf(testutils_spec_1.simapp.denomFee);
# +            expect(response).toEqual({
# +                amount: testutils_spec_1.simapp.totalSupply.toString(),
# +                denom: testutils_spec_1.simapp.denomFee,
# +            });
# +            tmClient.disconnect();
# +        });
# +        it("returns zero for non-existent denom", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithBank(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.bank.supplyOf("gintonic");
# +            expect(response).toEqual({
# +                amount: "0",
# +                denom: "gintonic",
# +            });
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("denomMetadata", () => {
# +        it("works for existent denom", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithBank(testutils_spec_1.simapp.tendermintUrl);
# +            const metadata = await client.bank.denomMetadata("ucosm");
# +            expect(metadata).toEqual({
# +                description: "The fee token of this test chain",
# +                denomUnits: [
# +                    {
# +                        denom: "ucosm",
# +                        exponent: 0,
# +                        aliases: [],
# +                    },
# +                    {
# +                        denom: "COSM",
# +                        exponent: 6,
# +                        aliases: [],
# +                    },
# +                ],
# +                base: "ucosm",
# +                display: "COSM",
# +                name: "",
# +                symbol: "",
# +            });
# +            tmClient.disconnect();
# +        });
# +        it("works for non-existent denom", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithBank(testutils_spec_1.simapp.tendermintUrl);
# +            await expectAsync(client.bank.denomMetadata("nothere")).toBeRejectedWithError(/code = NotFound/i);
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("denomsMetadata", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithBank(testutils_spec_1.simapp.tendermintUrl);
# +            const metadatas = await client.bank.denomsMetadata();
# +            expect(metadatas.length).toEqual(1);
# +            expect(metadatas[0]).toEqual({
# +                description: "The fee token of this test chain",
# +                denomUnits: [
# +                    {
# +                        denom: "ucosm",
# +                        exponent: 0,
# +                        aliases: [],
# +                    },
# +                    {
# +                        denom: "COSM",
# +                        exponent: 6,
# +                        aliases: [],
# +                    },
# +                ],
# +                base: "ucosm",
# +                display: "COSM",
# +                name: "",
# +                symbol: "",
# +            });
# +            tmClient.disconnect();
# +        });
# +    });
# +});
# +//# sourceMappingURL=queries.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/bank/queries.spec.js.map b/node_modules/@cosmjs/stargate/build/modules/bank/queries.spec.js.map
# new file mode 100644
# index 0000000..15df33f
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/bank/queries.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"queries.spec.js","sourceRoot":"","sources":["../../../src/modules/bank/queries.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/distribution/aminomessages.spec.d.ts b/node_modules/@cosmjs/stargate/build/modules/distribution/aminomessages.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/distribution/aminomessages.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/modules/distribution/aminomessages.spec.js b/node_modules/@cosmjs/stargate/build/modules/distribution/aminomessages.spec.js
# new file mode 100644
# index 0000000..f5a4f12
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/distribution/aminomessages.spec.js
# @@ -0,0 +1,91 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +/* eslint-disable @typescript-eslint/naming-convention */
# +const proto_signing_1 = require("@cosmjs/proto-signing");
# +const aminotypes_1 = require("../../aminotypes");
# +const aminomessages_1 = require("./aminomessages");
# +describe("AminoTypes", () => {
# +    describe("toAmino", () => {
# +        it("works for MsgFundCommunityPool", async () => {
# +            const msg = {
# +                amount: (0, proto_signing_1.coins)(1234, "ucosm"),
# +                depositor: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +            };
# +            const aminoTypes = new aminotypes_1.AminoTypes((0, aminomessages_1.createDistributionAminoConverters)());
# +            const aminoMsg = aminoTypes.toAmino({
# +                typeUrl: "/cosmos.distribution.v1beta1.MsgFundCommunityPool",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "cosmos-sdk/MsgFundCommunityPool",
# +                value: {
# +                    amount: (0, proto_signing_1.coins)(1234, "ucosm"),
# +                    depositor: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +        it("works for MsgSetWithdrawAddress", async () => {
# +            const msg = {
# +                delegatorAddress: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                withdrawAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +            };
# +            const aminoTypes = new aminotypes_1.AminoTypes((0, aminomessages_1.createDistributionAminoConverters)());
# +            const aminoMsg = aminoTypes.toAmino({
# +                typeUrl: "/cosmos.distribution.v1beta1.MsgSetWithdrawAddress",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "cosmos-sdk/MsgModifyWithdrawAddress",
# +                value: {
# +                    delegator_address: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    withdraw_address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +        it("works for MsgWithdrawDelegatorReward", async () => {
# +            const msg = {
# +                delegatorAddress: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                validatorAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +            };
# +            const aminoTypes = new aminotypes_1.AminoTypes((0, aminomessages_1.createDistributionAminoConverters)());
# +            const aminoMsg = aminoTypes.toAmino({
# +                typeUrl: "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "cosmos-sdk/MsgWithdrawDelegationReward",
# +                value: {
# +                    delegator_address: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    validator_address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +        it("works for MsgWithdrawValidatorCommission", async () => {
# +            const msg = {
# +                validatorAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +            };
# +            const aminoTypes = new aminotypes_1.AminoTypes((0, aminomessages_1.createDistributionAminoConverters)());
# +            const aminoMsg = aminoTypes.toAmino({
# +                typeUrl: "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "cosmos-sdk/MsgWithdrawValidatorCommission",
# +                value: {
# +                    validator_address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +    });
# +    describe("fromAmino", () => {
# +        // TODO: MsgFundCommunityPool
# +        // TODO: MsgSetWithdrawAddress
# +        // TODO: MsgWithdrawDelegatorReward
# +        // TODO: MsgWithdrawValidatorCommission
# +    });
# +});
# +//# sourceMappingURL=aminomessages.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/distribution/aminomessages.spec.js.map b/node_modules/@cosmjs/stargate/build/modules/distribution/aminomessages.spec.js.map
# new file mode 100644
# index 0000000..1d722c3
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/distribution/aminomessages.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"aminomessages.spec.js","sourceRoot":"","sources":["../../../src/modules/distribution/aminomessages.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/distribution/queries.spec.d.ts b/node_modules/@cosmjs/stargate/build/modules/distribution/queries.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/distribution/queries.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/modules/distribution/queries.spec.js b/node_modules/@cosmjs/stargate/build/modules/distribution/queries.spec.js
# new file mode 100644
# index 0000000..4e89dda
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/distribution/queries.spec.js
# @@ -0,0 +1,131 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +/* eslint-disable @typescript-eslint/naming-convention */
# +const proto_signing_1 = require("@cosmjs/proto-signing");
# +const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
# +const utils_1 = require("@cosmjs/utils");
# +const queryclient_1 = require("../../queryclient");
# +const signingstargateclient_1 = require("../../signingstargateclient");
# +const stargateclient_1 = require("../../stargateclient");
# +const testutils_spec_1 = require("../../testutils.spec");
# +const queries_1 = require("./queries");
# +async function makeClientWithDistribution(rpcUrl) {
# +    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(rpcUrl);
# +    return [queryclient_1.QueryClient.withExtensions(tmClient, queries_1.setupDistributionExtension), tmClient];
# +}
# +describe("DistributionExtension", () => {
# +    const defaultFee = {
# +        amount: (0, proto_signing_1.coins)(25000, "ucosm"),
# +        gas: "1500000", // 1.5 million
# +    };
# +    beforeAll(async () => {
# +        if ((0, testutils_spec_1.simappEnabled)()) {
# +            const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +            const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +            const msg = {
# +                delegatorAddress: testutils_spec_1.faucet.address0,
# +                validatorAddress: testutils_spec_1.validator.validatorAddress,
# +                amount: (0, proto_signing_1.coin)(25000, "ustake"),
# +            };
# +            const msgAny = {
# +                typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                value: msg,
# +            };
# +            const memo = "Test delegation for Stargate";
# +            const result = await client.signAndBroadcast(testutils_spec_1.faucet.address0, [msgAny], defaultFee, memo);
# +            (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +            await (0, utils_1.sleep)(75); // wait until transactions are indexed
# +        }
# +    });
# +    describe("communityPool", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithDistribution(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.distribution.communityPool();
# +            expect(response.pool).toBeDefined();
# +            expect(response.pool).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("delegationRewards", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithDistribution(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.distribution.delegationRewards(testutils_spec_1.faucet.address0, testutils_spec_1.validator.validatorAddress);
# +            expect(response.rewards).toBeDefined();
# +            expect(response.rewards).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("delegationTotalRewards", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithDistribution(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.distribution.delegationTotalRewards(testutils_spec_1.faucet.address0);
# +            expect(response.rewards).toBeDefined();
# +            expect(response.rewards).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("delegatorValidators", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithDistribution(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.distribution.delegatorValidators(testutils_spec_1.faucet.address0);
# +            expect(response.validators).toBeDefined();
# +            expect(response.validators).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("delegatorWithdrawAddress", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithDistribution(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.distribution.delegatorWithdrawAddress(testutils_spec_1.faucet.address0);
# +            expect(response.withdrawAddress).toBeDefined();
# +            expect(response.withdrawAddress).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("params", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithDistribution(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.distribution.params();
# +            expect(response.params).toBeDefined();
# +            expect(response.params).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("validatorCommission", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithDistribution(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.distribution.validatorCommission(testutils_spec_1.validator.validatorAddress);
# +            expect(response.commission).toBeDefined();
# +            expect(response.commission).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("validatorOutstandingRewards", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithDistribution(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.distribution.validatorOutstandingRewards(testutils_spec_1.validator.validatorAddress);
# +            expect(response.rewards).toBeDefined();
# +            expect(response.rewards).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("validatorSlashes", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithDistribution(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.distribution.validatorSlashes(testutils_spec_1.validator.validatorAddress, 1, 5);
# +            expect(response.slashes).toBeDefined();
# +            expect(response.slashes).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +});
# +//# sourceMappingURL=queries.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/distribution/queries.spec.js.map b/node_modules/@cosmjs/stargate/build/modules/distribution/queries.spec.js.map
# new file mode 100644
# index 0000000..0313e3b
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/distribution/queries.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"queries.spec.js","sourceRoot":"","sources":["../../../src/modules/distribution/queries.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/feegrant/aminomessages.d.ts b/node_modules/@cosmjs/stargate/build/modules/feegrant/aminomessages.d.ts
# index 577ae95..1395e2e 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/feegrant/aminomessages.d.ts
# +++ b/node_modules/@cosmjs/stargate/build/modules/feegrant/aminomessages.d.ts
# @@ -1,2 +1,2 @@
#  import { AminoConverters } from "../../aminotypes";
# -export declare function createFeegrantAminoConverters(): AminoConverters;
# +export declare function createFreegrantAminoConverters(): AminoConverters;
# diff --git a/node_modules/@cosmjs/stargate/build/modules/feegrant/aminomessages.js b/node_modules/@cosmjs/stargate/build/modules/feegrant/aminomessages.js
# index 08eb51f..b8c5067 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/feegrant/aminomessages.js
# +++ b/node_modules/@cosmjs/stargate/build/modules/feegrant/aminomessages.js
# @@ -1,11 +1,11 @@
#  "use strict";
#  Object.defineProperty(exports, "__esModule", { value: true });
# -exports.createFeegrantAminoConverters = void 0;
# -function createFeegrantAminoConverters() {
# +exports.createFreegrantAminoConverters = void 0;
# +function createFreegrantAminoConverters() {
#      return {
#          "/cosmos.feegrant.v1beta1.MsgGrantAllowance": "not_supported_by_chain",
#          "/cosmos.feegrant.v1beta1.MsgRevokeAllowance": "not_supported_by_chain",
#      };
#  }
# -exports.createFeegrantAminoConverters = createFeegrantAminoConverters;
# +exports.createFreegrantAminoConverters = createFreegrantAminoConverters;
#  //# sourceMappingURL=aminomessages.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/feegrant/aminomessages.js.map b/node_modules/@cosmjs/stargate/build/modules/feegrant/aminomessages.js.map
# index f57bceb..d8e5573 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/feegrant/aminomessages.js.map
# +++ b/node_modules/@cosmjs/stargate/build/modules/feegrant/aminomessages.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"aminomessages.js","sourceRoot":"","sources":["../../../src/modules/feegrant/aminomessages.ts"],"names":[],"mappings":";;;AAEA,SAAgB,6BAA6B;IAC3C,OAAO;QACL,4CAA4C,EAAE,wBAAwB;QACtE,6CAA6C,EAAE,wBAAwB;KACxE,CAAC;AACJ,CAAC;AALD,sEAKC"}
# \ No newline at end of file
# +{"version":3,"file":"aminomessages.js","sourceRoot":"","sources":["../../../src/modules/feegrant/aminomessages.ts"],"names":[],"mappings":";;;AAEA,SAAgB,8BAA8B;IAC5C,OAAO;QACL,4CAA4C,EAAE,wBAAwB;QACtE,6CAA6C,EAAE,wBAAwB;KACxE,CAAC;AACJ,CAAC;AALD,wEAKC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/feegrant/queries.d.ts b/node_modules/@cosmjs/stargate/build/modules/feegrant/queries.d.ts
# deleted file mode 100644
# index feb2994..0000000
# --- a/node_modules/@cosmjs/stargate/build/modules/feegrant/queries.d.ts
# +++ /dev/null
# @@ -1,9 +0,0 @@
# -import { QueryAllowanceResponse, QueryAllowancesResponse } from "cosmjs-types/cosmos/feegrant/v1beta1/query";
# -import { QueryClient } from "../../queryclient";
# -export interface FeegrantExtension {
# -    readonly feegrant: {
# -        readonly allowance: (granter: string, grantee: string) => Promise<QueryAllowanceResponse>;
# -        readonly allowances: (grantee: string, paginationKey?: Uint8Array) => Promise<QueryAllowancesResponse>;
# -    };
# -}
# -export declare function setupFeegrantExtension(base: QueryClient): FeegrantExtension;
# diff --git a/node_modules/@cosmjs/stargate/build/modules/feegrant/queries.js b/node_modules/@cosmjs/stargate/build/modules/feegrant/queries.js
# deleted file mode 100644
# index a666448..0000000
# --- a/node_modules/@cosmjs/stargate/build/modules/feegrant/queries.js
# +++ /dev/null
# @@ -1,31 +0,0 @@
# -"use strict";
# -Object.defineProperty(exports, "__esModule", { value: true });
# -exports.setupFeegrantExtension = void 0;
# -const query_1 = require("cosmjs-types/cosmos/feegrant/v1beta1/query");
# -const queryclient_1 = require("../../queryclient");
# -function setupFeegrantExtension(base) {
# -    // Use this service to get easy typed access to query methods
# -    // This cannot be used for proof verification
# -    const rpc = (0, queryclient_1.createProtobufRpcClient)(base);
# -    const queryService = new query_1.QueryClientImpl(rpc);
# -    return {
# -        feegrant: {
# -            allowance: async (granter, grantee) => {
# -                const response = await queryService.Allowance({
# -                    granter: granter,
# -                    grantee: grantee,
# -                });
# -                return response;
# -            },
# -            allowances: async (grantee, paginationKey) => {
# -                const response = await queryService.Allowances({
# -                    grantee: grantee,
# -                    pagination: (0, queryclient_1.createPagination)(paginationKey),
# -                });
# -                return response;
# -            },
# -        },
# -    };
# -}
# -exports.setupFeegrantExtension = setupFeegrantExtension;
# -//# sourceMappingURL=queries.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/feegrant/queries.js.map b/node_modules/@cosmjs/stargate/build/modules/feegrant/queries.js.map
# deleted file mode 100644
# index e0aac03..0000000
# --- a/node_modules/@cosmjs/stargate/build/modules/feegrant/queries.js.map
# +++ /dev/null
# @@ -1 +0,0 @@
# -{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../src/modules/feegrant/queries.ts"],"names":[],"mappings":";;;AAAA,sEAIoD;AAEpD,mDAA2F;AAS3F,SAAgB,sBAAsB,CAAC,IAAiB;IACtD,6DAA6D;IAC7D,6CAA6C;IAC7C,MAAM,GAAG,GAAG,IAAA,qCAAuB,EAAC,IAAI,CAAC,CAAC;IAC1C,MAAM,YAAY,GAAG,IAAI,uBAAe,CAAC,GAAG,CAAC,CAAC;IAE9C,OAAO;QACL,QAAQ,EAAE;YACR,SAAS,EAAE,KAAK,EAAE,OAAe,EAAE,OAAe,EAAE,EAAE;gBACpD,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,SAAS,CAAC;oBAC5C,OAAO,EAAE,OAAO;oBAChB,OAAO,EAAE,OAAO;iBACjB,CAAC,CAAC;gBACH,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,UAAU,EAAE,KAAK,EAAE,OAAe,EAAE,aAA0B,EAAE,EAAE;gBAChE,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,UAAU,CAAC;oBAC7C,OAAO,EAAE,OAAO;oBAChB,UAAU,EAAE,IAAA,8BAAgB,EAAC,aAAa,CAAC;iBAC5C,CAAC,CAAC;gBACH,OAAO,QAAQ,CAAC;YAClB,CAAC;SACF;KACF,CAAC;AACJ,CAAC;AAxBD,wDAwBC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.d.ts b/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.d.ts
# index 285b688..b6f9ada 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.d.ts
# +++ b/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.d.ts
# @@ -43,28 +43,6 @@ export interface AminoMsgVote extends AminoMsg {
#      };
#  }
#  export declare function isAminoMsgVote(msg: AminoMsg): msg is AminoMsgVote;
# -/**
# - * @see https://github.com/cosmos/cosmos-sdk/blob/v0.44.5/x/gov/types/tx.pb.go#L196-L203
# - * @see https://github.com/cosmos/cosmos-sdk/blob/v0.44.5/x/gov/types/gov.pb.go#L124-L130
# - */
# -export interface AminoMsgVoteWeighted extends AminoMsg {
# -    readonly type: "cosmos-sdk/MsgVoteWeighted";
# -    readonly value: {
# -        readonly proposal_id: string;
# -        /** Bech32 account address */
# -        readonly voter: string;
# -        readonly options: Array<{
# -            /**
# -             * VoteOption as integer from 0 to 4 🤷‍
# -             *
# -             * @see https://github.com/cosmos/cosmos-sdk/blob/v0.44.5/x/gov/types/gov.pb.go#L35-L49
# -             */
# -            readonly option: number;
# -            readonly weight: string;
# -        }>;
# -    };
# -}
# -export declare function isAminoMsgVoteWeighted(msg: AminoMsg): msg is AminoMsgVoteWeighted;
#  /** Submits a deposit to an existing proposal */
#  export interface AminoMsgDeposit extends AminoMsg {
#      readonly type: "cosmos-sdk/MsgDeposit";
# diff --git a/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.js b/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.js
# index ebf6e3b..a3b3729 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.js
# +++ b/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.js
# @@ -3,13 +3,11 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
#      return (mod && mod.__esModule) ? mod : { "default": mod };
#  };
#  Object.defineProperty(exports, "__esModule", { value: true });
# -exports.createGovAminoConverters = exports.isAminoMsgDeposit = exports.isAminoMsgVoteWeighted = exports.isAminoMsgVote = exports.isAminoMsgSubmitProposal = void 0;
# -const math_1 = require("@cosmjs/math");
# +exports.createGovAminoConverters = exports.isAminoMsgDeposit = exports.isAminoMsgVote = exports.isAminoMsgSubmitProposal = void 0;
#  const utils_1 = require("@cosmjs/utils");
#  const gov_1 = require("cosmjs-types/cosmos/gov/v1beta1/gov");
#  const any_1 = require("cosmjs-types/google/protobuf/any");
#  const long_1 = __importDefault(require("long"));
# -const queryclient_1 = require("../../queryclient");
#  function isAminoMsgSubmitProposal(msg) {
#      return msg.type === "cosmos-sdk/MsgSubmitProposal";
#  }
# @@ -18,10 +16,6 @@ function isAminoMsgVote(msg) {
#      return msg.type === "cosmos-sdk/MsgVote";
#  }
#  exports.isAminoMsgVote = isAminoMsgVote;
# -function isAminoMsgVoteWeighted(msg) {
# -    return msg.type === "cosmos-sdk/MsgVoteWeighted";
# -}
# -exports.isAminoMsgVoteWeighted = isAminoMsgVoteWeighted;
#  function isAminoMsgDeposit(msg) {
#      return msg.type === "cosmos-sdk/MsgDeposit";
#  }
# @@ -62,31 +56,6 @@ function createGovAminoConverters() {
#                  };
#              },
#          },
# -        "/cosmos.gov.v1beta1.MsgVoteWeighted": {
# -            aminoType: "cosmos-sdk/MsgVoteWeighted",
# -            toAmino: ({ options, proposalId, voter }) => {
# -                return {
# -                    options: options.map((o) => ({
# -                        option: o.option,
# -                        // Weight is between 0 and 1, so we always have 20 characters when printing all trailing
# -                        // zeros (e.g. "0.700000000000000000" or "1.000000000000000000")
# -                        weight: (0, queryclient_1.decodeCosmosSdkDecFromProto)(o.weight).toString().padEnd(20, "0"),
# -                    })),
# -                    proposal_id: proposalId.toString(),
# -                    voter: voter,
# -                };
# -            },
# -            fromAmino: ({ options, proposal_id, voter }) => {
# -                return {
# -                    proposalId: long_1.default.fromString(proposal_id),
# -                    voter: voter,
# -                    options: options.map((o) => ({
# -                        option: (0, gov_1.voteOptionFromJSON)(o.option),
# -                        weight: math_1.Decimal.fromUserInput(o.weight, 18).atomics,
# -                    })),
# -                };
# -            },
# -        },
#          "/cosmos.gov.v1beta1.MsgSubmitProposal": {
#              aminoType: "cosmos-sdk/MsgSubmitProposal",
#              toAmino: ({ initialDeposit, proposer, content, }) => {
# diff --git a/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.js.map b/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.js.map
# index 5ce7737..bf8584b 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.js.map
# +++ b/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"aminomessages.js","sourceRoot":"","sources":["../../../src/modules/gov/aminomessages.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# +{"version":3,"file":"aminomessages.js","sourceRoot":"","sources":["../../../src/modules/gov/aminomessages.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.spec.d.ts b/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.spec.js b/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.spec.js
# new file mode 100644
# index 0000000..4f6b7d3
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.spec.js
# @@ -0,0 +1,164 @@
# +"use strict";
# +var __importDefault = (this && this.__importDefault) || function (mod) {
# +    return (mod && mod.__esModule) ? mod : { "default": mod };
# +};
# +Object.defineProperty(exports, "__esModule", { value: true });
# +/* eslint-disable @typescript-eslint/naming-convention */
# +const gov_1 = require("cosmjs-types/cosmos/gov/v1beta1/gov");
# +const long_1 = __importDefault(require("long"));
# +const aminotypes_1 = require("../../aminotypes");
# +const aminomessages_1 = require("./aminomessages");
# +describe("AminoTypes", () => {
# +    describe("toAmino", () => {
# +        it("works for MsgDeposit", () => {
# +            const msg = {
# +                amount: [{ amount: "12300000", denom: "ustake" }],
# +                depositor: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                proposalId: long_1.default.fromNumber(5),
# +            };
# +            const aminoTypes = new aminotypes_1.AminoTypes((0, aminomessages_1.createGovAminoConverters)());
# +            const aminoMsg = aminoTypes.toAmino({
# +                typeUrl: "/cosmos.gov.v1beta1.MsgDeposit",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "cosmos-sdk/MsgDeposit",
# +                value: {
# +                    amount: [{ amount: "12300000", denom: "ustake" }],
# +                    depositor: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    proposal_id: "5",
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +        it("works for MsgSubmitProposal", () => {
# +            const msg = {
# +                initialDeposit: [{ amount: "12300000", denom: "ustake" }],
# +                proposer: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                content: {
# +                    typeUrl: "/cosmos.gov.v1beta1.TextProposal",
# +                    value: gov_1.TextProposal.encode({
# +                        description: "This proposal proposes to test whether this proposal passes",
# +                        title: "Test Proposal",
# +                    }).finish(),
# +                },
# +            };
# +            const aminoTypes = new aminotypes_1.AminoTypes((0, aminomessages_1.createGovAminoConverters)());
# +            const aminoMsg = aminoTypes.toAmino({
# +                typeUrl: "/cosmos.gov.v1beta1.MsgSubmitProposal",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "cosmos-sdk/MsgSubmitProposal",
# +                value: {
# +                    initial_deposit: [{ amount: "12300000", denom: "ustake" }],
# +                    proposer: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    content: {
# +                        type: "cosmos-sdk/TextProposal",
# +                        value: {
# +                            description: "This proposal proposes to test whether this proposal passes",
# +                            title: "Test Proposal",
# +                        },
# +                    },
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +        it("works for MsgVote", () => {
# +            const msg = {
# +                option: gov_1.VoteOption.VOTE_OPTION_NO_WITH_VETO,
# +                proposalId: long_1.default.fromNumber(5),
# +                voter: "cosmos1xy4yqngt0nlkdcenxymg8tenrghmek4nmqm28k",
# +            };
# +            const aminoTypes = new aminotypes_1.AminoTypes((0, aminomessages_1.createGovAminoConverters)());
# +            const aminoMsg = aminoTypes.toAmino({
# +                typeUrl: "/cosmos.gov.v1beta1.MsgVote",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "cosmos-sdk/MsgVote",
# +                value: {
# +                    option: 4,
# +                    proposal_id: "5",
# +                    voter: "cosmos1xy4yqngt0nlkdcenxymg8tenrghmek4nmqm28k",
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +    });
# +    describe("fromAmino", () => {
# +        it("works for MsgDeposit", () => {
# +            const aminoMsg = {
# +                type: "cosmos-sdk/MsgDeposit",
# +                value: {
# +                    amount: [{ amount: "12300000", denom: "ustake" }],
# +                    depositor: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    proposal_id: "5",
# +                },
# +            };
# +            const msg = new aminotypes_1.AminoTypes((0, aminomessages_1.createGovAminoConverters)()).fromAmino(aminoMsg);
# +            const expectedValue = {
# +                amount: [{ amount: "12300000", denom: "ustake" }],
# +                depositor: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                proposalId: long_1.default.fromNumber(5),
# +            };
# +            expect(msg).toEqual({
# +                typeUrl: "/cosmos.gov.v1beta1.MsgDeposit",
# +                value: expectedValue,
# +            });
# +        });
# +        it("works for MsgSubmitProposal", () => {
# +            const aminoMsg = {
# +                type: "cosmos-sdk/MsgSubmitProposal",
# +                value: {
# +                    initial_deposit: [{ amount: "12300000", denom: "ustake" }],
# +                    proposer: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    content: {
# +                        type: "cosmos-sdk/TextProposal",
# +                        value: {
# +                            description: "This proposal proposes to test whether this proposal passes",
# +                            title: "Test Proposal",
# +                        },
# +                    },
# +                },
# +            };
# +            const msg = new aminotypes_1.AminoTypes((0, aminomessages_1.createGovAminoConverters)()).fromAmino(aminoMsg);
# +            const expectedValue = {
# +                initialDeposit: [{ amount: "12300000", denom: "ustake" }],
# +                proposer: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                content: {
# +                    typeUrl: "/cosmos.gov.v1beta1.TextProposal",
# +                    value: gov_1.TextProposal.encode({
# +                        description: "This proposal proposes to test whether this proposal passes",
# +                        title: "Test Proposal",
# +                    }).finish(),
# +                },
# +            };
# +            expect(msg).toEqual({
# +                typeUrl: "/cosmos.gov.v1beta1.MsgSubmitProposal",
# +                value: expectedValue,
# +            });
# +        });
# +        it("works for MsgVote", () => {
# +            const aminoMsg = {
# +                type: "cosmos-sdk/MsgVote",
# +                value: {
# +                    option: 4,
# +                    proposal_id: "5",
# +                    voter: "cosmos1xy4yqngt0nlkdcenxymg8tenrghmek4nmqm28k",
# +                },
# +            };
# +            const msg = new aminotypes_1.AminoTypes((0, aminomessages_1.createGovAminoConverters)()).fromAmino(aminoMsg);
# +            const expectedValue = {
# +                option: gov_1.VoteOption.VOTE_OPTION_NO_WITH_VETO,
# +                proposalId: long_1.default.fromNumber(5),
# +                voter: "cosmos1xy4yqngt0nlkdcenxymg8tenrghmek4nmqm28k",
# +            };
# +            expect(msg).toEqual({
# +                typeUrl: "/cosmos.gov.v1beta1.MsgVote",
# +                value: expectedValue,
# +            });
# +        });
# +    });
# +});
# +//# sourceMappingURL=aminomessages.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.spec.js.map b/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.spec.js.map
# new file mode 100644
# index 0000000..a6cf81e
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"aminomessages.spec.js","sourceRoot":"","sources":["../../../src/modules/gov/aminomessages.spec.ts"],"names":[],"mappings":";;;;;AAAA,yDAAyD;AACzD,6DAA+E;AAE/E,gDAAwB;AAExB,iDAA8C;AAC9C,mDAKyB;AAEzB,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,sBAAsB,EAAE,GAAG,EAAE;YAC9B,MAAM,GAAG,GAAe;gBACtB,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;gBACjD,SAAS,EAAE,+CAA+C;gBAC1D,UAAU,EAAE,cAAI,CAAC,UAAU,CAAC,CAAC,CAAC;aAC/B,CAAC;YACF,MAAM,UAAU,GAAG,IAAI,uBAAU,CAAC,IAAA,wCAAwB,GAAE,CAAC,CAAC;YAC9D,MAAM,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC;gBAClC,OAAO,EAAE,gCAAgC;gBACzC,KAAK,EAAE,GAAG;aACX,CAAC,CAAC;YACH,MAAM,QAAQ,GAAoB;gBAChC,IAAI,EAAE,uBAAuB;gBAC7B,KAAK,EAAE;oBACL,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;oBACjD,SAAS,EAAE,+CAA+C;oBAC1D,WAAW,EAAE,GAAG;iBACjB;aACF,CAAC;YACF,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,MAAM,GAAG,GAAsB;gBAC7B,cAAc,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;gBACzD,QAAQ,EAAE,+CAA+C;gBACzD,OAAO,EAAE;oBACP,OAAO,EAAE,kCAAkC;oBAC3C,KAAK,EAAE,kBAAY,CAAC,MAAM,CAAC;wBACzB,WAAW,EAAE,6DAA6D;wBAC1E,KAAK,EAAE,eAAe;qBACvB,CAAC,CAAC,MAAM,EAAE;iBACZ;aACF,CAAC;YACF,MAAM,UAAU,GAAG,IAAI,uBAAU,CAAC,IAAA,wCAAwB,GAAE,CAAC,CAAC;YAC9D,MAAM,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC;gBAClC,OAAO,EAAE,uCAAuC;gBAChD,KAAK,EAAE,GAAG;aACX,CAAC,CAAC;YACH,MAAM,QAAQ,GAA2B;gBACvC,IAAI,EAAE,8BAA8B;gBACpC,KAAK,EAAE;oBACL,eAAe,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;oBAC1D,QAAQ,EAAE,+CAA+C;oBACzD,OAAO,EAAE;wBACP,IAAI,EAAE,yBAAyB;wBAC/B,KAAK,EAAE;4BACL,WAAW,EAAE,6DAA6D;4BAC1E,KAAK,EAAE,eAAe;yBACvB;qBACF;iBACF;aACF,CAAC;YACF,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;YAC3B,MAAM,GAAG,GAAY;gBACnB,MAAM,EAAE,gBAAU,CAAC,wBAAwB;gBAC3C,UAAU,EAAE,cAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC9B,KAAK,EAAE,+CAA+C;aACvD,CAAC;YACF,MAAM,UAAU,GAAG,IAAI,uBAAU,CAAC,IAAA,wCAAwB,GAAE,CAAC,CAAC;YAC9D,MAAM,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC;gBAClC,OAAO,EAAE,6BAA6B;gBACtC,KAAK,EAAE,GAAG;aACX,CAAC,CAAC;YACH,MAAM,QAAQ,GAAiB;gBAC7B,IAAI,EAAE,oBAAoB;gBAC1B,KAAK,EAAE;oBACL,MAAM,EAAE,CAAC;oBACT,WAAW,EAAE,GAAG;oBAChB,KAAK,EAAE,+CAA+C;iBACvD;aACF,CAAC;YACF,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,EAAE,CAAC,sBAAsB,EAAE,GAAG,EAAE;YAC9B,MAAM,QAAQ,GAAoB;gBAChC,IAAI,EAAE,uBAAuB;gBAC7B,KAAK,EAAE;oBACL,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;oBACjD,SAAS,EAAE,+CAA+C;oBAC1D,WAAW,EAAE,GAAG;iBACjB;aACF,CAAC;YACF,MAAM,GAAG,GAAG,IAAI,uBAAU,CAAC,IAAA,wCAAwB,GAAE,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC3E,MAAM,aAAa,GAAe;gBAChC,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;gBACjD,SAAS,EAAE,+CAA+C;gBAC1D,UAAU,EAAE,cAAI,CAAC,UAAU,CAAC,CAAC,CAAC;aAC/B,CAAC;YACF,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC;gBAClB,OAAO,EAAE,gCAAgC;gBACzC,KAAK,EAAE,aAAa;aACrB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,MAAM,QAAQ,GAA2B;gBACvC,IAAI,EAAE,8BAA8B;gBACpC,KAAK,EAAE;oBACL,eAAe,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;oBAC1D,QAAQ,EAAE,+CAA+C;oBACzD,OAAO,EAAE;wBACP,IAAI,EAAE,yBAAyB;wBAC/B,KAAK,EAAE;4BACL,WAAW,EAAE,6DAA6D;4BAC1E,KAAK,EAAE,eAAe;yBACvB;qBACF;iBACF;aACF,CAAC;YACF,MAAM,GAAG,GAAG,IAAI,uBAAU,CAAC,IAAA,wCAAwB,GAAE,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC3E,MAAM,aAAa,GAAsB;gBACvC,cAAc,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;gBACzD,QAAQ,EAAE,+CAA+C;gBACzD,OAAO,EAAE;oBACP,OAAO,EAAE,kCAAkC;oBAC3C,KAAK,EAAE,kBAAY,CAAC,MAAM,CAAC;wBACzB,WAAW,EAAE,6DAA6D;wBAC1E,KAAK,EAAE,eAAe;qBACvB,CAAC,CAAC,MAAM,EAAE;iBACZ;aACF,CAAC;YACF,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC;gBAClB,OAAO,EAAE,uCAAuC;gBAChD,KAAK,EAAE,aAAa;aACrB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;YAC3B,MAAM,QAAQ,GAAiB;gBAC7B,IAAI,EAAE,oBAAoB;gBAC1B,KAAK,EAAE;oBACL,MAAM,EAAE,CAAC;oBACT,WAAW,EAAE,GAAG;oBAChB,KAAK,EAAE,+CAA+C;iBACvD;aACF,CAAC;YACF,MAAM,GAAG,GAAG,IAAI,uBAAU,CAAC,IAAA,wCAAwB,GAAE,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC3E,MAAM,aAAa,GAAY;gBAC7B,MAAM,EAAE,gBAAU,CAAC,wBAAwB;gBAC3C,UAAU,EAAE,cAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC9B,KAAK,EAAE,+CAA+C;aACvD,CAAC;YACF,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC;gBAClB,OAAO,EAAE,6BAA6B;gBACtC,KAAK,EAAE,aAAa;aACrB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/gov/messages.d.ts b/node_modules/@cosmjs/stargate/build/modules/gov/messages.d.ts
# index 1df985d..642de6b 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/gov/messages.d.ts
# +++ b/node_modules/@cosmjs/stargate/build/modules/gov/messages.d.ts
# @@ -1,5 +1,5 @@
#  import { EncodeObject, GeneratedType } from "@cosmjs/proto-signing";
# -import { MsgDeposit, MsgSubmitProposal, MsgVote, MsgVoteWeighted } from "cosmjs-types/cosmos/gov/v1beta1/tx";
# +import { MsgDeposit, MsgSubmitProposal, MsgVote } from "cosmjs-types/cosmos/gov/v1beta1/tx";
#  export declare const govTypes: ReadonlyArray<[string, GeneratedType]>;
#  export interface MsgDepositEncodeObject extends EncodeObject {
#      readonly typeUrl: "/cosmos.gov.v1beta1.MsgDeposit";
# @@ -16,8 +16,3 @@ export interface MsgVoteEncodeObject extends EncodeObject {
#      readonly value: Partial<MsgVote>;
#  }
#  export declare function isMsgVoteEncodeObject(object: EncodeObject): object is MsgVoteEncodeObject;
# -export interface MsgVoteWeightedEncodeObject extends EncodeObject {
# -    readonly typeUrl: "/cosmos.gov.v1beta1.MsgVoteWeighted";
# -    readonly value: Partial<MsgVoteWeighted>;
# -}
# -export declare function isMsgVoteWeightedEncodeObject(object: EncodeObject): object is MsgVoteWeightedEncodeObject;
# diff --git a/node_modules/@cosmjs/stargate/build/modules/gov/messages.js b/node_modules/@cosmjs/stargate/build/modules/gov/messages.js
# index b16f50a..629282a 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/gov/messages.js
# +++ b/node_modules/@cosmjs/stargate/build/modules/gov/messages.js
# @@ -1,12 +1,11 @@
#  "use strict";
#  Object.defineProperty(exports, "__esModule", { value: true });
# -exports.isMsgVoteWeightedEncodeObject = exports.isMsgVoteEncodeObject = exports.isMsgSubmitProposalEncodeObject = exports.isMsgDepositEncodeObject = exports.govTypes = void 0;
# +exports.isMsgVoteEncodeObject = exports.isMsgSubmitProposalEncodeObject = exports.isMsgDepositEncodeObject = exports.govTypes = void 0;
#  const tx_1 = require("cosmjs-types/cosmos/gov/v1beta1/tx");
#  exports.govTypes = [
#      ["/cosmos.gov.v1beta1.MsgDeposit", tx_1.MsgDeposit],
#      ["/cosmos.gov.v1beta1.MsgSubmitProposal", tx_1.MsgSubmitProposal],
#      ["/cosmos.gov.v1beta1.MsgVote", tx_1.MsgVote],
# -    ["/cosmos.gov.v1beta1.MsgVoteWeighted", tx_1.MsgVoteWeighted],
#  ];
#  function isMsgDepositEncodeObject(object) {
#      return object.typeUrl === "/cosmos.gov.v1beta1.MsgDeposit";
# @@ -20,8 +19,4 @@ function isMsgVoteEncodeObject(object) {
#      return object.typeUrl === "/cosmos.gov.v1beta1.MsgVote";
#  }
#  exports.isMsgVoteEncodeObject = isMsgVoteEncodeObject;
# -function isMsgVoteWeightedEncodeObject(object) {
# -    return object.typeUrl === "/cosmos.gov.v1beta1.MsgVoteWeighted";
# -}
# -exports.isMsgVoteWeightedEncodeObject = isMsgVoteWeightedEncodeObject;
#  //# sourceMappingURL=messages.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/gov/messages.js.map b/node_modules/@cosmjs/stargate/build/modules/gov/messages.js.map
# index 199fc1c..a058a67 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/gov/messages.js.map
# +++ b/node_modules/@cosmjs/stargate/build/modules/gov/messages.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"messages.js","sourceRoot":"","sources":["../../../src/modules/gov/messages.ts"],"names":[],"mappings":";;;AACA,2DAA6G;AAEhG,QAAA,QAAQ,GAA2C;IAC9D,CAAC,gCAAgC,EAAE,eAAU,CAAC;IAC9C,CAAC,uCAAuC,EAAE,sBAAiB,CAAC;IAC5D,CAAC,6BAA6B,EAAE,YAAO,CAAC;IACxC,CAAC,qCAAqC,EAAE,oBAAe,CAAC;CACzD,CAAC;AAOF,SAAgB,wBAAwB,CAAC,MAAoB;IAC3D,OAAQ,MAAiC,CAAC,OAAO,KAAK,gCAAgC,CAAC;AACzF,CAAC;AAFD,4DAEC;AAOD,SAAgB,+BAA+B,CAC7C,MAAoB;IAEpB,OAAQ,MAAwC,CAAC,OAAO,KAAK,uCAAuC,CAAC;AACvG,CAAC;AAJD,0EAIC;AAOD,SAAgB,qBAAqB,CAAC,MAAoB;IACxD,OAAQ,MAA8B,CAAC,OAAO,KAAK,6BAA6B,CAAC;AACnF,CAAC;AAFD,sDAEC;AAOD,SAAgB,6BAA6B,CAAC,MAAoB;IAChE,OAAQ,MAAsC,CAAC,OAAO,KAAK,qCAAqC,CAAC;AACnG,CAAC;AAFD,sEAEC"}
# \ No newline at end of file
# +{"version":3,"file":"messages.js","sourceRoot":"","sources":["../../../src/modules/gov/messages.ts"],"names":[],"mappings":";;;AACA,2DAA4F;AAE/E,QAAA,QAAQ,GAA2C;IAC9D,CAAC,gCAAgC,EAAE,eAAU,CAAC;IAC9C,CAAC,uCAAuC,EAAE,sBAAiB,CAAC;IAC5D,CAAC,6BAA6B,EAAE,YAAO,CAAC;CACzC,CAAC;AAOF,SAAgB,wBAAwB,CAAC,MAAoB;IAC3D,OAAQ,MAAiC,CAAC,OAAO,KAAK,gCAAgC,CAAC;AACzF,CAAC;AAFD,4DAEC;AAOD,SAAgB,+BAA+B,CAC7C,MAAoB;IAEpB,OAAQ,MAAwC,CAAC,OAAO,KAAK,uCAAuC,CAAC;AACvG,CAAC;AAJD,0EAIC;AAOD,SAAgB,qBAAqB,CAAC,MAAoB;IACxD,OAAQ,MAA8B,CAAC,OAAO,KAAK,6BAA6B,CAAC;AACnF,CAAC;AAFD,sDAEC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/gov/queries.spec.d.ts b/node_modules/@cosmjs/stargate/build/modules/gov/queries.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/gov/queries.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/modules/gov/queries.spec.js b/node_modules/@cosmjs/stargate/build/modules/gov/queries.spec.js
# new file mode 100644
# index 0000000..33df9f0
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/gov/queries.spec.js
# @@ -0,0 +1,339 @@
# +"use strict";
# +var __importDefault = (this && this.__importDefault) || function (mod) {
# +    return (mod && mod.__esModule) ? mod : { "default": mod };
# +};
# +Object.defineProperty(exports, "__esModule", { value: true });
# +const amino_1 = require("@cosmjs/amino");
# +const encoding_1 = require("@cosmjs/encoding");
# +const proto_signing_1 = require("@cosmjs/proto-signing");
# +const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
# +const utils_1 = require("@cosmjs/utils");
# +const gov_1 = require("cosmjs-types/cosmos/gov/v1beta1/gov");
# +const any_1 = require("cosmjs-types/google/protobuf/any");
# +const long_1 = __importDefault(require("long"));
# +const queryclient_1 = require("../../queryclient");
# +const signingstargateclient_1 = require("../../signingstargateclient");
# +const stargateclient_1 = require("../../stargateclient");
# +const testutils_spec_1 = require("../../testutils.spec");
# +const queries_1 = require("./queries");
# +async function makeClientWithGov(rpcUrl) {
# +    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(rpcUrl);
# +    return [queryclient_1.QueryClient.withExtensions(tmClient, queries_1.setupGovExtension), tmClient];
# +}
# +describe("GovExtension", () => {
# +    const defaultFee = {
# +        amount: (0, amino_1.coins)(25000, "ucosm"),
# +        gas: "1500000", // 1.5 million
# +    };
# +    const textProposal = gov_1.TextProposal.fromPartial({
# +        title: "Test Proposal",
# +        description: "This proposal proposes to test whether this proposal passes",
# +    });
# +    const initialDeposit = (0, amino_1.coins)(12300000, "ustake");
# +    const delegationVoter1 = (0, amino_1.coin)(424242, "ustake");
# +    const delegationVoter2 = (0, amino_1.coin)(777, "ustake");
# +    const voter1Address = testutils_spec_1.faucet.address1;
# +    const voter2Address = testutils_spec_1.faucet.address2;
# +    let proposalId;
# +    beforeAll(async () => {
# +        if ((0, testutils_spec_1.simappEnabled)()) {
# +            const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic, {
# +                // Use address 1 and 2 instead of 0 to avoid conflicts with other delegation tests
# +                // This must match `voterAddress` above.
# +                hdPaths: [(0, amino_1.makeCosmoshubPath)(1), (0, amino_1.makeCosmoshubPath)(2)],
# +            });
# +            const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +            const proposalMsg = {
# +                typeUrl: "/cosmos.gov.v1beta1.MsgSubmitProposal",
# +                value: {
# +                    content: any_1.Any.fromPartial({
# +                        typeUrl: "/cosmos.gov.v1beta1.TextProposal",
# +                        value: Uint8Array.from(gov_1.TextProposal.encode(textProposal).finish()),
# +                    }),
# +                    proposer: voter1Address,
# +                    initialDeposit: initialDeposit,
# +                },
# +            };
# +            const proposalResult = await client.signAndBroadcast(voter1Address, [proposalMsg], defaultFee, "Test proposal for simd");
# +            (0, stargateclient_1.assertIsDeliverTxSuccess)(proposalResult);
# +            const logs = JSON.parse(proposalResult.rawLog || "");
# +            proposalId = logs[0].events
# +                .find(({ type }) => type === "submit_proposal")
# +                .attributes.find(({ key }) => key === "proposal_id").value;
# +            (0, utils_1.assert)(proposalId, "Proposal ID not found in events");
# +            (0, utils_1.assert)(proposalId.match(testutils_spec_1.nonNegativeIntegerMatcher));
# +            // Voter 1
# +            {
# +                // My vote only counts when I delegate
# +                if (!(await client.getDelegation(voter1Address, testutils_spec_1.validator.validatorAddress))) {
# +                    const msgDelegate = {
# +                        typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                        value: {
# +                            delegatorAddress: voter1Address,
# +                            validatorAddress: testutils_spec_1.validator.validatorAddress,
# +                            amount: delegationVoter1,
# +                        },
# +                    };
# +                    const result = await client.signAndBroadcast(voter1Address, [msgDelegate], defaultFee);
# +                    (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +                }
# +                const voteMsg = {
# +                    typeUrl: "/cosmos.gov.v1beta1.MsgVote",
# +                    value: {
# +                        proposalId: (0, queryclient_1.longify)(proposalId),
# +                        voter: voter1Address,
# +                        option: gov_1.VoteOption.VOTE_OPTION_YES,
# +                    },
# +                };
# +                const voteResult = await client.signAndBroadcast(voter1Address, [voteMsg], defaultFee);
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(voteResult);
# +            }
# +            // Voter 2
# +            {
# +                // My vote only counts when I delegate
# +                if (!(await client.getDelegation(voter2Address, testutils_spec_1.validator.validatorAddress))) {
# +                    const msgDelegate = {
# +                        typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                        value: {
# +                            delegatorAddress: voter2Address,
# +                            validatorAddress: testutils_spec_1.validator.validatorAddress,
# +                            amount: delegationVoter2,
# +                        },
# +                    };
# +                    const result = await client.signAndBroadcast(voter2Address, [msgDelegate], defaultFee);
# +                    (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +                }
# +                const voteMsg = {
# +                    typeUrl: "/cosmos.gov.v1beta1.MsgVote",
# +                    value: {
# +                        proposalId: (0, queryclient_1.longify)(proposalId),
# +                        voter: voter2Address,
# +                        option: gov_1.VoteOption.VOTE_OPTION_NO_WITH_VETO,
# +                    },
# +                };
# +                const voteResult = await client.signAndBroadcast(voter2Address, [voteMsg], defaultFee);
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(voteResult);
# +            }
# +            await (0, utils_1.sleep)(75); // wait until transactions are indexed
# +            client.disconnect();
# +        }
# +    });
# +    describe("params", () => {
# +        it("works for deposit", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithGov(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.gov.params("deposit");
# +            expect(response).toEqual(jasmine.objectContaining({
# +                depositParams: {
# +                    minDeposit: testutils_spec_1.simapp.govMinDeposit,
# +                    maxDepositPeriod: {
# +                        seconds: long_1.default.fromNumber(172800, false),
# +                        nanos: 0,
# +                    },
# +                },
# +            }));
# +            tmClient.disconnect();
# +        });
# +        it("works for tallying", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithGov(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.gov.params("tallying");
# +            expect(response).toEqual(jasmine.objectContaining({
# +                tallyParams: {
# +                    // Why the f*** are we getting binary values here?
# +                    quorum: (0, encoding_1.toAscii)("334000000000000000"),
# +                    threshold: (0, encoding_1.toAscii)("500000000000000000"),
# +                    vetoThreshold: (0, encoding_1.toAscii)("334000000000000000"), // 0.334
# +                },
# +            }));
# +            tmClient.disconnect();
# +        });
# +        it("works for voting", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithGov(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.gov.params("voting");
# +            expect(response).toEqual(jasmine.objectContaining({
# +                votingParams: {
# +                    votingPeriod: {
# +                        seconds: long_1.default.fromNumber(172800, false),
# +                        nanos: 0,
# +                    },
# +                },
# +            }));
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("proposals", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assert)(proposalId, "Missing proposal ID");
# +            const [client, tmClient] = await makeClientWithGov(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.gov.proposals(gov_1.ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD, voter1Address, voter1Address);
# +            expect(response.proposals.length).toBeGreaterThanOrEqual(1);
# +            expect(response.proposals[response.proposals.length - 1]).toEqual({
# +                content: any_1.Any.fromPartial({
# +                    typeUrl: "/cosmos.gov.v1beta1.TextProposal",
# +                    value: Uint8Array.from(gov_1.TextProposal.encode(textProposal).finish()),
# +                }),
# +                proposalId: (0, queryclient_1.longify)(proposalId),
# +                status: gov_1.ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD,
# +                finalTallyResult: { yes: "0", abstain: "0", no: "0", noWithVeto: "0" },
# +                submitTime: { seconds: jasmine.any(long_1.default), nanos: jasmine.any(Number) },
# +                depositEndTime: { seconds: jasmine.any(long_1.default), nanos: jasmine.any(Number) },
# +                totalDeposit: initialDeposit,
# +                votingStartTime: { seconds: jasmine.any(long_1.default), nanos: jasmine.any(Number) },
# +                votingEndTime: { seconds: jasmine.any(long_1.default), nanos: jasmine.any(Number) },
# +            });
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("proposal", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assert)(proposalId, "Missing proposal ID");
# +            const [client, tmClient] = await makeClientWithGov(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.gov.proposal(proposalId);
# +            expect(response.proposal).toEqual({
# +                content: any_1.Any.fromPartial({
# +                    typeUrl: "/cosmos.gov.v1beta1.TextProposal",
# +                    value: Uint8Array.from(gov_1.TextProposal.encode(textProposal).finish()),
# +                }),
# +                proposalId: (0, queryclient_1.longify)(proposalId),
# +                status: gov_1.ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD,
# +                finalTallyResult: { yes: "0", abstain: "0", no: "0", noWithVeto: "0" },
# +                submitTime: { seconds: jasmine.any(long_1.default), nanos: jasmine.any(Number) },
# +                depositEndTime: { seconds: jasmine.any(long_1.default), nanos: jasmine.any(Number) },
# +                totalDeposit: initialDeposit,
# +                votingStartTime: { seconds: jasmine.any(long_1.default), nanos: jasmine.any(Number) },
# +                votingEndTime: { seconds: jasmine.any(long_1.default), nanos: jasmine.any(Number) },
# +            });
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("deposits", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assert)(proposalId, "Missing proposal ID");
# +            const [client, tmClient] = await makeClientWithGov(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.gov.deposits(proposalId);
# +            expect(response.deposits).toEqual([
# +                {
# +                    proposalId: (0, queryclient_1.longify)(proposalId),
# +                    depositor: voter1Address,
# +                    amount: initialDeposit,
# +                },
# +            ]);
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("deposit", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assert)(proposalId, "Missing proposal ID");
# +            const [client, tmClient] = await makeClientWithGov(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.gov.deposit(proposalId, voter1Address);
# +            expect(response.deposit).toEqual({
# +                proposalId: (0, queryclient_1.longify)(proposalId),
# +                depositor: voter1Address,
# +                amount: initialDeposit,
# +            });
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("tally", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assert)(proposalId, "Missing proposal ID");
# +            const [client, tmClient] = await makeClientWithGov(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.gov.tally(proposalId);
# +            expect(response.tally).toEqual({
# +                yes: delegationVoter1.amount,
# +                abstain: "0",
# +                no: "0",
# +                noWithVeto: delegationVoter2.amount,
# +            });
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("votes", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assert)(proposalId, "Missing proposal ID");
# +            const [client, tmClient] = await makeClientWithGov(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.gov.votes(proposalId);
# +            if ((0, testutils_spec_1.simapp42Enabled)()) {
# +                expect(response.votes).toEqual([
# +                    // why is vote 2 first?
# +                    gov_1.Vote.fromPartial({
# +                        proposalId: (0, queryclient_1.longify)(proposalId),
# +                        voter: voter2Address,
# +                        option: gov_1.VoteOption.VOTE_OPTION_NO_WITH_VETO,
# +                    }),
# +                    gov_1.Vote.fromPartial({
# +                        proposalId: (0, queryclient_1.longify)(proposalId),
# +                        voter: voter1Address,
# +                        option: gov_1.VoteOption.VOTE_OPTION_YES,
# +                    }),
# +                ]);
# +            }
# +            else {
# +                expect(response.votes).toEqual([
# +                    // why is vote 2 first?
# +                    gov_1.Vote.fromPartial({
# +                        proposalId: (0, queryclient_1.longify)(proposalId),
# +                        voter: voter2Address,
# +                        option: gov_1.VoteOption.VOTE_OPTION_NO_WITH_VETO,
# +                        options: [
# +                            gov_1.WeightedVoteOption.fromPartial({
# +                                option: gov_1.VoteOption.VOTE_OPTION_NO_WITH_VETO,
# +                                weight: "1000000000000000000",
# +                            }),
# +                        ],
# +                    }),
# +                    gov_1.Vote.fromPartial({
# +                        proposalId: (0, queryclient_1.longify)(proposalId),
# +                        voter: voter1Address,
# +                        option: gov_1.VoteOption.VOTE_OPTION_YES,
# +                        options: [
# +                            gov_1.WeightedVoteOption.fromPartial({
# +                                option: gov_1.VoteOption.VOTE_OPTION_YES,
# +                                weight: "1000000000000000000",
# +                            }),
# +                        ],
# +                    }),
# +                ]);
# +            }
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("vote", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assert)(proposalId, "Missing proposal ID");
# +            const [client, tmClient] = await makeClientWithGov(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.gov.vote(proposalId, voter1Address);
# +            if ((0, testutils_spec_1.simapp42Enabled)()) {
# +                expect(response.vote).toEqual(gov_1.Vote.fromPartial({
# +                    voter: voter1Address,
# +                    proposalId: (0, queryclient_1.longify)(proposalId),
# +                    option: gov_1.VoteOption.VOTE_OPTION_YES,
# +                }));
# +            }
# +            else {
# +                expect(response.vote).toEqual(gov_1.Vote.fromPartial({
# +                    voter: voter1Address,
# +                    proposalId: (0, queryclient_1.longify)(proposalId),
# +                    option: gov_1.VoteOption.VOTE_OPTION_YES,
# +                    options: [
# +                        gov_1.WeightedVoteOption.fromPartial({
# +                            option: gov_1.VoteOption.VOTE_OPTION_YES,
# +                            weight: "1000000000000000000",
# +                        }),
# +                    ],
# +                }));
# +            }
# +            tmClient.disconnect();
# +        });
# +    });
# +});
# +//# sourceMappingURL=queries.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/gov/queries.spec.js.map b/node_modules/@cosmjs/stargate/build/modules/gov/queries.spec.js.map
# new file mode 100644
# index 0000000..e422171
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/gov/queries.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"queries.spec.js","sourceRoot":"","sources":["../../../src/modules/gov/queries.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.js b/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.js
# index 0653625..1d17e7d 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.js
# +++ b/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.js
# @@ -4,7 +4,6 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
#  };
#  Object.defineProperty(exports, "__esModule", { value: true });
#  exports.createIbcAminoConverters = exports.isAminoMsgTransfer = void 0;
# -const tx_1 = require("cosmjs-types/ibc/applications/transfer/v1/tx");
#  const long_1 = __importDefault(require("long"));
#  function isAminoMsgTransfer(msg) {
#      return msg.type === "cosmos-sdk/MsgTransfer";
# @@ -26,21 +25,24 @@ function createIbcAminoConverters() {
#      return {
#          "/ibc.applications.transfer.v1.MsgTransfer": {
#              aminoType: "cosmos-sdk/MsgTransfer",
# -            toAmino: ({ sourcePort, sourceChannel, token, sender, receiver, timeoutHeight, timeoutTimestamp, }) => ({
# -                source_port: sourcePort,
# -                source_channel: sourceChannel,
# -                token: token,
# -                sender: sender,
# -                receiver: receiver,
# -                timeout_height: timeoutHeight
# -                    ? {
# -                        revision_height: omitDefault(timeoutHeight.revisionHeight)?.toString(),
# -                        revision_number: omitDefault(timeoutHeight.revisionNumber)?.toString(),
# -                    }
# -                    : {},
# -                timeout_timestamp: omitDefault(timeoutTimestamp)?.toString(),
# -            }),
# -            fromAmino: ({ source_port, source_channel, token, sender, receiver, timeout_height, timeout_timestamp, }) => tx_1.MsgTransfer.fromPartial({
# +            toAmino: ({ sourcePort, sourceChannel, token, sender, receiver, timeoutHeight, timeoutTimestamp, }) => {
# +                var _a, _b, _c;
# +                return ({
# +                    source_port: sourcePort,
# +                    source_channel: sourceChannel,
# +                    token: token,
# +                    sender: sender,
# +                    receiver: receiver,
# +                    timeout_height: timeoutHeight
# +                        ? {
# +                            revision_height: (_a = omitDefault(timeoutHeight.revisionHeight)) === null || _a === void 0 ? void 0 : _a.toString(),
# +                            revision_number: (_b = omitDefault(timeoutHeight.revisionNumber)) === null || _b === void 0 ? void 0 : _b.toString(),
# +                        }
# +                        : {},
# +                    timeout_timestamp: (_c = omitDefault(timeoutTimestamp)) === null || _c === void 0 ? void 0 : _c.toString(),
# +                });
# +            },
# +            fromAmino: ({ source_port, source_channel, token, sender, receiver, timeout_height, timeout_timestamp, }) => ({
#                  sourcePort: source_port,
#                  sourceChannel: source_channel,
#                  token: token,
# diff --git a/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.js.map b/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.js.map
# index 344de48..97c5ccf 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.js.map
# +++ b/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"aminomessages.js","sourceRoot":"","sources":["../../../src/modules/ibc/aminomessages.ts"],"names":[],"mappings":";;;;;;AAEA,qEAA2E;AAC3E,gDAAwB;AAwCxB,SAAgB,kBAAkB,CAAC,GAAa;IAC9C,OAAO,GAAG,CAAC,IAAI,KAAK,wBAAwB,CAAC;AAC/C,CAAC;AAFD,gDAEC;AAED,SAAS,WAAW,CAAmC,KAAQ;IAC7D,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC;KACzC;IAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC;KACxC;IAED,IAAI,cAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;QACtB,OAAO,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC;KAC3C;IAED,MAAM,IAAI,KAAK,CAAC,yBAAyB,OAAO,KAAK,GAAG,CAAC,CAAC;AAC5D,CAAC;AAED,SAAgB,wBAAwB;IACtC,OAAO;QACL,2CAA2C,EAAE;YAC3C,SAAS,EAAE,wBAAwB;YACnC,OAAO,EAAE,CAAC,EACR,UAAU,EACV,aAAa,EACb,KAAK,EACL,MAAM,EACN,QAAQ,EACR,aAAa,EACb,gBAAgB,GACJ,EAA6B,EAAE,CAAC,CAAC;gBAC7C,WAAW,EAAE,UAAU;gBACvB,cAAc,EAAE,aAAa;gBAC7B,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,QAAQ;gBAClB,cAAc,EAAE,aAAa;oBAC3B,CAAC,CAAC;wBACE,eAAe,EAAE,WAAW,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE;wBACtE,eAAe,EAAE,WAAW,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE;qBACvE;oBACH,CAAC,CAAC,EAAE;gBACN,iBAAiB,EAAE,WAAW,CAAC,gBAAgB,CAAC,EAAE,QAAQ,EAAE;aAC7D,CAAC;YACF,SAAS,EAAE,CAAC,EACV,WAAW,EACX,cAAc,EACd,KAAK,EACL,MAAM,EACN,QAAQ,EACR,cAAc,EACd,iBAAiB,GACS,EAAe,EAAE,CAC3C,gBAAW,CAAC,WAAW,CAAC;gBACtB,UAAU,EAAE,WAAW;gBACvB,aAAa,EAAE,cAAc;gBAC7B,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,QAAQ;gBAClB,aAAa,EAAE,cAAc;oBAC3B,CAAC,CAAC;wBACE,cAAc,EAAE,cAAI,CAAC,UAAU,CAAC,cAAc,CAAC,eAAe,IAAI,GAAG,EAAE,IAAI,CAAC;wBAC5E,cAAc,EAAE,cAAI,CAAC,UAAU,CAAC,cAAc,CAAC,eAAe,IAAI,GAAG,EAAE,IAAI,CAAC;qBAC7E;oBACH,CAAC,CAAC,SAAS;gBACb,gBAAgB,EAAE,cAAI,CAAC,UAAU,CAAC,iBAAiB,IAAI,GAAG,EAAE,IAAI,CAAC;aAClE,CAAC;SACL;KACF,CAAC;AACJ,CAAC;AAnDD,4DAmDC"}
# \ No newline at end of file
# +{"version":3,"file":"aminomessages.js","sourceRoot":"","sources":["../../../src/modules/ibc/aminomessages.ts"],"names":[],"mappings":";;;;;;AAGA,gDAAwB;AAwCxB,SAAgB,kBAAkB,CAAC,GAAa;IAC9C,OAAO,GAAG,CAAC,IAAI,KAAK,wBAAwB,CAAC;AAC/C,CAAC;AAFD,gDAEC;AAED,SAAS,WAAW,CAAmC,KAAQ;IAC7D,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC;KACzC;IAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC;KACxC;IAED,IAAI,cAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;QACtB,OAAO,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC;KAC3C;IAED,MAAM,IAAI,KAAK,CAAC,yBAAyB,OAAO,KAAK,GAAG,CAAC,CAAC;AAC5D,CAAC;AAED,SAAgB,wBAAwB;IACtC,OAAO;QACL,2CAA2C,EAAE;YAC3C,SAAS,EAAE,wBAAwB;YACnC,OAAO,EAAE,CAAC,EACR,UAAU,EACV,aAAa,EACb,KAAK,EACL,MAAM,EACN,QAAQ,EACR,aAAa,EACb,gBAAgB,GACJ,EAA6B,EAAE;;gBAAC,OAAA,CAAC;oBAC7C,WAAW,EAAE,UAAU;oBACvB,cAAc,EAAE,aAAa;oBAC7B,KAAK,EAAE,KAAK;oBACZ,MAAM,EAAE,MAAM;oBACd,QAAQ,EAAE,QAAQ;oBAClB,cAAc,EAAE,aAAa;wBAC3B,CAAC,CAAC;4BACE,eAAe,EAAE,MAAA,WAAW,CAAC,aAAa,CAAC,cAAc,CAAC,0CAAE,QAAQ,EAAE;4BACtE,eAAe,EAAE,MAAA,WAAW,CAAC,aAAa,CAAC,cAAc,CAAC,0CAAE,QAAQ,EAAE;yBACvE;wBACH,CAAC,CAAC,EAAE;oBACN,iBAAiB,EAAE,MAAA,WAAW,CAAC,gBAAgB,CAAC,0CAAE,QAAQ,EAAE;iBAC7D,CAAC,CAAA;aAAA;YACF,SAAS,EAAE,CAAC,EACV,WAAW,EACX,cAAc,EACd,KAAK,EACL,MAAM,EACN,QAAQ,EACR,cAAc,EACd,iBAAiB,GACS,EAAe,EAAE,CAAC,CAAC;gBAC7C,UAAU,EAAE,WAAW;gBACvB,aAAa,EAAE,cAAc;gBAC7B,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,QAAQ;gBAClB,aAAa,EAAE,cAAc;oBAC3B,CAAC,CAAC;wBACE,cAAc,EAAE,cAAI,CAAC,UAAU,CAAC,cAAc,CAAC,eAAe,IAAI,GAAG,EAAE,IAAI,CAAC;wBAC5E,cAAc,EAAE,cAAI,CAAC,UAAU,CAAC,cAAc,CAAC,eAAe,IAAI,GAAG,EAAE,IAAI,CAAC;qBAC7E;oBACH,CAAC,CAAC,SAAS;gBACb,gBAAgB,EAAE,cAAI,CAAC,UAAU,CAAC,iBAAiB,IAAI,GAAG,EAAE,IAAI,CAAC;aAClE,CAAC;SACH;KACF,CAAC;AACJ,CAAC;AAlDD,4DAkDC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.spec.d.ts b/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.spec.js b/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.spec.js
# new file mode 100644
# index 0000000..462c795
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.spec.js
# @@ -0,0 +1,183 @@
# +"use strict";
# +var __importDefault = (this && this.__importDefault) || function (mod) {
# +    return (mod && mod.__esModule) ? mod : { "default": mod };
# +};
# +Object.defineProperty(exports, "__esModule", { value: true });
# +/* eslint-disable @typescript-eslint/naming-convention */
# +const proto_signing_1 = require("@cosmjs/proto-signing");
# +const long_1 = __importDefault(require("long"));
# +const aminotypes_1 = require("../../aminotypes");
# +const aminomessages_1 = require("./aminomessages");
# +describe("AminoTypes", () => {
# +    describe("toAmino", () => {
# +        it("works for MsgTransfer", () => {
# +            const msg = {
# +                sourcePort: "testport",
# +                sourceChannel: "testchannel",
# +                token: (0, proto_signing_1.coin)(1234, "utest"),
# +                sender: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                receiver: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                timeoutHeight: {
# +                    revisionHeight: long_1.default.fromString("123", true),
# +                    revisionNumber: long_1.default.fromString("456", true),
# +                },
# +                timeoutTimestamp: long_1.default.fromString("789", true),
# +            };
# +            const aminoTypes = new aminotypes_1.AminoTypes((0, aminomessages_1.createIbcAminoConverters)());
# +            const aminoMsg = aminoTypes.toAmino({
# +                typeUrl: "/ibc.applications.transfer.v1.MsgTransfer",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "cosmos-sdk/MsgTransfer",
# +                value: {
# +                    source_port: "testport",
# +                    source_channel: "testchannel",
# +                    token: (0, proto_signing_1.coin)(1234, "utest"),
# +                    sender: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    receiver: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    timeout_height: {
# +                        revision_height: "123",
# +                        revision_number: "456",
# +                    },
# +                    timeout_timestamp: "789",
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +        it("works for MsgTransfer with empty values", () => {
# +            const msg = {
# +                sourcePort: "testport",
# +                sourceChannel: "testchannel",
# +                token: (0, proto_signing_1.coin)(1234, "utest"),
# +                sender: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                receiver: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                timeoutHeight: {
# +                    revisionHeight: long_1.default.UZERO,
# +                    revisionNumber: long_1.default.UZERO,
# +                },
# +                timeoutTimestamp: long_1.default.UZERO,
# +            };
# +            const aminoTypes = new aminotypes_1.AminoTypes((0, aminomessages_1.createIbcAminoConverters)());
# +            const aminoMsg = aminoTypes.toAmino({
# +                typeUrl: "/ibc.applications.transfer.v1.MsgTransfer",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "cosmos-sdk/MsgTransfer",
# +                value: {
# +                    source_port: "testport",
# +                    source_channel: "testchannel",
# +                    token: (0, proto_signing_1.coin)(1234, "utest"),
# +                    sender: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    receiver: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    timeout_height: {
# +                        revision_height: undefined,
# +                        revision_number: undefined,
# +                    },
# +                    timeout_timestamp: undefined,
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +        it("works for MsgTransfer with no height timeout", () => {
# +            const msg = {
# +                sourcePort: "testport",
# +                sourceChannel: "testchannel",
# +                token: (0, proto_signing_1.coin)(1234, "utest"),
# +                sender: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                receiver: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                timeoutHeight: undefined,
# +                timeoutTimestamp: long_1.default.UZERO,
# +            };
# +            const aminoMsg = new aminotypes_1.AminoTypes((0, aminomessages_1.createIbcAminoConverters)()).toAmino({
# +                typeUrl: "/ibc.applications.transfer.v1.MsgTransfer",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "cosmos-sdk/MsgTransfer",
# +                value: {
# +                    source_port: "testport",
# +                    source_channel: "testchannel",
# +                    token: (0, proto_signing_1.coin)(1234, "utest"),
# +                    sender: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    receiver: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    timeout_height: {},
# +                    timeout_timestamp: undefined,
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +    });
# +    describe("fromAmino", () => {
# +        it("works for MsgTransfer", () => {
# +            const aminoMsg = {
# +                type: "cosmos-sdk/MsgTransfer",
# +                value: {
# +                    source_port: "testport",
# +                    source_channel: "testchannel",
# +                    token: (0, proto_signing_1.coin)(1234, "utest"),
# +                    sender: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    receiver: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    timeout_height: {
# +                        revision_height: "123",
# +                        revision_number: "456",
# +                    },
# +                    timeout_timestamp: "789",
# +                },
# +            };
# +            const msg = new aminotypes_1.AminoTypes((0, aminomessages_1.createIbcAminoConverters)()).fromAmino(aminoMsg);
# +            const expectedValue = {
# +                sourcePort: "testport",
# +                sourceChannel: "testchannel",
# +                token: (0, proto_signing_1.coin)(1234, "utest"),
# +                sender: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                receiver: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                timeoutHeight: {
# +                    revisionHeight: long_1.default.fromString("123", true),
# +                    revisionNumber: long_1.default.fromString("456", true),
# +                },
# +                timeoutTimestamp: long_1.default.fromString("789", true),
# +            };
# +            expect(msg).toEqual({
# +                typeUrl: "/ibc.applications.transfer.v1.MsgTransfer",
# +                value: expectedValue,
# +            });
# +        });
# +        it("works for MsgTransfer with default values", () => {
# +            const aminoMsg = {
# +                type: "cosmos-sdk/MsgTransfer",
# +                value: {
# +                    source_port: "testport",
# +                    source_channel: "testchannel",
# +                    token: (0, proto_signing_1.coin)(1234, "utest"),
# +                    sender: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    receiver: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    timeout_height: {
# +                    // revision_height omitted
# +                    // revision_number omitted
# +                    },
# +                    // timeout_timestamp omitted
# +                },
# +            };
# +            const msg = new aminotypes_1.AminoTypes((0, aminomessages_1.createIbcAminoConverters)()).fromAmino(aminoMsg);
# +            const expectedValue = {
# +                sourcePort: "testport",
# +                sourceChannel: "testchannel",
# +                token: (0, proto_signing_1.coin)(1234, "utest"),
# +                sender: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                receiver: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                timeoutHeight: {
# +                    revisionHeight: long_1.default.UZERO,
# +                    revisionNumber: long_1.default.UZERO,
# +                },
# +                timeoutTimestamp: long_1.default.UZERO,
# +            };
# +            expect(msg).toEqual({
# +                typeUrl: "/ibc.applications.transfer.v1.MsgTransfer",
# +                value: expectedValue,
# +            });
# +        });
# +    });
# +});
# +//# sourceMappingURL=aminomessages.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.spec.js.map b/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.spec.js.map
# new file mode 100644
# index 0000000..edbdf78
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"aminomessages.spec.js","sourceRoot":"","sources":["../../../src/modules/ibc/aminomessages.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/ibc/ibctestdata.spec.d.ts b/node_modules/@cosmjs/stargate/build/modules/ibc/ibctestdata.spec.d.ts
# new file mode 100644
# index 0000000..13ae7b8
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/ibc/ibctestdata.spec.d.ts
# @@ -0,0 +1,28 @@
# +import { Channel, IdentifiedChannel, PacketState } from "cosmjs-types/ibc/core/channel/v1/channel";
# +import { ConnectionEnd, IdentifiedConnection } from "cosmjs-types/ibc/core/connection/v1/connection";
# +export declare const portId = "transfer";
# +export declare const channelId = "channel-0";
# +export declare const connectionId = "connection-0";
# +export declare const clientId = "07-tendermint-0";
# +export declare const channel: Channel;
# +export declare const identifiedChannel: IdentifiedChannel;
# +/**
# + * ```
# + * jq ".channel_genesis.commitments[0]" scripts/simapp42/genesis-ibc.json
# + * ```
# + */
# +export declare const commitment: {
# +    sequence: number;
# +    data: Uint8Array;
# +};
# +export declare const packetState: PacketState;
# +/**
# + * Unfortunatly empty right now
# + *
# + * ```
# + * jq ".channel_genesis.acknowledgements" scripts/simapp42/genesis-ibc.json
# + * ```
# + */
# +export declare const packetAcknowledgements: PacketState[];
# +export declare const connection: ConnectionEnd;
# +export declare const identifiedConnection: IdentifiedConnection;
# diff --git a/node_modules/@cosmjs/stargate/build/modules/ibc/ibctestdata.spec.js b/node_modules/@cosmjs/stargate/build/modules/ibc/ibctestdata.spec.js
# new file mode 100644
# index 0000000..90dc27a
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/ibc/ibctestdata.spec.js
# @@ -0,0 +1,97 @@
# +"use strict";
# +var __importDefault = (this && this.__importDefault) || function (mod) {
# +    return (mod && mod.__esModule) ? mod : { "default": mod };
# +};
# +Object.defineProperty(exports, "__esModule", { value: true });
# +exports.identifiedConnection = exports.connection = exports.packetAcknowledgements = exports.packetState = exports.commitment = exports.identifiedChannel = exports.channel = exports.clientId = exports.connectionId = exports.channelId = exports.portId = void 0;
# +const encoding_1 = require("@cosmjs/encoding");
# +const channel_1 = require("cosmjs-types/ibc/core/channel/v1/channel");
# +const commitment_1 = require("cosmjs-types/ibc/core/commitment/v1/commitment");
# +const connection_1 = require("cosmjs-types/ibc/core/connection/v1/connection");
# +const long_1 = __importDefault(require("long"));
# +// From scripts/simapp42/genesis-ibc.json
# +exports.portId = "transfer";
# +exports.channelId = "channel-0";
# +exports.connectionId = "connection-0";
# +exports.clientId = "07-tendermint-0";
# +exports.channel = channel_1.Channel.fromPartial({
# +    state: channel_1.State.STATE_OPEN,
# +    ordering: channel_1.Order.ORDER_UNORDERED,
# +    counterparty: channel_1.Counterparty.fromPartial({
# +        portId: exports.portId,
# +        channelId: exports.channelId,
# +    }),
# +    connectionHops: [exports.connectionId],
# +    version: "ics20-1",
# +});
# +exports.identifiedChannel = channel_1.IdentifiedChannel.fromPartial({
# +    state: channel_1.State.STATE_OPEN,
# +    ordering: channel_1.Order.ORDER_UNORDERED,
# +    counterparty: channel_1.Counterparty.fromPartial({
# +        portId: exports.portId,
# +        channelId: "channel-0",
# +    }),
# +    connectionHops: [exports.connectionId],
# +    version: "ics20-1",
# +    portId: exports.portId,
# +    channelId: exports.channelId,
# +});
# +/**
# + * ```
# + * jq ".channel_genesis.commitments[0]" scripts/simapp42/genesis-ibc.json
# + * ```
# + */
# +exports.commitment = {
# +    sequence: 1,
# +    data: (0, encoding_1.fromBase64)("hYz5Dx6o09DcSEWZR6xlJYwLgYUnLithsXMGtujic4I="),
# +};
# +exports.packetState = channel_1.PacketState.fromPartial({
# +    portId: exports.portId,
# +    channelId: exports.channelId,
# +    sequence: long_1.default.fromInt(exports.commitment.sequence, true),
# +    data: exports.commitment.data,
# +});
# +/**
# + * Unfortunatly empty right now
# + *
# + * ```
# + * jq ".channel_genesis.acknowledgements" scripts/simapp42/genesis-ibc.json
# + * ```
# + */
# +exports.packetAcknowledgements = [];
# +exports.connection = connection_1.ConnectionEnd.fromPartial({
# +    clientId: exports.clientId,
# +    versions: [
# +        connection_1.Version.fromPartial({
# +            identifier: "1",
# +            features: ["ORDER_ORDERED", "ORDER_UNORDERED"],
# +        }),
# +    ],
# +    state: connection_1.State.STATE_OPEN,
# +    counterparty: connection_1.Counterparty.fromPartial({
# +        clientId: "07-tendermint-0",
# +        connectionId: "connection-0",
# +        prefix: commitment_1.MerklePrefix.fromPartial({
# +            keyPrefix: (0, encoding_1.fromBase64)("aWJj"),
# +        }),
# +    }),
# +});
# +exports.identifiedConnection = connection_1.IdentifiedConnection.fromPartial({
# +    id: exports.connectionId,
# +    clientId: exports.clientId,
# +    versions: [
# +        connection_1.Version.fromPartial({
# +            identifier: "1",
# +            features: ["ORDER_ORDERED", "ORDER_UNORDERED"],
# +        }),
# +    ],
# +    state: connection_1.State.STATE_OPEN,
# +    counterparty: connection_1.Counterparty.fromPartial({
# +        clientId: "07-tendermint-0",
# +        connectionId: "connection-0",
# +        prefix: commitment_1.MerklePrefix.fromPartial({
# +            keyPrefix: (0, encoding_1.fromBase64)("aWJj"),
# +        }),
# +    }),
# +});
# +//# sourceMappingURL=ibctestdata.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/ibc/ibctestdata.spec.js.map b/node_modules/@cosmjs/stargate/build/modules/ibc/ibctestdata.spec.js.map
# new file mode 100644
# index 0000000..1148e4c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/ibc/ibctestdata.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"ibctestdata.spec.js","sourceRoot":"","sources":["../../../src/modules/ibc/ibctestdata.spec.ts"],"names":[],"mappings":";;;;;;AAAA,+CAA8C;AAC9C,sEAOkD;AAClD,+EAA8E;AAC9E,+EAMwD;AACxD,gDAAwB;AAExB,yCAAyC;AAE5B,QAAA,MAAM,GAAG,UAAU,CAAC;AACpB,QAAA,SAAS,GAAG,WAAW,CAAC;AACxB,QAAA,YAAY,GAAG,cAAc,CAAC;AAC9B,QAAA,QAAQ,GAAG,iBAAiB,CAAC;AAE7B,QAAA,OAAO,GAAG,iBAAO,CAAC,WAAW,CAAC;IACzC,KAAK,EAAE,eAAY,CAAC,UAAU;IAC9B,QAAQ,EAAE,eAAK,CAAC,eAAe;IAC/B,YAAY,EAAE,sBAAmB,CAAC,WAAW,CAAC;QAC5C,MAAM,EAAE,cAAM;QACd,SAAS,EAAE,iBAAS;KACrB,CAAC;IACF,cAAc,EAAE,CAAC,oBAAY,CAAC;IAC9B,OAAO,EAAE,SAAS;CACnB,CAAC,CAAC;AAEU,QAAA,iBAAiB,GAAG,2BAAiB,CAAC,WAAW,CAAC;IAC7D,KAAK,EAAE,eAAY,CAAC,UAAU;IAC9B,QAAQ,EAAE,eAAK,CAAC,eAAe;IAC/B,YAAY,EAAE,sBAAmB,CAAC,WAAW,CAAC;QAC5C,MAAM,EAAE,cAAM;QACd,SAAS,EAAE,WAAW;KACvB,CAAC;IACF,cAAc,EAAE,CAAC,oBAAY,CAAC;IAC9B,OAAO,EAAE,SAAS;IAClB,MAAM,EAAE,cAAM;IACd,SAAS,EAAE,iBAAS;CACrB,CAAC,CAAC;AAEH;;;;GAIG;AACU,QAAA,UAAU,GAAG;IACxB,QAAQ,EAAE,CAAC;IACX,IAAI,EAAE,IAAA,qBAAU,EAAC,8CAA8C,CAAC;CACjE,CAAC;AAEW,QAAA,WAAW,GAAG,qBAAW,CAAC,WAAW,CAAC;IACjD,MAAM,EAAE,cAAM;IACd,SAAS,EAAE,iBAAS;IACpB,QAAQ,EAAE,cAAI,CAAC,OAAO,CAAC,kBAAU,CAAC,QAAQ,EAAE,IAAI,CAAC;IACjD,IAAI,EAAE,kBAAU,CAAC,IAAI;CACtB,CAAC,CAAC;AAEH;;;;;;GAMG;AACU,QAAA,sBAAsB,GAAkB,EAAE,CAAC;AAE3C,QAAA,UAAU,GAAG,0BAAa,CAAC,WAAW,CAAC;IAClD,QAAQ,EAAE,gBAAQ;IAClB,QAAQ,EAAE;QACR,oBAAO,CAAC,WAAW,CAAC;YAClB,UAAU,EAAE,GAAG;YACf,QAAQ,EAAE,CAAC,eAAe,EAAE,iBAAiB,CAAC;SAC/C,CAAC;KACH;IACD,KAAK,EAAE,kBAAe,CAAC,UAAU;IACjC,YAAY,EAAE,yBAAsB,CAAC,WAAW,CAAC;QAC/C,QAAQ,EAAE,iBAAiB;QAC3B,YAAY,EAAE,cAAc;QAC5B,MAAM,EAAE,yBAAY,CAAC,WAAW,CAAC;YAC/B,SAAS,EAAE,IAAA,qBAAU,EAAC,MAAM,CAAC;SAC9B,CAAC;KACH,CAAC;CACH,CAAC,CAAC;AAEU,QAAA,oBAAoB,GAAG,iCAAoB,CAAC,WAAW,CAAC;IACnE,EAAE,EAAE,oBAAY;IAChB,QAAQ,EAAE,gBAAQ;IAClB,QAAQ,EAAE;QACR,oBAAO,CAAC,WAAW,CAAC;YAClB,UAAU,EAAE,GAAG;YACf,QAAQ,EAAE,CAAC,eAAe,EAAE,iBAAiB,CAAC;SAC/C,CAAC;KACH;IACD,KAAK,EAAE,kBAAe,CAAC,UAAU;IACjC,YAAY,EAAE,yBAAsB,CAAC,WAAW,CAAC;QAC/C,QAAQ,EAAE,iBAAiB;QAC3B,YAAY,EAAE,cAAc;QAC5B,MAAM,EAAE,yBAAY,CAAC,WAAW,CAAC;YAC/B,SAAS,EAAE,IAAA,qBAAU,EAAC,MAAM,CAAC;SAC9B,CAAC;KACH,CAAC;CACH,CAAC,CAAC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/ibc/queries.d.ts b/node_modules/@cosmjs/stargate/build/modules/ibc/queries.d.ts
# index 80e510c..60e3993 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/ibc/queries.d.ts
# +++ b/node_modules/@cosmjs/stargate/build/modules/ibc/queries.d.ts
# @@ -5,6 +5,7 @@ import { Height } from "cosmjs-types/ibc/core/client/v1/client";
#  import { QueryClientParamsResponse, QueryClientStateResponse, QueryClientStatesResponse, QueryConsensusStateResponse, QueryConsensusStatesResponse } from "cosmjs-types/ibc/core/client/v1/query";
#  import { QueryClientConnectionsResponse, QueryConnectionClientStateResponse, QueryConnectionConsensusStateResponse, QueryConnectionResponse, QueryConnectionsResponse } from "cosmjs-types/ibc/core/connection/v1/query";
#  import { ClientState as TendermintClientState, ConsensusState as TendermintConsensusState } from "cosmjs-types/ibc/lightclients/tendermint/v1/tendermint";
# +import Long from "long";
#  import { QueryClient } from "../../queryclient";
#  export interface IbcExtension {
#      readonly ibc: {
# @@ -16,7 +17,7 @@ export interface IbcExtension {
#              readonly allConnectionChannels: (connection: string) => Promise<QueryConnectionChannelsResponse>;
#              readonly clientState: (portId: string, channelId: string) => Promise<QueryChannelClientStateResponse>;
#              readonly consensusState: (portId: string, channelId: string, revisionNumber: number, revisionHeight: number) => Promise<QueryChannelConsensusStateResponse>;
# -            readonly packetCommitment: (portId: string, channelId: string, sequence: number) => Promise<QueryPacketCommitmentResponse>;
# +            readonly packetCommitment: (portId: string, channelId: string, sequence: Long) => Promise<QueryPacketCommitmentResponse>;
#              readonly packetCommitments: (portId: string, channelId: string, paginationKey?: Uint8Array) => Promise<QueryPacketCommitmentsResponse>;
#              readonly allPacketCommitments: (portId: string, channelId: string) => Promise<QueryPacketCommitmentsResponse>;
#              readonly packetReceipt: (portId: string, channelId: string, sequence: number) => Promise<QueryPacketReceiptResponse>;
# diff --git a/node_modules/@cosmjs/stargate/build/modules/ibc/queries.js b/node_modules/@cosmjs/stargate/build/modules/ibc/queries.js
# index 42c7d57..8730939 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/ibc/queries.js
# +++ b/node_modules/@cosmjs/stargate/build/modules/ibc/queries.js
# @@ -16,14 +16,14 @@ const tendermint_1 = require("cosmjs-types/ibc/lightclients/tendermint/v1/tender
#  const long_1 = __importDefault(require("long"));
#  const queryclient_1 = require("../../queryclient");
#  function decodeTendermintClientStateAny(clientState) {
# -    if (clientState?.typeUrl !== "/ibc.lightclients.tendermint.v1.ClientState") {
# -        throw new Error(`Unexpected client state type: ${clientState?.typeUrl}`);
# +    if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== "/ibc.lightclients.tendermint.v1.ClientState") {
# +        throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);
#      }
#      return tendermint_1.ClientState.decode(clientState.value);
#  }
#  function decodeTendermintConsensusStateAny(clientState) {
# -    if (clientState?.typeUrl !== "/ibc.lightclients.tendermint.v1.ConsensusState") {
# -        throw new Error(`Unexpected client state type: ${clientState?.typeUrl}`);
# +    if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== "/ibc.lightclients.tendermint.v1.ConsensusState") {
# +        throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);
#      }
#      return tendermint_1.ConsensusState.decode(clientState.value);
#  }
# @@ -46,6 +46,7 @@ function setupIbcExtension(base) {
#                      pagination: (0, queryclient_1.createPagination)(paginationKey),
#                  }),
#                  allChannels: async () => {
# +                    var _a;
#                      const channels = [];
#                      let response;
#                      let key;
# @@ -54,7 +55,7 @@ function setupIbcExtension(base) {
#                              pagination: (0, queryclient_1.createPagination)(key),
#                          });
#                          channels.push(...response.channels);
# -                        key = response.pagination?.nextKey;
# +                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;
#                      } while (key && key.length);
#                      return {
#                          channels: channels,
# @@ -66,6 +67,7 @@ function setupIbcExtension(base) {
#                      pagination: (0, queryclient_1.createPagination)(paginationKey),
#                  }),
#                  allConnectionChannels: async (connection) => {
# +                    var _a;
#                      const channels = [];
#                      let response;
#                      let key;
# @@ -75,7 +77,7 @@ function setupIbcExtension(base) {
#                              pagination: (0, queryclient_1.createPagination)(key),
#                          });
#                          channels.push(...response.channels);
# -                        key = response.pagination?.nextKey;
# +                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;
#                      } while (key && key.length);
#                      return {
#                          channels: channels,
# @@ -95,7 +97,7 @@ function setupIbcExtension(base) {
#                  packetCommitment: async (portId, channelId, sequence) => channelQueryService.PacketCommitment({
#                      portId: portId,
#                      channelId: channelId,
# -                    sequence: long_1.default.fromNumber(sequence, true),
# +                    sequence: sequence,
#                  }),
#                  packetCommitments: async (portId, channelId, paginationKey) => channelQueryService.PacketCommitments({
#                      channelId: channelId,
# @@ -103,6 +105,7 @@ function setupIbcExtension(base) {
#                      pagination: (0, queryclient_1.createPagination)(paginationKey),
#                  }),
#                  allPacketCommitments: async (portId, channelId) => {
# +                    var _a;
#                      const commitments = [];
#                      let response;
#                      let key;
# @@ -113,7 +116,7 @@ function setupIbcExtension(base) {
#                              pagination: (0, queryclient_1.createPagination)(key),
#                          });
#                          commitments.push(...response.commitments);
# -                        key = response.pagination?.nextKey;
# +                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;
#                      } while (key && key.length);
#                      return {
#                          commitments: commitments,
# @@ -130,27 +133,24 @@ function setupIbcExtension(base) {
#                      channelId: channelId,
#                      sequence: long_1.default.fromNumber(sequence, true),
#                  }),
# -                packetAcknowledgements: async (portId, channelId, paginationKey) => {
# -                    const request = query_2.QueryPacketAcknowledgementsRequest.fromPartial({
# -                        portId: portId,
# -                        channelId: channelId,
# -                        pagination: (0, queryclient_1.createPagination)(paginationKey),
# -                    });
# -                    return channelQueryService.PacketAcknowledgements(request);
# -                },
# +                packetAcknowledgements: async (portId, channelId, paginationKey) => channelQueryService.PacketAcknowledgements({
# +                    portId: portId,
# +                    channelId: channelId,
# +                    pagination: (0, queryclient_1.createPagination)(paginationKey),
# +                }),
#                  allPacketAcknowledgements: async (portId, channelId) => {
# +                    var _a;
#                      const acknowledgements = [];
#                      let response;
#                      let key;
#                      do {
# -                        const request = query_2.QueryPacketAcknowledgementsRequest.fromPartial({
# +                        response = await channelQueryService.PacketAcknowledgements({
#                              channelId: channelId,
#                              portId: portId,
#                              pagination: (0, queryclient_1.createPagination)(key),
#                          });
# -                        response = await channelQueryService.PacketAcknowledgements(request);
#                          acknowledgements.push(...response.acknowledgements);
# -                        key = response.pagination?.nextKey;
# +                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;
#                      } while (key && key.length);
#                      return {
#                          acknowledgements: acknowledgements,
# @@ -178,6 +178,7 @@ function setupIbcExtension(base) {
#                      pagination: (0, queryclient_1.createPagination)(paginationKey),
#                  }),
#                  allStates: async () => {
# +                    var _a;
#                      const clientStates = [];
#                      let response;
#                      let key;
# @@ -186,7 +187,7 @@ function setupIbcExtension(base) {
#                              pagination: (0, queryclient_1.createPagination)(key),
#                          });
#                          clientStates.push(...response.clientStates);
# -                        key = response.pagination?.nextKey;
# +                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;
#                      } while (key && key.length);
#                      return {
#                          clientStates: clientStates,
# @@ -202,6 +203,7 @@ function setupIbcExtension(base) {
#                      pagination: (0, queryclient_1.createPagination)(paginationKey),
#                  }),
#                  allConsensusStates: async (clientId) => {
# +                    var _a;
#                      const consensusStates = [];
#                      let response;
#                      let key;
# @@ -211,7 +213,7 @@ function setupIbcExtension(base) {
#                              pagination: (0, queryclient_1.createPagination)(key),
#                          });
#                          consensusStates.push(...response.consensusStates);
# -                        key = response.pagination?.nextKey;
# +                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;
#                      } while (key && key.length);
#                      return {
#                          consensusStates: consensusStates,
# @@ -229,6 +231,7 @@ function setupIbcExtension(base) {
#                      return clientStates.map(({ clientState }) => decodeTendermintClientStateAny(clientState));
#                  },
#                  allStatesTm: async () => {
# +                    var _a;
#                      const clientStates = [];
#                      let response;
#                      let key;
# @@ -237,15 +240,15 @@ function setupIbcExtension(base) {
#                              pagination: (0, queryclient_1.createPagination)(key),
#                          });
#                          clientStates.push(...response.clientStates);
# -                        key = response.pagination?.nextKey;
# +                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;
#                      } while (key && key.length);
#                      return clientStates.map(({ clientState }) => decodeTendermintClientStateAny(clientState));
#                  },
#                  consensusStateTm: async (clientId, consensusHeight) => {
#                      const response = await clientQueryService.ConsensusState(query_3.QueryConsensusStateRequest.fromPartial({
#                          clientId: clientId,
# -                        revisionHeight: consensusHeight?.revisionHeight,
# -                        revisionNumber: consensusHeight?.revisionNumber,
# +                        revisionHeight: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionHeight,
# +                        revisionNumber: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionNumber,
#                          latestHeight: consensusHeight === undefined,
#                      }));
#                      return decodeTendermintConsensusStateAny(response.consensusState);
# @@ -259,6 +262,7 @@ function setupIbcExtension(base) {
#                      pagination: (0, queryclient_1.createPagination)(paginationKey),
#                  }),
#                  allConnections: async () => {
# +                    var _a;
#                      const connections = [];
#                      let response;
#                      let key;
# @@ -267,7 +271,7 @@ function setupIbcExtension(base) {
#                              pagination: (0, queryclient_1.createPagination)(key),
#                          });
#                          connections.push(...response.connections);
# -                        key = response.pagination?.nextKey;
# +                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;
#                      } while (key && key.length);
#                      return {
#                          connections: connections,
# @@ -291,6 +295,7 @@ function setupIbcExtension(base) {
#                      pagination: (0, queryclient_1.createPagination)(paginationKey),
#                  }),
#                  allDenomTraces: async () => {
# +                    var _a;
#                      const denomTraces = [];
#                      let response;
#                      let key;
# @@ -299,7 +304,7 @@ function setupIbcExtension(base) {
#                              pagination: (0, queryclient_1.createPagination)(key),
#                          });
#                          denomTraces.push(...response.denomTraces);
# -                        key = response.pagination?.nextKey;
# +                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;
#                      } while (key && key.length);
#                      return {
#                          denomTraces: denomTraces,
# @@ -313,31 +318,31 @@ function setupIbcExtension(base) {
#                          // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L55-L65
#                          // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L117-L120
#                          const key = (0, encoding_1.toAscii)(`channelEnds/ports/${portId}/channels/${channelId}`);
# -                        const { value } = await base.queryStoreVerified("ibc", key);
# -                        return value.length ? channel_1.Channel.decode(value) : null;
# +                        const responseData = await base.queryVerified("ibc", key);
# +                        return responseData.length ? channel_1.Channel.decode(responseData) : null;
#                      },
#                      packetCommitment: async (portId, channelId, sequence) => {
#                          // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L128-L133
#                          // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L183-L185
#                          const key = (0, encoding_1.toAscii)(`commitments/ports/${portId}/channels/${channelId}/packets/${sequence}`);
# -                        const { value } = await base.queryStoreVerified("ibc", key);
# +                        const responseData = await base.queryVerified("ibc", key);
#                          // keeper code doesn't parse, but returns raw
# -                        return value;
# +                        return responseData;
#                      },
#                      packetAcknowledgement: async (portId, channelId, sequence) => {
#                          // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L159-L166
#                          // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L153-L156
#                          const key = (0, encoding_1.toAscii)(`acks/ports/${portId}/channels/${channelId}/acknowledgements/${sequence}`);
# -                        const { value } = await base.queryStoreVerified("ibc", key);
# +                        const responseData = await base.queryVerified("ibc", key);
#                          // keeper code doesn't parse, but returns raw
# -                        return value;
# +                        return responseData;
#                      },
#                      nextSequenceReceive: async (portId, channelId) => {
#                          // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L92-L101
#                          // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L133-L136
#                          const key = (0, encoding_1.toAscii)(`seqAcks/ports/${portId}/channels/${channelId}/nextSequenceAck`);
# -                        const { value } = await base.queryStoreVerified("ibc", key);
# -                        return value.length ? math_1.Uint64.fromBytes(value).toNumber() : null;
# +                        const responseData = await base.queryVerified("ibc", key);
# +                        return responseData.length ? math_1.Uint64.fromBytes(responseData).toNumber() : null;
#                      },
#                  },
#              },
# diff --git a/node_modules/@cosmjs/stargate/build/modules/ibc/queries.js.map b/node_modules/@cosmjs/stargate/build/modules/ibc/queries.js.map
# index 2465d99..32e5648 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/ibc/queries.js.map
# +++ b/node_modules/@cosmjs/stargate/build/modules/ibc/queries.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../src/modules/ibc/queries.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# +{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../src/modules/ibc/queries.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/ibc/queries.spec.d.ts b/node_modules/@cosmjs/stargate/build/modules/ibc/queries.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/ibc/queries.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/modules/ibc/queries.spec.js b/node_modules/@cosmjs/stargate/build/modules/ibc/queries.spec.js
# new file mode 100644
# index 0000000..e695513
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/ibc/queries.spec.js
# @@ -0,0 +1,448 @@
# +"use strict";
# +var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
# +    if (k2 === undefined) k2 = k;
# +    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
# +}) : (function(o, m, k, k2) {
# +    if (k2 === undefined) k2 = k;
# +    o[k2] = m[k];
# +}));
# +var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
# +    Object.defineProperty(o, "default", { enumerable: true, value: v });
# +}) : function(o, v) {
# +    o["default"] = v;
# +});
# +var __importStar = (this && this.__importStar) || function (mod) {
# +    if (mod && mod.__esModule) return mod;
# +    var result = {};
# +    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
# +    __setModuleDefault(result, mod);
# +    return result;
# +};
# +var __importDefault = (this && this.__importDefault) || function (mod) {
# +    return (mod && mod.__esModule) ? mod : { "default": mod };
# +};
# +Object.defineProperty(exports, "__esModule", { value: true });
# +const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
# +const long_1 = __importDefault(require("long"));
# +const queryclient_1 = require("../../queryclient");
# +const testutils_spec_1 = require("../../testutils.spec");
# +const ibcTest = __importStar(require("./ibctestdata.spec"));
# +const queries_1 = require("./queries");
# +async function makeClientWithIbc(rpcUrl) {
# +    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(rpcUrl);
# +    return [queryclient_1.QueryClient.withExtensions(tmClient, queries_1.setupIbcExtension), tmClient];
# +}
# +describe("IbcExtension", () => {
# +    describe("channel", () => {
# +        describe("channel", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.channel.channel(ibcTest.portId, ibcTest.channelId);
# +                expect(response.channel).toEqual(ibcTest.channel);
# +                expect(response.proofHeight).toBeDefined();
# +                expect(response.proofHeight).not.toBeNull();
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("channels", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.channel.channels();
# +                expect(response.channels).toEqual([ibcTest.identifiedChannel]);
# +                expect(response.pagination).toBeDefined();
# +                expect(response.height).toBeDefined();
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("allChannels", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.channel.allChannels();
# +                expect(response.channels).toEqual([ibcTest.identifiedChannel]);
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("connectionChannels", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.channel.connectionChannels(ibcTest.connectionId);
# +                expect(response.channels).toEqual([ibcTest.identifiedChannel]);
# +                expect(response.pagination).toBeDefined();
# +                expect(response.height).toBeDefined();
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("allConnectionChannels", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.channel.allConnectionChannels(ibcTest.connectionId);
# +                expect(response.channels).toEqual([ibcTest.identifiedChannel]);
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("clientState", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.channel.clientState(ibcTest.portId, ibcTest.channelId);
# +                expect(response.identifiedClientState).toEqual({
# +                    clientId: ibcTest.clientId,
# +                    clientState: {
# +                        typeUrl: "/ibc.lightclients.tendermint.v1.ClientState",
# +                        value: jasmine.any(Uint8Array),
# +                    },
# +                });
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("consensusState", () => {
# +            xit("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.channel.consensusState(ibcTest.portId, ibcTest.channelId, 
# +                // TODO: Find valid values
# +                0, 0);
# +                expect(response.consensusState).toEqual({
# +                    typeUrl: "/haha",
# +                    value: jasmine.any(Uint8Array),
# +                });
# +                expect(response.clientId).toEqual(ibcTest.clientId);
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("packetCommitment", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.channel.packetCommitment(ibcTest.portId, ibcTest.channelId, long_1.default.fromInt(ibcTest.commitment.sequence, true));
# +                expect(response.commitment).toEqual(ibcTest.commitment.data);
# +                expect(response.proofHeight).toBeDefined();
# +                expect(response.proofHeight).not.toBeNull();
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("packetCommitments", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.channel.packetCommitments(ibcTest.portId, ibcTest.channelId);
# +                expect(response.commitments).toEqual([ibcTest.packetState]);
# +                expect(response.pagination).toBeDefined();
# +                expect(response.height).toBeDefined();
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("allPacketCommitments", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.channel.allPacketCommitments(ibcTest.portId, ibcTest.channelId);
# +                expect(response.commitments).toEqual([ibcTest.packetState]);
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("packetReceipt", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.channel.packetReceipt(ibcTest.portId, ibcTest.channelId, 1);
# +                expect(response.received).toEqual(false);
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("packetAcknowledgement", () => {
# +            it("works", async () => {
# +                pending("We don't have an acknowledgement for testing at the moment");
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.channel.packetAcknowledgement(ibcTest.portId, ibcTest.channelId, ibcTest.commitment.sequence);
# +                expect(response.acknowledgement).toEqual(ibcTest.packetAcknowledgements[0].data);
# +                expect(response.proofHeight).toBeDefined();
# +                expect(response.proofHeight).not.toBeNull();
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("packetAcknowledgements", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.channel.packetAcknowledgements(ibcTest.portId, ibcTest.channelId);
# +                expect(response.acknowledgements).toEqual(ibcTest.packetAcknowledgements);
# +                expect(response.pagination).toBeDefined();
# +                expect(response.height).toBeDefined();
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("allPacketAcknowledgements", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.channel.allPacketAcknowledgements(ibcTest.portId, ibcTest.channelId);
# +                expect(response.acknowledgements).toEqual(ibcTest.packetAcknowledgements);
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("unreceivedPackets", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.channel.unreceivedPackets(ibcTest.portId, ibcTest.channelId, [1, 2, 3]);
# +                expect(response.sequences).toEqual([1, 2, 3].map((n) => long_1.default.fromInt(n, true)));
# +                expect(response.height).toBeDefined();
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("unreceivedAcks", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.channel.unreceivedAcks(ibcTest.portId, ibcTest.channelId, [1, 2, 3, 4, 5, 6, 7]);
# +                expect(response.sequences).toEqual([long_1.default.fromInt(ibcTest.commitment.sequence, true)]);
# +                expect(response.height).toBeDefined();
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("nextSequenceReceive", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.channel.nextSequenceReceive(ibcTest.portId, ibcTest.channelId);
# +                expect(response.nextSequenceReceive).toEqual(long_1.default.fromInt(1, true));
# +                expect(response.proofHeight).toBeDefined();
# +                expect(response.proofHeight).not.toBeNull();
# +                tmClient.disconnect();
# +            });
# +        });
# +    });
# +    describe("client", () => {
# +        describe("state", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.client.state(ibcTest.clientId);
# +                expect(response.clientState).toEqual({
# +                    typeUrl: "/ibc.lightclients.tendermint.v1.ClientState",
# +                    value: jasmine.any(Uint8Array),
# +                });
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("states", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.client.states();
# +                expect(response.clientStates).toEqual([
# +                    {
# +                        clientId: ibcTest.clientId,
# +                        clientState: {
# +                            typeUrl: "/ibc.lightclients.tendermint.v1.ClientState",
# +                            value: jasmine.any(Uint8Array),
# +                        },
# +                    },
# +                ]);
# +                expect(response.pagination).toBeDefined();
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("allStates", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.client.allStates();
# +                expect(response.clientStates).toEqual([
# +                    {
# +                        clientId: ibcTest.clientId,
# +                        clientState: {
# +                            typeUrl: "/ibc.lightclients.tendermint.v1.ClientState",
# +                            value: jasmine.any(Uint8Array),
# +                        },
# +                    },
# +                ]);
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("consensusState", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.client.consensusState(ibcTest.clientId);
# +                expect(response.consensusState).toEqual({
# +                    typeUrl: "/ibc.lightclients.tendermint.v1.ConsensusState",
# +                    value: jasmine.any(Uint8Array),
# +                });
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("consensusStates", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.client.consensusStates(ibcTest.clientId);
# +                expect(response.consensusStates).toEqual(jasmine.arrayContaining([
# +                    {
# +                        height: jasmine.anything(),
# +                        consensusState: {
# +                            typeUrl: "/ibc.lightclients.tendermint.v1.ConsensusState",
# +                            value: jasmine.any(Uint8Array),
# +                        },
# +                    },
# +                ]));
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("allConsensusStates", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.client.allConsensusStates(ibcTest.clientId);
# +                expect(response.consensusStates).toEqual(jasmine.arrayContaining([
# +                    {
# +                        height: jasmine.anything(),
# +                        consensusState: {
# +                            typeUrl: "/ibc.lightclients.tendermint.v1.ConsensusState",
# +                            value: jasmine.any(Uint8Array),
# +                        },
# +                    },
# +                ]));
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("params", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.client.params();
# +                expect(response.params).toEqual({
# +                    allowedClients: ["06-solomachine", "07-tendermint"],
# +                });
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("stateTm", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.client.stateTm(ibcTest.clientId);
# +                expect(response.chainId).toEqual("ibc-1");
# +                // TODO: Fill these expectations out
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("statesTm", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.client.statesTm();
# +                expect(response).toEqual(jasmine.arrayContaining([
# +                    jasmine.objectContaining({
# +                        chainId: "ibc-1",
# +                    }),
# +                ]));
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("allStatesTm", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.client.allStatesTm();
# +                expect(response).toEqual(jasmine.arrayContaining([
# +                    jasmine.objectContaining({
# +                        chainId: "ibc-1",
# +                    }),
# +                ]));
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("consensusStateTm", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.client.consensusStateTm(ibcTest.clientId);
# +                expect(response.nextValidatorsHash).toEqual(jasmine.any(Uint8Array));
# +                // TODO: Fill out these expectations
# +                tmClient.disconnect();
# +            });
# +        });
# +    });
# +    describe("connection", () => {
# +        describe("connection", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.connection.connection(ibcTest.connectionId);
# +                expect(response.connection).toEqual(ibcTest.connection);
# +                expect(response.proofHeight).toBeDefined();
# +                expect(response.proofHeight).not.toBeNull();
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("connections", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.connection.connections();
# +                expect(response.connections).toEqual([ibcTest.identifiedConnection]);
# +                expect(response.pagination).toBeDefined();
# +                expect(response.height).toBeDefined();
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("allConnections", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.connection.allConnections();
# +                expect(response.connections).toEqual([ibcTest.identifiedConnection]);
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("clientConnections", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.connection.clientConnections(ibcTest.clientId);
# +                expect(response.connectionPaths).toEqual([ibcTest.connectionId]);
# +                expect(response.proofHeight).toBeDefined();
# +                expect(response.proofHeight).not.toBeNull();
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("clientState", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                const response = await client.ibc.connection.clientState(ibcTest.connectionId);
# +                expect(response.identifiedClientState).toEqual({
# +                    clientId: ibcTest.clientId,
# +                    clientState: {
# +                        typeUrl: "/ibc.lightclients.tendermint.v1.ClientState",
# +                        value: jasmine.any(Uint8Array),
# +                    },
# +                });
# +                tmClient.disconnect();
# +            });
# +        });
# +        describe("consensusState", () => {
# +            xit("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp42)();
# +                const [client, tmClient] = await makeClientWithIbc(testutils_spec_1.simapp.tendermintUrl);
# +                // TODO: Find valid values
# +                const response = await client.ibc.connection.consensusState(ibcTest.connectionId, 1, 1);
# +                expect(response.clientId).toEqual(ibcTest.clientId);
# +                expect(response.consensusState).toEqual({
# +                    typeUrl: "/ibc.lightclients.tendermint.v1.ConsensusState",
# +                    value: jasmine.any(Uint8Array),
# +                });
# +                tmClient.disconnect();
# +            });
# +        });
# +    });
# +});
# +//# sourceMappingURL=queries.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/ibc/queries.spec.js.map b/node_modules/@cosmjs/stargate/build/modules/ibc/queries.spec.js.map
# new file mode 100644
# index 0000000..23a5c6c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/ibc/queries.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"queries.spec.js","sourceRoot":"","sources":["../../../src/modules/ibc/queries.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/index.d.ts b/node_modules/@cosmjs/stargate/build/modules/index.d.ts
# index eb06df6..d67549d 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/index.d.ts
# +++ b/node_modules/@cosmjs/stargate/build/modules/index.d.ts
# @@ -1,7 +1,6 @@
#  export { AuthExtension, setupAuthExtension } from "./auth/queries";
#  export { createAuthzAminoConverters } from "./authz/aminomessages";
#  export { authzTypes } from "./authz/messages";
# -export { setupAuthzExtension } from "./authz/queries";
#  export { AminoMsgMultiSend, AminoMsgSend, createBankAminoConverters, isAminoMsgMultiSend, isAminoMsgSend, } from "./bank/aminomessages";
#  export { bankTypes, isMsgSendEncodeObject, MsgSendEncodeObject } from "./bank/messages";
#  export { BankExtension, setupBankExtension } from "./bank/queries";
# @@ -10,11 +9,10 @@ export { AminoMsgFundCommunityPool, AminoMsgSetWithdrawAddress, AminoMsgWithdraw
#  export { distributionTypes, isMsgWithdrawDelegatorRewardEncodeObject, MsgWithdrawDelegatorRewardEncodeObject, } from "./distribution/messages";
#  export { DistributionExtension, setupDistributionExtension } from "./distribution/queries";
#  export { AminoMsgSubmitEvidence, createEvidenceAminoConverters, isAminoMsgSubmitEvidence, } from "./evidence/aminomessages";
# -export { createFeegrantAminoConverters } from "./feegrant/aminomessages";
# +export { createFreegrantAminoConverters } from "./feegrant/aminomessages";
#  export { feegrantTypes } from "./feegrant/messages";
# -export { FeegrantExtension, setupFeegrantExtension } from "./feegrant/queries";
# -export { AminoMsgDeposit, AminoMsgSubmitProposal, AminoMsgVote, AminoMsgVoteWeighted, createGovAminoConverters, isAminoMsgDeposit, isAminoMsgSubmitProposal, isAminoMsgVote, isAminoMsgVoteWeighted, } from "./gov/aminomessages";
# -export { govTypes, isMsgDepositEncodeObject, isMsgSubmitProposalEncodeObject, isMsgVoteEncodeObject, isMsgVoteWeightedEncodeObject, MsgDepositEncodeObject, MsgSubmitProposalEncodeObject, MsgVoteEncodeObject, MsgVoteWeightedEncodeObject, } from "./gov/messages";
# +export { AminoMsgDeposit, AminoMsgSubmitProposal, AminoMsgVote, createGovAminoConverters, isAminoMsgDeposit, isAminoMsgSubmitProposal, isAminoMsgVote, } from "./gov/aminomessages";
# +export { govTypes, isMsgDepositEncodeObject, isMsgSubmitProposalEncodeObject, isMsgVoteEncodeObject, MsgDepositEncodeObject, MsgSubmitProposalEncodeObject, MsgVoteEncodeObject, } from "./gov/messages";
#  export { GovExtension, GovParamsType, GovProposalId, setupGovExtension } from "./gov/queries";
#  export { AminoMsgTransfer, createIbcAminoConverters, isAminoMsgTransfer } from "./ibc/aminomessages";
#  export { ibcTypes, isMsgTransferEncodeObject, MsgTransferEncodeObject } from "./ibc/messages";
# @@ -23,8 +21,6 @@ export { MintExtension, MintParams, setupMintExtension } from "./mint/queries";
#  export { AminoMsgUnjail, createSlashingAminoConverters, isAminoMsgUnjail } from "./slashing/aminomessages";
#  export { setupSlashingExtension, SlashingExtension } from "./slashing/queries";
#  export { AminoMsgBeginRedelegate, AminoMsgCreateValidator, AminoMsgDelegate, AminoMsgEditValidator, AminoMsgUndelegate, createStakingAminoConverters, isAminoMsgBeginRedelegate, isAminoMsgCreateValidator, isAminoMsgDelegate, isAminoMsgEditValidator, isAminoMsgUndelegate, } from "./staking/aminomessages";
# -export { isMsgBeginRedelegateEncodeObject, isMsgCreateValidatorEncodeObject, isMsgDelegateEncodeObject, isMsgEditValidatorEncodeObject, isMsgUndelegateEncodeObject, MsgBeginRedelegateEncodeObject, MsgCreateValidatorEncodeObject, MsgDelegateEncodeObject, MsgEditValidatorEncodeObject, MsgUndelegateEncodeObject, stakingTypes, } from "./staking/messages";
# +export { isMsgDelegateEncodeObject, isMsgUndelegateEncodeObject, MsgDelegateEncodeObject, MsgUndelegateEncodeObject, stakingTypes, } from "./staking/messages";
#  export { setupStakingExtension, StakingExtension } from "./staking/queries";
#  export { setupTxExtension, TxExtension } from "./tx/queries";
# -export { AminoMsgCreateVestingAccount, createVestingAminoConverters, isAminoMsgCreateVestingAccount, } from "./vesting/aminomessages";
# -export { vestingTypes } from "./vesting/messages";
# diff --git a/node_modules/@cosmjs/stargate/build/modules/index.js b/node_modules/@cosmjs/stargate/build/modules/index.js
# index 7db5b0d..343fc40 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/index.js
# +++ b/node_modules/@cosmjs/stargate/build/modules/index.js
# @@ -1,15 +1,13 @@
#  "use strict";
#  Object.defineProperty(exports, "__esModule", { value: true });
# -exports.isAminoMsgEditValidator = exports.isAminoMsgDelegate = exports.isAminoMsgCreateValidator = exports.isAminoMsgBeginRedelegate = exports.createStakingAminoConverters = exports.setupSlashingExtension = exports.isAminoMsgUnjail = exports.createSlashingAminoConverters = exports.setupMintExtension = exports.setupIbcExtension = exports.isMsgTransferEncodeObject = exports.ibcTypes = exports.isAminoMsgTransfer = exports.createIbcAminoConverters = exports.setupGovExtension = exports.isMsgVoteWeightedEncodeObject = exports.isMsgVoteEncodeObject = exports.isMsgSubmitProposalEncodeObject = exports.isMsgDepositEncodeObject = exports.govTypes = exports.isAminoMsgVoteWeighted = exports.isAminoMsgVote = exports.isAminoMsgSubmitProposal = exports.isAminoMsgDeposit = exports.createGovAminoConverters = exports.setupFeegrantExtension = exports.feegrantTypes = exports.createFeegrantAminoConverters = exports.isAminoMsgSubmitEvidence = exports.createEvidenceAminoConverters = exports.setupDistributionExtension = exports.isMsgWithdrawDelegatorRewardEncodeObject = exports.distributionTypes = exports.isAminoMsgWithdrawValidatorCommission = exports.isAminoMsgWithdrawDelegatorReward = exports.isAminoMsgSetWithdrawAddress = exports.isAminoMsgFundCommunityPool = exports.createDistributionAminoConverters = exports.isAminoMsgVerifyInvariant = exports.createCrysisAminoConverters = exports.setupBankExtension = exports.isMsgSendEncodeObject = exports.bankTypes = exports.isAminoMsgSend = exports.isAminoMsgMultiSend = exports.createBankAminoConverters = exports.setupAuthzExtension = exports.authzTypes = exports.createAuthzAminoConverters = exports.setupAuthExtension = void 0;
# -exports.vestingTypes = exports.isAminoMsgCreateVestingAccount = exports.createVestingAminoConverters = exports.setupTxExtension = exports.setupStakingExtension = exports.stakingTypes = exports.isMsgUndelegateEncodeObject = exports.isMsgEditValidatorEncodeObject = exports.isMsgDelegateEncodeObject = exports.isMsgCreateValidatorEncodeObject = exports.isMsgBeginRedelegateEncodeObject = exports.isAminoMsgUndelegate = void 0;
# +exports.stakingTypes = exports.isMsgUndelegateEncodeObject = exports.isMsgDelegateEncodeObject = exports.isAminoMsgUndelegate = exports.isAminoMsgEditValidator = exports.isAminoMsgDelegate = exports.isAminoMsgCreateValidator = exports.isAminoMsgBeginRedelegate = exports.createStakingAminoConverters = exports.setupSlashingExtension = exports.isAminoMsgUnjail = exports.createSlashingAminoConverters = exports.setupMintExtension = exports.setupIbcExtension = exports.isMsgTransferEncodeObject = exports.ibcTypes = exports.isAminoMsgTransfer = exports.createIbcAminoConverters = exports.setupGovExtension = exports.isMsgVoteEncodeObject = exports.isMsgSubmitProposalEncodeObject = exports.isMsgDepositEncodeObject = exports.govTypes = exports.isAminoMsgVote = exports.isAminoMsgSubmitProposal = exports.isAminoMsgDeposit = exports.createGovAminoConverters = exports.feegrantTypes = exports.createFreegrantAminoConverters = exports.isAminoMsgSubmitEvidence = exports.createEvidenceAminoConverters = exports.setupDistributionExtension = exports.isMsgWithdrawDelegatorRewardEncodeObject = exports.distributionTypes = exports.isAminoMsgWithdrawValidatorCommission = exports.isAminoMsgWithdrawDelegatorReward = exports.isAminoMsgSetWithdrawAddress = exports.isAminoMsgFundCommunityPool = exports.createDistributionAminoConverters = exports.isAminoMsgVerifyInvariant = exports.createCrysisAminoConverters = exports.setupBankExtension = exports.isMsgSendEncodeObject = exports.bankTypes = exports.isAminoMsgSend = exports.isAminoMsgMultiSend = exports.createBankAminoConverters = exports.authzTypes = exports.createAuthzAminoConverters = exports.setupAuthExtension = void 0;
# +exports.setupTxExtension = exports.setupStakingExtension = void 0;
#  var queries_1 = require("./auth/queries");
#  Object.defineProperty(exports, "setupAuthExtension", { enumerable: true, get: function () { return queries_1.setupAuthExtension; } });
#  var aminomessages_1 = require("./authz/aminomessages");
#  Object.defineProperty(exports, "createAuthzAminoConverters", { enumerable: true, get: function () { return aminomessages_1.createAuthzAminoConverters; } });
#  var messages_1 = require("./authz/messages");
#  Object.defineProperty(exports, "authzTypes", { enumerable: true, get: function () { return messages_1.authzTypes; } });
# -var queries_2 = require("./authz/queries");
# -Object.defineProperty(exports, "setupAuthzExtension", { enumerable: true, get: function () { return queries_2.setupAuthzExtension; } });
#  var aminomessages_2 = require("./bank/aminomessages");
#  Object.defineProperty(exports, "createBankAminoConverters", { enumerable: true, get: function () { return aminomessages_2.createBankAminoConverters; } });
#  Object.defineProperty(exports, "isAminoMsgMultiSend", { enumerable: true, get: function () { return aminomessages_2.isAminoMsgMultiSend; } });
# @@ -17,8 +15,8 @@ Object.defineProperty(exports, "isAminoMsgSend", { enumerable: true, get: functi
#  var messages_2 = require("./bank/messages");
#  Object.defineProperty(exports, "bankTypes", { enumerable: true, get: function () { return messages_2.bankTypes; } });
#  Object.defineProperty(exports, "isMsgSendEncodeObject", { enumerable: true, get: function () { return messages_2.isMsgSendEncodeObject; } });
# -var queries_3 = require("./bank/queries");
# -Object.defineProperty(exports, "setupBankExtension", { enumerable: true, get: function () { return queries_3.setupBankExtension; } });
# +var queries_2 = require("./bank/queries");
# +Object.defineProperty(exports, "setupBankExtension", { enumerable: true, get: function () { return queries_2.setupBankExtension; } });
#  var aminomessages_3 = require("./crisis/aminomessages");
#  Object.defineProperty(exports, "createCrysisAminoConverters", { enumerable: true, get: function () { return aminomessages_3.createCrysisAminoConverters; } });
#  Object.defineProperty(exports, "isAminoMsgVerifyInvariant", { enumerable: true, get: function () { return aminomessages_3.isAminoMsgVerifyInvariant; } });
# @@ -31,46 +29,42 @@ Object.defineProperty(exports, "isAminoMsgWithdrawValidatorCommission", { enumer
#  var messages_3 = require("./distribution/messages");
#  Object.defineProperty(exports, "distributionTypes", { enumerable: true, get: function () { return messages_3.distributionTypes; } });
#  Object.defineProperty(exports, "isMsgWithdrawDelegatorRewardEncodeObject", { enumerable: true, get: function () { return messages_3.isMsgWithdrawDelegatorRewardEncodeObject; } });
# -var queries_4 = require("./distribution/queries");
# -Object.defineProperty(exports, "setupDistributionExtension", { enumerable: true, get: function () { return queries_4.setupDistributionExtension; } });
# +var queries_3 = require("./distribution/queries");
# +Object.defineProperty(exports, "setupDistributionExtension", { enumerable: true, get: function () { return queries_3.setupDistributionExtension; } });
#  var aminomessages_5 = require("./evidence/aminomessages");
#  Object.defineProperty(exports, "createEvidenceAminoConverters", { enumerable: true, get: function () { return aminomessages_5.createEvidenceAminoConverters; } });
#  Object.defineProperty(exports, "isAminoMsgSubmitEvidence", { enumerable: true, get: function () { return aminomessages_5.isAminoMsgSubmitEvidence; } });
#  var aminomessages_6 = require("./feegrant/aminomessages");
# -Object.defineProperty(exports, "createFeegrantAminoConverters", { enumerable: true, get: function () { return aminomessages_6.createFeegrantAminoConverters; } });
# +Object.defineProperty(exports, "createFreegrantAminoConverters", { enumerable: true, get: function () { return aminomessages_6.createFreegrantAminoConverters; } });
#  var messages_4 = require("./feegrant/messages");
#  Object.defineProperty(exports, "feegrantTypes", { enumerable: true, get: function () { return messages_4.feegrantTypes; } });
# -var queries_5 = require("./feegrant/queries");
# -Object.defineProperty(exports, "setupFeegrantExtension", { enumerable: true, get: function () { return queries_5.setupFeegrantExtension; } });
#  var aminomessages_7 = require("./gov/aminomessages");
#  Object.defineProperty(exports, "createGovAminoConverters", { enumerable: true, get: function () { return aminomessages_7.createGovAminoConverters; } });
#  Object.defineProperty(exports, "isAminoMsgDeposit", { enumerable: true, get: function () { return aminomessages_7.isAminoMsgDeposit; } });
#  Object.defineProperty(exports, "isAminoMsgSubmitProposal", { enumerable: true, get: function () { return aminomessages_7.isAminoMsgSubmitProposal; } });
#  Object.defineProperty(exports, "isAminoMsgVote", { enumerable: true, get: function () { return aminomessages_7.isAminoMsgVote; } });
# -Object.defineProperty(exports, "isAminoMsgVoteWeighted", { enumerable: true, get: function () { return aminomessages_7.isAminoMsgVoteWeighted; } });
#  var messages_5 = require("./gov/messages");
#  Object.defineProperty(exports, "govTypes", { enumerable: true, get: function () { return messages_5.govTypes; } });
#  Object.defineProperty(exports, "isMsgDepositEncodeObject", { enumerable: true, get: function () { return messages_5.isMsgDepositEncodeObject; } });
#  Object.defineProperty(exports, "isMsgSubmitProposalEncodeObject", { enumerable: true, get: function () { return messages_5.isMsgSubmitProposalEncodeObject; } });
#  Object.defineProperty(exports, "isMsgVoteEncodeObject", { enumerable: true, get: function () { return messages_5.isMsgVoteEncodeObject; } });
# -Object.defineProperty(exports, "isMsgVoteWeightedEncodeObject", { enumerable: true, get: function () { return messages_5.isMsgVoteWeightedEncodeObject; } });
# -var queries_6 = require("./gov/queries");
# -Object.defineProperty(exports, "setupGovExtension", { enumerable: true, get: function () { return queries_6.setupGovExtension; } });
# +var queries_4 = require("./gov/queries");
# +Object.defineProperty(exports, "setupGovExtension", { enumerable: true, get: function () { return queries_4.setupGovExtension; } });
#  var aminomessages_8 = require("./ibc/aminomessages");
#  Object.defineProperty(exports, "createIbcAminoConverters", { enumerable: true, get: function () { return aminomessages_8.createIbcAminoConverters; } });
#  Object.defineProperty(exports, "isAminoMsgTransfer", { enumerable: true, get: function () { return aminomessages_8.isAminoMsgTransfer; } });
#  var messages_6 = require("./ibc/messages");
#  Object.defineProperty(exports, "ibcTypes", { enumerable: true, get: function () { return messages_6.ibcTypes; } });
#  Object.defineProperty(exports, "isMsgTransferEncodeObject", { enumerable: true, get: function () { return messages_6.isMsgTransferEncodeObject; } });
# -var queries_7 = require("./ibc/queries");
# -Object.defineProperty(exports, "setupIbcExtension", { enumerable: true, get: function () { return queries_7.setupIbcExtension; } });
# -var queries_8 = require("./mint/queries");
# -Object.defineProperty(exports, "setupMintExtension", { enumerable: true, get: function () { return queries_8.setupMintExtension; } });
# +var queries_5 = require("./ibc/queries");
# +Object.defineProperty(exports, "setupIbcExtension", { enumerable: true, get: function () { return queries_5.setupIbcExtension; } });
# +var queries_6 = require("./mint/queries");
# +Object.defineProperty(exports, "setupMintExtension", { enumerable: true, get: function () { return queries_6.setupMintExtension; } });
#  var aminomessages_9 = require("./slashing/aminomessages");
#  Object.defineProperty(exports, "createSlashingAminoConverters", { enumerable: true, get: function () { return aminomessages_9.createSlashingAminoConverters; } });
#  Object.defineProperty(exports, "isAminoMsgUnjail", { enumerable: true, get: function () { return aminomessages_9.isAminoMsgUnjail; } });
# -var queries_9 = require("./slashing/queries");
# -Object.defineProperty(exports, "setupSlashingExtension", { enumerable: true, get: function () { return queries_9.setupSlashingExtension; } });
# +var queries_7 = require("./slashing/queries");
# +Object.defineProperty(exports, "setupSlashingExtension", { enumerable: true, get: function () { return queries_7.setupSlashingExtension; } });
#  var aminomessages_10 = require("./staking/aminomessages");
#  Object.defineProperty(exports, "createStakingAminoConverters", { enumerable: true, get: function () { return aminomessages_10.createStakingAminoConverters; } });
#  Object.defineProperty(exports, "isAminoMsgBeginRedelegate", { enumerable: true, get: function () { return aminomessages_10.isAminoMsgBeginRedelegate; } });
# @@ -79,19 +73,11 @@ Object.defineProperty(exports, "isAminoMsgDelegate", { enumerable: true, get: fu
#  Object.defineProperty(exports, "isAminoMsgEditValidator", { enumerable: true, get: function () { return aminomessages_10.isAminoMsgEditValidator; } });
#  Object.defineProperty(exports, "isAminoMsgUndelegate", { enumerable: true, get: function () { return aminomessages_10.isAminoMsgUndelegate; } });
#  var messages_7 = require("./staking/messages");
# -Object.defineProperty(exports, "isMsgBeginRedelegateEncodeObject", { enumerable: true, get: function () { return messages_7.isMsgBeginRedelegateEncodeObject; } });
# -Object.defineProperty(exports, "isMsgCreateValidatorEncodeObject", { enumerable: true, get: function () { return messages_7.isMsgCreateValidatorEncodeObject; } });
#  Object.defineProperty(exports, "isMsgDelegateEncodeObject", { enumerable: true, get: function () { return messages_7.isMsgDelegateEncodeObject; } });
# -Object.defineProperty(exports, "isMsgEditValidatorEncodeObject", { enumerable: true, get: function () { return messages_7.isMsgEditValidatorEncodeObject; } });
#  Object.defineProperty(exports, "isMsgUndelegateEncodeObject", { enumerable: true, get: function () { return messages_7.isMsgUndelegateEncodeObject; } });
#  Object.defineProperty(exports, "stakingTypes", { enumerable: true, get: function () { return messages_7.stakingTypes; } });
# -var queries_10 = require("./staking/queries");
# -Object.defineProperty(exports, "setupStakingExtension", { enumerable: true, get: function () { return queries_10.setupStakingExtension; } });
# -var queries_11 = require("./tx/queries");
# -Object.defineProperty(exports, "setupTxExtension", { enumerable: true, get: function () { return queries_11.setupTxExtension; } });
# -var aminomessages_11 = require("./vesting/aminomessages");
# -Object.defineProperty(exports, "createVestingAminoConverters", { enumerable: true, get: function () { return aminomessages_11.createVestingAminoConverters; } });
# -Object.defineProperty(exports, "isAminoMsgCreateVestingAccount", { enumerable: true, get: function () { return aminomessages_11.isAminoMsgCreateVestingAccount; } });
# -var messages_8 = require("./vesting/messages");
# -Object.defineProperty(exports, "vestingTypes", { enumerable: true, get: function () { return messages_8.vestingTypes; } });
# +var queries_8 = require("./staking/queries");
# +Object.defineProperty(exports, "setupStakingExtension", { enumerable: true, get: function () { return queries_8.setupStakingExtension; } });
# +var queries_9 = require("./tx/queries");
# +Object.defineProperty(exports, "setupTxExtension", { enumerable: true, get: function () { return queries_9.setupTxExtension; } });
#  //# sourceMappingURL=index.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/index.js.map b/node_modules/@cosmjs/stargate/build/modules/index.js.map
# index eec87d3..d0d2dd8 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/index.js.map
# +++ b/node_modules/@cosmjs/stargate/build/modules/index.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/modules/index.ts"],"names":[],"mappings":";;;;AAAA,0CAAmE;AAA3C,6GAAA,kBAAkB,OAAA;AAC1C,uDAAmE;AAA1D,2HAAA,0BAA0B,OAAA;AACnC,6CAA8C;AAArC,sGAAA,UAAU,OAAA;AACnB,2CAAsD;AAA7C,8GAAA,mBAAmB,OAAA;AAC5B,sDAM8B;AAH5B,0HAAA,yBAAyB,OAAA;AACzB,oHAAA,mBAAmB,OAAA;AACnB,+GAAA,cAAc,OAAA;AAEhB,4CAAwF;AAA/E,qGAAA,SAAS,OAAA;AAAE,iHAAA,qBAAqB,OAAA;AACzC,0CAAmE;AAA3C,6GAAA,kBAAkB,OAAA;AAC1C,wDAIgC;AAF9B,4HAAA,2BAA2B,OAAA;AAC3B,0HAAA,yBAAyB,OAAA;AAE3B,8DAUsC;AALpC,kIAAA,iCAAiC,OAAA;AACjC,4HAAA,2BAA2B,OAAA;AAC3B,6HAAA,4BAA4B,OAAA;AAC5B,kIAAA,iCAAiC,OAAA;AACjC,sIAAA,qCAAqC,OAAA;AAEvC,oDAIiC;AAH/B,6GAAA,iBAAiB,OAAA;AACjB,oIAAA,wCAAwC,OAAA;AAG1C,kDAA2F;AAA3D,qHAAA,0BAA0B,OAAA;AAC1D,0DAIkC;AAFhC,8HAAA,6BAA6B,OAAA;AAC7B,yHAAA,wBAAwB,OAAA;AAE1B,0DAAyE;AAAhE,8HAAA,6BAA6B,OAAA;AACtC,gDAAoD;AAA3C,yGAAA,aAAa,OAAA;AACtB,8CAA+E;AAAnD,iHAAA,sBAAsB,OAAA;AAClD,qDAU6B;AAL3B,yHAAA,wBAAwB,OAAA;AACxB,kHAAA,iBAAiB,OAAA;AACjB,yHAAA,wBAAwB,OAAA;AACxB,+GAAA,cAAc,OAAA;AACd,uHAAA,sBAAsB,OAAA;AAExB,2CAUwB;AATtB,oGAAA,QAAQ,OAAA;AACR,oHAAA,wBAAwB,OAAA;AACxB,2HAAA,+BAA+B,OAAA;AAC/B,iHAAA,qBAAqB,OAAA;AACrB,yHAAA,6BAA6B,OAAA;AAM/B,yCAA8F;AAAzC,4GAAA,iBAAiB,OAAA;AACtE,qDAAqG;AAA1E,yHAAA,wBAAwB,OAAA;AAAE,mHAAA,kBAAkB,OAAA;AACvE,2CAA8F;AAArF,oGAAA,QAAQ,OAAA;AAAE,qHAAA,yBAAyB,OAAA;AAC5C,yCAAgE;AAAzC,4GAAA,iBAAiB,OAAA;AACxC,0CAA+E;AAA3C,6GAAA,kBAAkB,OAAA;AACtD,0DAA2G;AAAlF,8HAAA,6BAA6B,OAAA;AAAE,iHAAA,gBAAgB,OAAA;AACxE,8CAA+E;AAAtE,iHAAA,sBAAsB,OAAA;AAC/B,0DAYiC;AAN/B,8HAAA,4BAA4B,OAAA;AAC5B,2HAAA,yBAAyB,OAAA;AACzB,2HAAA,yBAAyB,OAAA;AACzB,oHAAA,kBAAkB,OAAA;AAClB,yHAAA,uBAAuB,OAAA;AACvB,sHAAA,oBAAoB,OAAA;AAEtB,+CAY4B;AAX1B,4HAAA,gCAAgC,OAAA;AAChC,4HAAA,gCAAgC,OAAA;AAChC,qHAAA,yBAAyB,OAAA;AACzB,0HAAA,8BAA8B,OAAA;AAC9B,uHAAA,2BAA2B,OAAA;AAM3B,wGAAA,YAAY,OAAA;AAEd,8CAA4E;AAAnE,iHAAA,qBAAqB,OAAA;AAC9B,yCAA6D;AAApD,4GAAA,gBAAgB,OAAA;AACzB,0DAIiC;AAF/B,8HAAA,4BAA4B,OAAA;AAC5B,gIAAA,8BAA8B,OAAA;AAEhC,+CAAkD;AAAzC,wGAAA,YAAY,OAAA"}
# \ No newline at end of file
# +{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/modules/index.ts"],"names":[],"mappings":";;;;AAAA,0CAAmE;AAA3C,6GAAA,kBAAkB,OAAA;AAC1C,uDAAmE;AAA1D,2HAAA,0BAA0B,OAAA;AACnC,6CAA8C;AAArC,sGAAA,UAAU,OAAA;AACnB,sDAM8B;AAH5B,0HAAA,yBAAyB,OAAA;AACzB,oHAAA,mBAAmB,OAAA;AACnB,+GAAA,cAAc,OAAA;AAEhB,4CAAwF;AAA/E,qGAAA,SAAS,OAAA;AAAE,iHAAA,qBAAqB,OAAA;AACzC,0CAAmE;AAA3C,6GAAA,kBAAkB,OAAA;AAC1C,wDAIgC;AAF9B,4HAAA,2BAA2B,OAAA;AAC3B,0HAAA,yBAAyB,OAAA;AAE3B,8DAUsC;AALpC,kIAAA,iCAAiC,OAAA;AACjC,4HAAA,2BAA2B,OAAA;AAC3B,6HAAA,4BAA4B,OAAA;AAC5B,kIAAA,iCAAiC,OAAA;AACjC,sIAAA,qCAAqC,OAAA;AAEvC,oDAIiC;AAH/B,6GAAA,iBAAiB,OAAA;AACjB,oIAAA,wCAAwC,OAAA;AAG1C,kDAA2F;AAA3D,qHAAA,0BAA0B,OAAA;AAC1D,0DAIkC;AAFhC,8HAAA,6BAA6B,OAAA;AAC7B,yHAAA,wBAAwB,OAAA;AAE1B,0DAA0E;AAAjE,+HAAA,8BAA8B,OAAA;AACvC,gDAAoD;AAA3C,yGAAA,aAAa,OAAA;AACtB,qDAQ6B;AAJ3B,yHAAA,wBAAwB,OAAA;AACxB,kHAAA,iBAAiB,OAAA;AACjB,yHAAA,wBAAwB,OAAA;AACxB,+GAAA,cAAc,OAAA;AAEhB,2CAQwB;AAPtB,oGAAA,QAAQ,OAAA;AACR,oHAAA,wBAAwB,OAAA;AACxB,2HAAA,+BAA+B,OAAA;AAC/B,iHAAA,qBAAqB,OAAA;AAKvB,yCAA8F;AAAzC,4GAAA,iBAAiB,OAAA;AACtE,qDAAqG;AAA1E,yHAAA,wBAAwB,OAAA;AAAE,mHAAA,kBAAkB,OAAA;AACvE,2CAA8F;AAArF,oGAAA,QAAQ,OAAA;AAAE,qHAAA,yBAAyB,OAAA;AAC5C,yCAAgE;AAAzC,4GAAA,iBAAiB,OAAA;AACxC,0CAA+E;AAA3C,6GAAA,kBAAkB,OAAA;AACtD,0DAA2G;AAAlF,8HAAA,6BAA6B,OAAA;AAAE,iHAAA,gBAAgB,OAAA;AACxE,8CAA+E;AAAtE,iHAAA,sBAAsB,OAAA;AAC/B,0DAYiC;AAN/B,8HAAA,4BAA4B,OAAA;AAC5B,2HAAA,yBAAyB,OAAA;AACzB,2HAAA,yBAAyB,OAAA;AACzB,oHAAA,kBAAkB,OAAA;AAClB,yHAAA,uBAAuB,OAAA;AACvB,sHAAA,oBAAoB,OAAA;AAEtB,+CAM4B;AAL1B,qHAAA,yBAAyB,OAAA;AACzB,uHAAA,2BAA2B,OAAA;AAG3B,wGAAA,YAAY,OAAA;AAEd,6CAA4E;AAAnE,gHAAA,qBAAqB,OAAA;AAC9B,wCAA6D;AAApD,2GAAA,gBAAgB,OAAA"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/mint/queries.spec.d.ts b/node_modules/@cosmjs/stargate/build/modules/mint/queries.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/mint/queries.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/modules/mint/queries.spec.js b/node_modules/@cosmjs/stargate/build/modules/mint/queries.spec.js
# new file mode 100644
# index 0000000..214eb11
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/mint/queries.spec.js
# @@ -0,0 +1,48 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
# +const queryclient_1 = require("../../queryclient");
# +const testutils_spec_1 = require("../../testutils.spec");
# +const queries_1 = require("./queries");
# +async function makeClientWithMint(rpcUrl) {
# +    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(rpcUrl);
# +    return [queryclient_1.QueryClient.withExtensions(tmClient, queries_1.setupMintExtension), tmClient];
# +}
# +describe("MintExtension", () => {
# +    describe("params", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithMint(testutils_spec_1.simapp.tendermintUrl);
# +            const params = await client.mint.params();
# +            expect(params.blocksPerYear.toNumber()).toBeGreaterThan(100000);
# +            expect(params.blocksPerYear.toNumber()).toBeLessThan(100000000);
# +            expect(params.goalBonded.toString()).toEqual("0.67");
# +            expect(params.inflationMin.toString()).toEqual("0.07");
# +            expect(params.inflationMax.toString()).toEqual("0.2");
# +            expect(params.inflationRateChange.toString()).toEqual("0.13");
# +            expect(params.mintDenom).toEqual(testutils_spec_1.simapp.denomStaking);
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("inflation", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithMint(testutils_spec_1.simapp.tendermintUrl);
# +            const inflation = await client.mint.inflation();
# +            expect(inflation.toFloatApproximation()).toBeGreaterThan(0.13);
# +            expect(inflation.toFloatApproximation()).toBeLessThan(0.1301);
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("annualProvisions", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithMint(testutils_spec_1.simapp.tendermintUrl);
# +            const annualProvisions = await client.mint.annualProvisions();
# +            expect(annualProvisions.toFloatApproximation()).toBeGreaterThan(5400000000);
# +            expect(annualProvisions.toFloatApproximation()).toBeLessThan(5500000000);
# +            tmClient.disconnect();
# +        });
# +    });
# +});
# +//# sourceMappingURL=queries.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/mint/queries.spec.js.map b/node_modules/@cosmjs/stargate/build/modules/mint/queries.spec.js.map
# new file mode 100644
# index 0000000..64e1571
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/mint/queries.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"queries.spec.js","sourceRoot":"","sources":["../../../src/modules/mint/queries.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/slashing/queries.spec.d.ts b/node_modules/@cosmjs/stargate/build/modules/slashing/queries.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/slashing/queries.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/modules/slashing/queries.spec.js b/node_modules/@cosmjs/stargate/build/modules/slashing/queries.spec.js
# new file mode 100644
# index 0000000..d084ba3
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/slashing/queries.spec.js
# @@ -0,0 +1,34 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +/* eslint-disable @typescript-eslint/naming-convention */
# +const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
# +const queryclient_1 = require("../../queryclient");
# +const testutils_spec_1 = require("../../testutils.spec");
# +const queries_1 = require("./queries");
# +async function makeClientWithSlashing(rpcUrl) {
# +    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(rpcUrl);
# +    return [queryclient_1.QueryClient.withExtensions(tmClient, queries_1.setupSlashingExtension), tmClient];
# +}
# +describe("SlashingExtension", () => {
# +    describe("signingInfos", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithSlashing(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.slashing.signingInfos();
# +            expect(response.info).toBeDefined();
# +            expect(response.info).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("params", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithSlashing(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.slashing.params();
# +            expect(response.params).toBeDefined();
# +            expect(response.params).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +});
# +//# sourceMappingURL=queries.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/slashing/queries.spec.js.map b/node_modules/@cosmjs/stargate/build/modules/slashing/queries.spec.js.map
# new file mode 100644
# index 0000000..a8884fb
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/slashing/queries.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"queries.spec.js","sourceRoot":"","sources":["../../../src/modules/slashing/queries.spec.ts"],"names":[],"mappings":";;AAAA,yDAAyD;AACzD,2DAA4D;AAE5D,mDAAgD;AAChD,yDAAoE;AACpE,uCAAsE;AAEtE,KAAK,UAAU,sBAAsB,CACnC,MAAc;IAEd,MAAM,QAAQ,GAAG,MAAM,mCAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC1D,OAAO,CAAC,yBAAW,CAAC,cAAc,CAAC,QAAQ,EAAE,gCAAsB,CAAC,EAAE,QAAQ,CAAC,CAAC;AAClF,CAAC;AAED,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;YACrB,IAAA,qCAAoB,GAAE,CAAC;YACvB,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,GAAG,MAAM,sBAAsB,CAAC,uBAAM,CAAC,aAAa,CAAC,CAAC;YAE9E,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;YACtD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;YACpC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;YAErC,QAAQ,CAAC,UAAU,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;YACrB,IAAA,qCAAoB,GAAE,CAAC;YACvB,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,GAAG,MAAM,sBAAsB,CAAC,uBAAM,CAAC,aAAa,CAAC,CAAC;YAE9E,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;YAChD,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YACtC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;YAEvC,QAAQ,CAAC,UAAU,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.d.ts b/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.d.ts
# index 343b434..d02e6e2 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.d.ts
# +++ b/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.d.ts
# @@ -1,4 +1,4 @@
# -import { AminoMsg, Coin, Pubkey } from "@cosmjs/amino";
# +import { AminoMsg, Coin } from "@cosmjs/amino";
#  import { AminoConverter } from "../..";
#  /** The initial commission rates to be used for creating a validator */
#  interface CommissionRates {
# @@ -14,7 +14,6 @@ interface Description {
#      readonly security_contact: string;
#      readonly details: string;
#  }
# -export declare function protoDecimalToJson(decimal: string): string;
#  /** Creates a new validator. */
#  export interface AminoMsgCreateValidator extends AminoMsg {
#      readonly type: "cosmos-sdk/MsgCreateValidator";
# @@ -26,8 +25,8 @@ export interface AminoMsgCreateValidator extends AminoMsg {
#          readonly delegator_address: string;
#          /** Bech32 encoded validator address */
#          readonly validator_address: string;
# -        /** Public key */
# -        readonly pubkey: Pubkey;
# +        /** Bech32 encoded public key */
# +        readonly pubkey: string;
#          readonly value: Coin;
#      };
#  }
# @@ -39,20 +38,8 @@ export interface AminoMsgEditValidator extends AminoMsg {
#          readonly description: Description;
#          /** Bech32 encoded validator address */
#          readonly validator_address: string;
# -        /**
# -         * The new value for the comission rate.
# -         *
# -         * An empty string in the protobuf document means "do not change".
# -         * In Amino JSON this empty string becomes undefined (omitempty)
# -         */
# -        readonly commission_rate: string | undefined;
# -        /**
# -         * The new value for the comission rate.
# -         *
# -         * An empty string in the protobuf document means "do not change".
# -         * In Amino JSON this empty string becomes undefined (omitempty)
# -         */
# -        readonly min_self_delegation: string | undefined;
# +        readonly commission_rate: string;
# +        readonly min_self_delegation: string;
#      };
#  }
#  export declare function isAminoMsgEditValidator(msg: AminoMsg): msg is AminoMsgEditValidator;
# @@ -98,5 +85,5 @@ export interface AminoMsgUndelegate extends AminoMsg {
#      };
#  }
#  export declare function isAminoMsgUndelegate(msg: AminoMsg): msg is AminoMsgUndelegate;
# -export declare function createStakingAminoConverters(): Record<string, AminoConverter | "not_supported_by_chain">;
# +export declare function createStakingAminoConverters(prefix: string): Record<string, AminoConverter | "not_supported_by_chain">;
#  export {};
# diff --git a/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.js b/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.js
# index 9e16ff7..bdac4e3 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.js
# +++ b/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.js
# @@ -1,19 +1,10 @@
#  "use strict";
#  Object.defineProperty(exports, "__esModule", { value: true });
# -exports.createStakingAminoConverters = exports.isAminoMsgUndelegate = exports.isAminoMsgBeginRedelegate = exports.isAminoMsgDelegate = exports.isAminoMsgEditValidator = exports.isAminoMsgCreateValidator = exports.protoDecimalToJson = void 0;
# -const math_1 = require("@cosmjs/math");
# -const proto_signing_1 = require("@cosmjs/proto-signing");
# +exports.createStakingAminoConverters = exports.isAminoMsgUndelegate = exports.isAminoMsgBeginRedelegate = exports.isAminoMsgDelegate = exports.isAminoMsgEditValidator = exports.isAminoMsgCreateValidator = void 0;
# +/* eslint-disable @typescript-eslint/naming-convention */
# +const amino_1 = require("@cosmjs/amino");
# +const encoding_1 = require("@cosmjs/encoding");
#  const utils_1 = require("@cosmjs/utils");
# -function protoDecimalToJson(decimal) {
# -    const parsed = math_1.Decimal.fromAtomics(decimal, 18);
# -    const [whole, fractional] = parsed.toString().split(".");
# -    return `${whole}.${(fractional ?? "").padEnd(18, "0")}`;
# -}
# -exports.protoDecimalToJson = protoDecimalToJson;
# -function jsonDecimalToProto(decimal) {
# -    const parsed = math_1.Decimal.fromUserInput(decimal, 18);
# -    return parsed.atomics;
# -}
#  function isAminoMsgCreateValidator(msg) {
#      return msg.type === "cosmos-sdk/MsgCreateValidator";
#  }
# @@ -34,7 +25,7 @@ function isAminoMsgUndelegate(msg) {
#      return msg.type === "cosmos-sdk/MsgUndelegate";
#  }
#  exports.isAminoMsgUndelegate = isAminoMsgUndelegate;
# -function createStakingAminoConverters() {
# +function createStakingAminoConverters(prefix) {
#      return {
#          "/cosmos.staking.v1beta1.MsgBeginRedelegate": {
#              aminoType: "cosmos-sdk/MsgBeginRedelegate",
# @@ -70,18 +61,25 @@ function createStakingAminoConverters() {
#                          details: description.details,
#                      },
#                      commission: {
# -                        rate: protoDecimalToJson(commission.rate),
# -                        max_rate: protoDecimalToJson(commission.maxRate),
# -                        max_change_rate: protoDecimalToJson(commission.maxChangeRate),
# +                        rate: commission.rate,
# +                        max_rate: commission.maxRate,
# +                        max_change_rate: commission.maxChangeRate,
#                      },
#                      min_self_delegation: minSelfDelegation,
#                      delegator_address: delegatorAddress,
#                      validator_address: validatorAddress,
# -                    pubkey: (0, proto_signing_1.decodePubkey)(pubkey),
# +                    pubkey: (0, amino_1.encodeBech32Pubkey)({
# +                        type: "tendermint/PubKeySecp256k1",
# +                        value: (0, encoding_1.toBase64)(pubkey.value),
# +                    }, prefix),
#                      value: value,
#                  };
#              },
#              fromAmino: ({ description, commission, min_self_delegation, delegator_address, validator_address, pubkey, value, }) => {
# +                const decodedPubkey = (0, amino_1.decodeBech32Pubkey)(pubkey);
# +                if (decodedPubkey.type !== "tendermint/PubKeySecp256k1") {
# +                    throw new Error("Only Secp256k1 public keys are supported");
# +                }
#                  return {
#                      description: {
#                          moniker: description.moniker,
# @@ -91,14 +89,17 @@ function createStakingAminoConverters() {
#                          details: description.details,
#                      },
#                      commission: {
# -                        rate: jsonDecimalToProto(commission.rate),
# -                        maxRate: jsonDecimalToProto(commission.max_rate),
# -                        maxChangeRate: jsonDecimalToProto(commission.max_change_rate),
# +                        rate: commission.rate,
# +                        maxRate: commission.max_rate,
# +                        maxChangeRate: commission.max_change_rate,
#                      },
#                      minSelfDelegation: min_self_delegation,
#                      delegatorAddress: delegator_address,
#                      validatorAddress: validator_address,
# -                    pubkey: (0, proto_signing_1.encodePubkey)(pubkey),
# +                    pubkey: {
# +                        typeUrl: "/cosmos.crypto.secp256k1.PubKey",
# +                        value: (0, encoding_1.fromBase64)(decodedPubkey.value),
# +                    },
#                      value: value,
#                  };
#              },
# @@ -131,10 +132,8 @@ function createStakingAminoConverters() {
#                          security_contact: description.securityContact,
#                          details: description.details,
#                      },
# -                    // empty string in the protobuf document means "do not change"
# -                    commission_rate: commissionRate ? protoDecimalToJson(commissionRate) : undefined,
# -                    // empty string in the protobuf document means "do not change"
# -                    min_self_delegation: minSelfDelegation ? minSelfDelegation : undefined,
# +                    commission_rate: commissionRate,
# +                    min_self_delegation: minSelfDelegation,
#                      validator_address: validatorAddress,
#                  };
#              },
# @@ -146,10 +145,8 @@ function createStakingAminoConverters() {
#                      securityContact: description.security_contact,
#                      details: description.details,
#                  },
# -                // empty string in the protobuf document means "do not change"
# -                commissionRate: commission_rate ? jsonDecimalToProto(commission_rate) : "",
# -                // empty string in the protobuf document means "do not change"
# -                minSelfDelegation: min_self_delegation ?? "",
# +                commissionRate: commission_rate,
# +                minSelfDelegation: min_self_delegation,
#                  validatorAddress: validator_address,
#              }),
#          },
# diff --git a/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.js.map b/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.js.map
# index 974904e..f09df03 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.js.map
# +++ b/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"aminomessages.js","sourceRoot":"","sources":["../../../src/modules/staking/aminomessages.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# +{"version":3,"file":"aminomessages.js","sourceRoot":"","sources":["../../../src/modules/staking/aminomessages.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.spec.d.ts b/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.spec.js b/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.spec.js
# new file mode 100644
# index 0000000..2d80e25
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.spec.js
# @@ -0,0 +1,314 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +/* eslint-disable @typescript-eslint/naming-convention */
# +const amino_1 = require("@cosmjs/amino");
# +const encoding_1 = require("@cosmjs/encoding");
# +const proto_signing_1 = require("@cosmjs/proto-signing");
# +const aminotypes_1 = require("../../aminotypes");
# +const aminomessages_1 = require("./aminomessages");
# +describe("AminoTypes", () => {
# +    describe("toAmino", () => {
# +        it("works for MsgBeginRedelegate", () => {
# +            const msg = {
# +                delegatorAddress: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                validatorSrcAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                validatorDstAddress: "cosmos1xy4yqngt0nlkdcenxymg8tenrghmek4nmqm28k",
# +                amount: (0, proto_signing_1.coin)(1234, "ucosm"),
# +            };
# +            const aminoTypes = new aminotypes_1.AminoTypes((0, aminomessages_1.createStakingAminoConverters)("cosmos"));
# +            const aminoMsg = aminoTypes.toAmino({
# +                typeUrl: "/cosmos.staking.v1beta1.MsgBeginRedelegate",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "cosmos-sdk/MsgBeginRedelegate",
# +                value: {
# +                    delegator_address: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    validator_src_address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    validator_dst_address: "cosmos1xy4yqngt0nlkdcenxymg8tenrghmek4nmqm28k",
# +                    amount: (0, proto_signing_1.coin)(1234, "ucosm"),
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +        it("works for MsgCreateValidator", () => {
# +            const msg = {
# +                description: {
# +                    moniker: "validator",
# +                    identity: "me",
# +                    website: "valid.com",
# +                    securityContact: "Hamburglar",
# +                    details: "...",
# +                },
# +                commission: {
# +                    rate: "0.2",
# +                    maxRate: "0.3",
# +                    maxChangeRate: "0.1",
# +                },
# +                minSelfDelegation: "123",
# +                delegatorAddress: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                validatorAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                pubkey: {
# +                    typeUrl: "/cosmos.crypto.secp256k1.PubKey",
# +                    value: (0, encoding_1.fromBase64)("A08EGB7ro1ORuFhjOnZcSgwYlpe0DSFjVNUIkNNQxwKQ"),
# +                },
# +                value: (0, proto_signing_1.coin)(1234, "ucosm"),
# +            };
# +            const aminoTypes = new aminotypes_1.AminoTypes((0, aminomessages_1.createStakingAminoConverters)("cosmos"));
# +            const aminoMsg = aminoTypes.toAmino({
# +                typeUrl: "/cosmos.staking.v1beta1.MsgCreateValidator",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "cosmos-sdk/MsgCreateValidator",
# +                value: {
# +                    description: {
# +                        moniker: "validator",
# +                        identity: "me",
# +                        website: "valid.com",
# +                        security_contact: "Hamburglar",
# +                        details: "...",
# +                    },
# +                    commission: {
# +                        rate: "0.2",
# +                        max_rate: "0.3",
# +                        max_change_rate: "0.1",
# +                    },
# +                    min_self_delegation: "123",
# +                    delegator_address: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    validator_address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    pubkey: (0, amino_1.encodeBech32Pubkey)({ type: "tendermint/PubKeySecp256k1", value: "A08EGB7ro1ORuFhjOnZcSgwYlpe0DSFjVNUIkNNQxwKQ" }, "cosmos"),
# +                    value: (0, proto_signing_1.coin)(1234, "ucosm"),
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +        it("works for MsgDelegate", () => {
# +            const msg = {
# +                delegatorAddress: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                validatorAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                amount: (0, proto_signing_1.coin)(1234, "ucosm"),
# +            };
# +            const aminoTypes = new aminotypes_1.AminoTypes((0, aminomessages_1.createStakingAminoConverters)("cosmos"));
# +            const aminoMsg = aminoTypes.toAmino({
# +                typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "cosmos-sdk/MsgDelegate",
# +                value: {
# +                    delegator_address: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    validator_address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    amount: (0, proto_signing_1.coin)(1234, "ucosm"),
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +        it("works for MsgEditValidator", () => {
# +            const msg = {
# +                description: {
# +                    moniker: "validator",
# +                    identity: "me",
# +                    website: "valid.com",
# +                    securityContact: "Hamburglar",
# +                    details: "...",
# +                },
# +                commissionRate: "0.2",
# +                minSelfDelegation: "123",
# +                validatorAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +            };
# +            const aminoTypes = new aminotypes_1.AminoTypes((0, aminomessages_1.createStakingAminoConverters)("cosmos"));
# +            const aminoMsg = aminoTypes.toAmino({
# +                typeUrl: "/cosmos.staking.v1beta1.MsgEditValidator",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "cosmos-sdk/MsgEditValidator",
# +                value: {
# +                    description: {
# +                        moniker: "validator",
# +                        identity: "me",
# +                        website: "valid.com",
# +                        security_contact: "Hamburglar",
# +                        details: "...",
# +                    },
# +                    commission_rate: "0.2",
# +                    min_self_delegation: "123",
# +                    validator_address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +        it("works for MsgUndelegate", () => {
# +            const msg = {
# +                delegatorAddress: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                validatorAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                amount: (0, proto_signing_1.coin)(1234, "ucosm"),
# +            };
# +            const aminoTypes = new aminotypes_1.AminoTypes((0, aminomessages_1.createStakingAminoConverters)("cosmos"));
# +            const aminoMsg = aminoTypes.toAmino({
# +                typeUrl: "/cosmos.staking.v1beta1.MsgUndelegate",
# +                value: msg,
# +            });
# +            const expected = {
# +                type: "cosmos-sdk/MsgUndelegate",
# +                value: {
# +                    delegator_address: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    validator_address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    amount: (0, proto_signing_1.coin)(1234, "ucosm"),
# +                },
# +            };
# +            expect(aminoMsg).toEqual(expected);
# +        });
# +    });
# +    describe("fromAmino", () => {
# +        it("works for MsgBeginRedelegate", () => {
# +            const aminoMsg = {
# +                type: "cosmos-sdk/MsgBeginRedelegate",
# +                value: {
# +                    delegator_address: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    validator_src_address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    validator_dst_address: "cosmos1xy4yqngt0nlkdcenxymg8tenrghmek4nmqm28k",
# +                    amount: (0, proto_signing_1.coin)(1234, "ucosm"),
# +                },
# +            };
# +            const msg = new aminotypes_1.AminoTypes((0, aminomessages_1.createStakingAminoConverters)("cosmos")).fromAmino(aminoMsg);
# +            const expectedValue = {
# +                delegatorAddress: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                validatorSrcAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                validatorDstAddress: "cosmos1xy4yqngt0nlkdcenxymg8tenrghmek4nmqm28k",
# +                amount: (0, proto_signing_1.coin)(1234, "ucosm"),
# +            };
# +            expect(msg).toEqual({
# +                typeUrl: "/cosmos.staking.v1beta1.MsgBeginRedelegate",
# +                value: expectedValue,
# +            });
# +        });
# +        it("works for MsgCreateValidator", () => {
# +            const aminoMsg = {
# +                type: "cosmos-sdk/MsgCreateValidator",
# +                value: {
# +                    description: {
# +                        moniker: "validator",
# +                        identity: "me",
# +                        website: "valid.com",
# +                        security_contact: "Hamburglar",
# +                        details: "...",
# +                    },
# +                    commission: {
# +                        rate: "0.2",
# +                        max_rate: "0.3",
# +                        max_change_rate: "0.1",
# +                    },
# +                    min_self_delegation: "123",
# +                    delegator_address: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    validator_address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    pubkey: (0, amino_1.encodeBech32Pubkey)({ type: "tendermint/PubKeySecp256k1", value: "A08EGB7ro1ORuFhjOnZcSgwYlpe0DSFjVNUIkNNQxwKQ" }, "cosmos"),
# +                    value: (0, proto_signing_1.coin)(1234, "ucosm"),
# +                },
# +            };
# +            const msg = new aminotypes_1.AminoTypes((0, aminomessages_1.createStakingAminoConverters)("cosmos")).fromAmino(aminoMsg);
# +            const expectedValue = {
# +                description: {
# +                    moniker: "validator",
# +                    identity: "me",
# +                    website: "valid.com",
# +                    securityContact: "Hamburglar",
# +                    details: "...",
# +                },
# +                commission: {
# +                    rate: "0.2",
# +                    maxRate: "0.3",
# +                    maxChangeRate: "0.1",
# +                },
# +                minSelfDelegation: "123",
# +                delegatorAddress: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                validatorAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                pubkey: {
# +                    typeUrl: "/cosmos.crypto.secp256k1.PubKey",
# +                    value: (0, encoding_1.fromBase64)("A08EGB7ro1ORuFhjOnZcSgwYlpe0DSFjVNUIkNNQxwKQ"),
# +                },
# +                value: (0, proto_signing_1.coin)(1234, "ucosm"),
# +            };
# +            expect(msg).toEqual({
# +                typeUrl: "/cosmos.staking.v1beta1.MsgCreateValidator",
# +                value: expectedValue,
# +            });
# +        });
# +        it("works for MsgDelegate", () => {
# +            const aminoMsg = {
# +                type: "cosmos-sdk/MsgDelegate",
# +                value: {
# +                    delegator_address: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    validator_address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    amount: (0, proto_signing_1.coin)(1234, "ucosm"),
# +                },
# +            };
# +            const msg = new aminotypes_1.AminoTypes((0, aminomessages_1.createStakingAminoConverters)("cosmos")).fromAmino(aminoMsg);
# +            const expectedValue = {
# +                delegatorAddress: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                validatorAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                amount: (0, proto_signing_1.coin)(1234, "ucosm"),
# +            };
# +            expect(msg).toEqual({
# +                typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                value: expectedValue,
# +            });
# +        });
# +        it("works for MsgEditValidator", () => {
# +            const aminoMsg = {
# +                type: "cosmos-sdk/MsgEditValidator",
# +                value: {
# +                    description: {
# +                        moniker: "validator",
# +                        identity: "me",
# +                        website: "valid.com",
# +                        security_contact: "Hamburglar",
# +                        details: "...",
# +                    },
# +                    commission_rate: "0.2",
# +                    min_self_delegation: "123",
# +                    validator_address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                },
# +            };
# +            const msg = new aminotypes_1.AminoTypes((0, aminomessages_1.createStakingAminoConverters)("cosmos")).fromAmino(aminoMsg);
# +            const expectedValue = {
# +                description: {
# +                    moniker: "validator",
# +                    identity: "me",
# +                    website: "valid.com",
# +                    securityContact: "Hamburglar",
# +                    details: "...",
# +                },
# +                commissionRate: "0.2",
# +                minSelfDelegation: "123",
# +                validatorAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +            };
# +            expect(msg).toEqual({
# +                typeUrl: "/cosmos.staking.v1beta1.MsgEditValidator",
# +                value: expectedValue,
# +            });
# +        });
# +        it("works for MsgUndelegate", () => {
# +            const aminoMsg = {
# +                type: "cosmos-sdk/MsgUndelegate",
# +                value: {
# +                    delegator_address: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                    validator_address: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                    amount: (0, proto_signing_1.coin)(1234, "ucosm"),
# +                },
# +            };
# +            const msg = new aminotypes_1.AminoTypes((0, aminomessages_1.createStakingAminoConverters)("cosmos")).fromAmino(aminoMsg);
# +            const expectedValue = {
# +                delegatorAddress: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +                validatorAddress: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +                amount: (0, proto_signing_1.coin)(1234, "ucosm"),
# +            };
# +            expect(msg).toEqual({
# +                typeUrl: "/cosmos.staking.v1beta1.MsgUndelegate",
# +                value: expectedValue,
# +            });
# +        });
# +    });
# +});
# +//# sourceMappingURL=aminomessages.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.spec.js.map b/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.spec.js.map
# new file mode 100644
# index 0000000..63bc9a6
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"aminomessages.spec.js","sourceRoot":"","sources":["../../../src/modules/staking/aminomessages.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/staking/messages.d.ts b/node_modules/@cosmjs/stargate/build/modules/staking/messages.d.ts
# index 4fafdcd..03a5af7 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/staking/messages.d.ts
# +++ b/node_modules/@cosmjs/stargate/build/modules/staking/messages.d.ts
# @@ -1,26 +1,11 @@
#  import { EncodeObject, GeneratedType } from "@cosmjs/proto-signing";
# -import { MsgBeginRedelegate, MsgCreateValidator, MsgDelegate, MsgEditValidator, MsgUndelegate } from "cosmjs-types/cosmos/staking/v1beta1/tx";
# +import { MsgDelegate, MsgUndelegate } from "cosmjs-types/cosmos/staking/v1beta1/tx";
#  export declare const stakingTypes: ReadonlyArray<[string, GeneratedType]>;
# -export interface MsgBeginRedelegateEncodeObject extends EncodeObject {
# -    readonly typeUrl: "/cosmos.staking.v1beta1.MsgBeginRedelegate";
# -    readonly value: Partial<MsgBeginRedelegate>;
# -}
# -export declare function isMsgBeginRedelegateEncodeObject(o: EncodeObject): o is MsgBeginRedelegateEncodeObject;
# -export interface MsgCreateValidatorEncodeObject extends EncodeObject {
# -    readonly typeUrl: "/cosmos.staking.v1beta1.MsgCreateValidator";
# -    readonly value: Partial<MsgCreateValidator>;
# -}
# -export declare function isMsgCreateValidatorEncodeObject(o: EncodeObject): o is MsgCreateValidatorEncodeObject;
#  export interface MsgDelegateEncodeObject extends EncodeObject {
#      readonly typeUrl: "/cosmos.staking.v1beta1.MsgDelegate";
#      readonly value: Partial<MsgDelegate>;
#  }
#  export declare function isMsgDelegateEncodeObject(object: EncodeObject): object is MsgDelegateEncodeObject;
# -export interface MsgEditValidatorEncodeObject extends EncodeObject {
# -    readonly typeUrl: "/cosmos.staking.v1beta1.MsgEditValidator";
# -    readonly value: Partial<MsgEditValidator>;
# -}
# -export declare function isMsgEditValidatorEncodeObject(o: EncodeObject): o is MsgEditValidatorEncodeObject;
#  export interface MsgUndelegateEncodeObject extends EncodeObject {
#      readonly typeUrl: "/cosmos.staking.v1beta1.MsgUndelegate";
#      readonly value: Partial<MsgUndelegate>;
# diff --git a/node_modules/@cosmjs/stargate/build/modules/staking/messages.js b/node_modules/@cosmjs/stargate/build/modules/staking/messages.js
# index b669e6b..75d80ea 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/staking/messages.js
# +++ b/node_modules/@cosmjs/stargate/build/modules/staking/messages.js
# @@ -1,6 +1,6 @@
#  "use strict";
#  Object.defineProperty(exports, "__esModule", { value: true });
# -exports.isMsgUndelegateEncodeObject = exports.isMsgEditValidatorEncodeObject = exports.isMsgDelegateEncodeObject = exports.isMsgCreateValidatorEncodeObject = exports.isMsgBeginRedelegateEncodeObject = exports.stakingTypes = void 0;
# +exports.isMsgUndelegateEncodeObject = exports.isMsgDelegateEncodeObject = exports.stakingTypes = void 0;
#  const tx_1 = require("cosmjs-types/cosmos/staking/v1beta1/tx");
#  exports.stakingTypes = [
#      ["/cosmos.staking.v1beta1.MsgBeginRedelegate", tx_1.MsgBeginRedelegate],
# @@ -9,22 +9,10 @@ exports.stakingTypes = [
#      ["/cosmos.staking.v1beta1.MsgEditValidator", tx_1.MsgEditValidator],
#      ["/cosmos.staking.v1beta1.MsgUndelegate", tx_1.MsgUndelegate],
#  ];
# -function isMsgBeginRedelegateEncodeObject(o) {
# -    return o.typeUrl === "/cosmos.staking.v1beta1.MsgBeginRedelegate";
# -}
# -exports.isMsgBeginRedelegateEncodeObject = isMsgBeginRedelegateEncodeObject;
# -function isMsgCreateValidatorEncodeObject(o) {
# -    return o.typeUrl === "/cosmos.staking.v1beta1.MsgCreateValidator";
# -}
# -exports.isMsgCreateValidatorEncodeObject = isMsgCreateValidatorEncodeObject;
#  function isMsgDelegateEncodeObject(object) {
#      return object.typeUrl === "/cosmos.staking.v1beta1.MsgDelegate";
#  }
#  exports.isMsgDelegateEncodeObject = isMsgDelegateEncodeObject;
# -function isMsgEditValidatorEncodeObject(o) {
# -    return o.typeUrl === "/cosmos.staking.v1beta1.MsgEditValidator";
# -}
# -exports.isMsgEditValidatorEncodeObject = isMsgEditValidatorEncodeObject;
#  function isMsgUndelegateEncodeObject(object) {
#      return object.typeUrl === "/cosmos.staking.v1beta1.MsgUndelegate";
#  }
# diff --git a/node_modules/@cosmjs/stargate/build/modules/staking/messages.js.map b/node_modules/@cosmjs/stargate/build/modules/staking/messages.js.map
# index 613b464..afb0b03 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/staking/messages.js.map
# +++ b/node_modules/@cosmjs/stargate/build/modules/staking/messages.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"messages.js","sourceRoot":"","sources":["../../../src/modules/staking/messages.ts"],"names":[],"mappings":";;;AACA,+DAMgD;AAEnC,QAAA,YAAY,GAA2C;IAClE,CAAC,4CAA4C,EAAE,uBAAkB,CAAC;IAClE,CAAC,4CAA4C,EAAE,uBAAkB,CAAC;IAClE,CAAC,qCAAqC,EAAE,gBAAW,CAAC;IACpD,CAAC,0CAA0C,EAAE,qBAAgB,CAAC;IAC9D,CAAC,uCAAuC,EAAE,kBAAa,CAAC;CACzD,CAAC;AAOF,SAAgB,gCAAgC,CAAC,CAAe;IAC9D,OAAQ,CAAoC,CAAC,OAAO,KAAK,4CAA4C,CAAC;AACxG,CAAC;AAFD,4EAEC;AAOD,SAAgB,gCAAgC,CAAC,CAAe;IAC9D,OAAQ,CAAoC,CAAC,OAAO,KAAK,4CAA4C,CAAC;AACxG,CAAC;AAFD,4EAEC;AAOD,SAAgB,yBAAyB,CAAC,MAAoB;IAC5D,OAAQ,MAAkC,CAAC,OAAO,KAAK,qCAAqC,CAAC;AAC/F,CAAC;AAFD,8DAEC;AAOD,SAAgB,8BAA8B,CAAC,CAAe;IAC5D,OAAQ,CAAkC,CAAC,OAAO,KAAK,0CAA0C,CAAC;AACpG,CAAC;AAFD,wEAEC;AAOD,SAAgB,2BAA2B,CAAC,MAAoB;IAC9D,OAAQ,MAAoC,CAAC,OAAO,KAAK,uCAAuC,CAAC;AACnG,CAAC;AAFD,kEAEC"}
# \ No newline at end of file
# +{"version":3,"file":"messages.js","sourceRoot":"","sources":["../../../src/modules/staking/messages.ts"],"names":[],"mappings":";;;AACA,+DAMgD;AAEnC,QAAA,YAAY,GAA2C;IAClE,CAAC,4CAA4C,EAAE,uBAAkB,CAAC;IAClE,CAAC,4CAA4C,EAAE,uBAAkB,CAAC;IAClE,CAAC,qCAAqC,EAAE,gBAAW,CAAC;IACpD,CAAC,0CAA0C,EAAE,qBAAgB,CAAC;IAC9D,CAAC,uCAAuC,EAAE,kBAAa,CAAC;CACzD,CAAC;AAOF,SAAgB,yBAAyB,CAAC,MAAoB;IAC5D,OAAQ,MAAkC,CAAC,OAAO,KAAK,qCAAqC,CAAC;AAC/F,CAAC;AAFD,8DAEC;AAOD,SAAgB,2BAA2B,CAAC,MAAoB;IAC9D,OAAQ,MAAoC,CAAC,OAAO,KAAK,uCAAuC,CAAC;AACnG,CAAC;AAFD,kEAEC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/staking/queries.d.ts b/node_modules/@cosmjs/stargate/build/modules/staking/queries.d.ts
# index 9bef358..f7f6531 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/staking/queries.d.ts
# +++ b/node_modules/@cosmjs/stargate/build/modules/staking/queries.d.ts
# @@ -1,7 +1,7 @@
#  import { QueryDelegationResponse, QueryDelegatorDelegationsResponse, QueryDelegatorUnbondingDelegationsResponse, QueryDelegatorValidatorResponse, QueryDelegatorValidatorsResponse, QueryHistoricalInfoResponse, QueryParamsResponse, QueryPoolResponse, QueryRedelegationsResponse, QueryUnbondingDelegationResponse, QueryValidatorDelegationsResponse, QueryValidatorResponse, QueryValidatorsResponse, QueryValidatorUnbondingDelegationsResponse } from "cosmjs-types/cosmos/staking/v1beta1/query";
#  import { BondStatus } from "cosmjs-types/cosmos/staking/v1beta1/staking";
#  import { QueryClient } from "../../queryclient";
# -export declare type BondStatusString = keyof Pick<typeof BondStatus, "BOND_STATUS_BONDED" | "BOND_STATUS_UNBONDED" | "BOND_STATUS_UNBONDING"> | "";
# +export declare type BondStatusString = Exclude<keyof typeof BondStatus, "BOND_STATUS_UNSPECIFIED">;
#  export interface StakingExtension {
#      readonly staking: {
#          delegation: (delegatorAddress: string, validatorAddress: string) => Promise<QueryDelegationResponse>;
# diff --git a/node_modules/@cosmjs/stargate/build/modules/staking/queries.js.map b/node_modules/@cosmjs/stargate/build/modules/staking/queries.js.map
# index 8256e60..6a8be7e 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/staking/queries.js.map
# +++ b/node_modules/@cosmjs/stargate/build/modules/staking/queries.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../src/modules/staking/queries.ts"],"names":[],"mappings":";;;;;;AAAA,yDAAyD;AACzD,qEAgBmD;AAEnD,gDAAwB;AAExB,mDAA2F;AAwD3F,SAAgB,qBAAqB,CAAC,IAAiB;IACrD,6DAA6D;IAC7D,6CAA6C;IAC7C,MAAM,GAAG,GAAG,IAAA,qCAAuB,EAAC,IAAI,CAAC,CAAC;IAC1C,MAAM,YAAY,GAAG,IAAI,uBAAe,CAAC,GAAG,CAAC,CAAC;IAE9C,OAAO;QACL,OAAO,EAAE;YACP,UAAU,EAAE,KAAK,EAAE,gBAAwB,EAAE,gBAAwB,EAAE,EAAE;gBACvE,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,UAAU,CAAC;oBAC7C,aAAa,EAAE,gBAAgB;oBAC/B,aAAa,EAAE,gBAAgB;iBAChC,CAAC,CAAC;gBACH,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,oBAAoB,EAAE,KAAK,EAAE,gBAAwB,EAAE,aAA0B,EAAE,EAAE;gBACnF,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,oBAAoB,CAAC;oBACvD,aAAa,EAAE,gBAAgB;oBAC/B,UAAU,EAAE,IAAA,8BAAgB,EAAC,aAAa,CAAC;iBAC5C,CAAC,CAAC;gBACH,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,6BAA6B,EAAE,KAAK,EAAE,gBAAwB,EAAE,aAA0B,EAAE,EAAE;gBAC5F,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,6BAA6B,CAAC;oBAChE,aAAa,EAAE,gBAAgB;oBAC/B,UAAU,EAAE,IAAA,8BAAgB,EAAC,aAAa,CAAC;iBAC5C,CAAC,CAAC;gBACH,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,kBAAkB,EAAE,KAAK,EAAE,gBAAwB,EAAE,gBAAwB,EAAE,EAAE;gBAC/E,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,kBAAkB,CAAC;oBACrD,aAAa,EAAE,gBAAgB;oBAC/B,aAAa,EAAE,gBAAgB;iBAChC,CAAC,CAAC;gBACH,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,mBAAmB,EAAE,KAAK,EAAE,gBAAwB,EAAE,aAA0B,EAAE,EAAE;gBAClF,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,mBAAmB,CAAC;oBACtD,aAAa,EAAE,gBAAgB;oBAC/B,UAAU,EAAE,IAAA,8BAAgB,EAAC,aAAa,CAAC;iBAC5C,CAAC,CAAC;gBACH,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,cAAc,EAAE,KAAK,EAAE,MAAc,EAAE,EAAE;gBACvC,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,cAAc,CAAC;oBACjD,MAAM,EAAE,cAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC;iBACtC,CAAC,CAAC;gBACH,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,MAAM,EAAE,KAAK,IAAI,EAAE;gBACjB,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBAC/C,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,IAAI,EAAE,KAAK,IAAI,EAAE;gBACf,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAC7C,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,aAAa,EAAE,KAAK,EAClB,gBAAwB,EACxB,sBAA8B,EAC9B,2BAAmC,EACnC,aAA0B,EAC1B,EAAE;gBACF,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,aAAa,CAAC;oBAChD,aAAa,EAAE,gBAAgB;oBAC/B,gBAAgB,EAAE,sBAAsB;oBACxC,gBAAgB,EAAE,2BAA2B;oBAC7C,UAAU,EAAE,IAAA,8BAAgB,EAAC,aAAa,CAAC;iBAC5C,CAAC,CAAC;gBACH,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,mBAAmB,EAAE,KAAK,EAAE,gBAAwB,EAAE,gBAAwB,EAAE,EAAE;gBAChF,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,mBAAmB,CAAC;oBACtD,aAAa,EAAE,gBAAgB;oBAC/B,aAAa,EAAE,gBAAgB;iBAChC,CAAC,CAAC;gBACH,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,SAAS,EAAE,KAAK,EAAE,gBAAwB,EAAE,EAAE;gBAC5C,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,SAAS,CAAC,EAAE,aAAa,EAAE,gBAAgB,EAAE,CAAC,CAAC;gBACnF,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,oBAAoB,EAAE,KAAK,EAAE,gBAAwB,EAAE,aAA0B,EAAE,EAAE;gBACnF,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,oBAAoB,CAAC;oBACvD,aAAa,EAAE,gBAAgB;oBAC/B,UAAU,EAAE,IAAA,8BAAgB,EAAC,aAAa,CAAC;iBAC5C,CAAC,CAAC;gBACH,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,UAAU,EAAE,KAAK,EAAE,MAAwB,EAAE,aAA0B,EAAE,EAAE;gBACzE,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,UAAU,CAAC;oBAC7C,MAAM,EAAE,MAAM;oBACd,UAAU,EAAE,IAAA,8BAAgB,EAAC,aAAa,CAAC;iBAC5C,CAAC,CAAC;gBACH,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,6BAA6B,EAAE,KAAK,EAAE,gBAAwB,EAAE,aAA0B,EAAE,EAAE;gBAC5F,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,6BAA6B,CAAC;oBAChE,aAAa,EAAE,gBAAgB;oBAC/B,UAAU,EAAE,IAAA,8BAAgB,EAAC,aAAa,CAAC;iBAC5C,CAAC,CAAC;gBACH,OAAO,QAAQ,CAAC;YAClB,CAAC;SACF;KACF,CAAC;AACJ,CAAC;AAzGD,sDAyGC"}
# \ No newline at end of file
# +{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../src/modules/staking/queries.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/staking/queries.spec.d.ts b/node_modules/@cosmjs/stargate/build/modules/staking/queries.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/staking/queries.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/modules/staking/queries.spec.js b/node_modules/@cosmjs/stargate/build/modules/staking/queries.spec.js
# new file mode 100644
# index 0000000..cc0cd3f
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/staking/queries.spec.js
# @@ -0,0 +1,196 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +/* eslint-disable @typescript-eslint/naming-convention */
# +const proto_signing_1 = require("@cosmjs/proto-signing");
# +const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
# +const utils_1 = require("@cosmjs/utils");
# +const queryclient_1 = require("../../queryclient");
# +const signingstargateclient_1 = require("../../signingstargateclient");
# +const stargateclient_1 = require("../../stargateclient");
# +const testutils_spec_1 = require("../../testutils.spec");
# +const queries_1 = require("./queries");
# +async function makeClientWithStaking(rpcUrl) {
# +    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(rpcUrl);
# +    return [queryclient_1.QueryClient.withExtensions(tmClient, queries_1.setupStakingExtension), tmClient];
# +}
# +describe("StakingExtension", () => {
# +    const defaultFee = {
# +        amount: (0, proto_signing_1.coins)(25000, "ucosm"),
# +        gas: "1500000", // 1.5 million
# +    };
# +    beforeAll(async () => {
# +        if ((0, testutils_spec_1.simappEnabled)()) {
# +            const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +            const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +            {
# +                const msg = {
# +                    delegatorAddress: testutils_spec_1.faucet.address0,
# +                    validatorAddress: testutils_spec_1.validator.validatorAddress,
# +                    amount: (0, proto_signing_1.coin)(25000, "ustake"),
# +                };
# +                const msgAny = {
# +                    typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                    value: msg,
# +                };
# +                const memo = "Test delegation for Stargate";
# +                const result = await client.signAndBroadcast(testutils_spec_1.faucet.address0, [msgAny], defaultFee, memo);
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +            }
# +            {
# +                const msg = {
# +                    delegatorAddress: testutils_spec_1.faucet.address0,
# +                    validatorAddress: testutils_spec_1.validator.validatorAddress,
# +                    amount: (0, proto_signing_1.coin)(100, "ustake"),
# +                };
# +                const msgAny = {
# +                    typeUrl: "/cosmos.staking.v1beta1.MsgUndelegate",
# +                    value: msg,
# +                };
# +                const memo = "Test undelegation for Stargate";
# +                const result = await client.signAndBroadcast(testutils_spec_1.faucet.address0, [msgAny], defaultFee, memo);
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +            }
# +            await (0, utils_1.sleep)(75); // wait until transactions are indexed
# +        }
# +    });
# +    describe("delegation", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithStaking(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.staking.delegation(testutils_spec_1.faucet.address0, testutils_spec_1.validator.validatorAddress);
# +            expect(response.delegationResponse).toBeDefined();
# +            expect(response.delegationResponse).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("delegatorDelegations", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithStaking(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.staking.delegatorDelegations(testutils_spec_1.faucet.address0);
# +            expect(response.delegationResponses).toBeDefined();
# +            expect(response.delegationResponses).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("delegatorUnbondingDelegations", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithStaking(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.staking.delegatorUnbondingDelegations(testutils_spec_1.faucet.address0);
# +            expect(response.unbondingResponses).toBeDefined();
# +            expect(response.unbondingResponses).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("delegatorValidator", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithStaking(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.staking.delegatorValidator(testutils_spec_1.faucet.address0, testutils_spec_1.validator.validatorAddress);
# +            expect(response.validator).toBeDefined();
# +            expect(response.validator).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("delegatorValidators", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithStaking(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.staking.delegatorValidators(testutils_spec_1.faucet.address0);
# +            expect(response.validators).toBeDefined();
# +            expect(response.validators).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("historicalInfo", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithStaking(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.staking.historicalInfo(5);
# +            expect(response.hist).toBeDefined();
# +            expect(response.hist).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("params", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithStaking(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.staking.params();
# +            expect(response.params).toBeDefined();
# +            expect(response.params).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("pool", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithStaking(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.staking.pool();
# +            expect(response.pool).toBeDefined();
# +            expect(response.pool).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("redelegations", () => {
# +        it("works", async () => {
# +            // TODO: Set up a result for this test
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithStaking(testutils_spec_1.simapp.tendermintUrl);
# +            await expectAsync(client.staking.redelegations(testutils_spec_1.faucet.address0, testutils_spec_1.validator.validatorAddress, testutils_spec_1.validator.validatorAddress)).toBeRejectedWithError(/redelegation not found/i);
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("unbondingDelegation", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithStaking(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.staking.unbondingDelegation(testutils_spec_1.faucet.address0, testutils_spec_1.validator.validatorAddress);
# +            expect(response.unbond).toBeDefined();
# +            expect(response.unbond).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("validator", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithStaking(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.staking.validator(testutils_spec_1.validator.validatorAddress);
# +            expect(response.validator).toBeDefined();
# +            expect(response.validator).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("validatorDelegations", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithStaking(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.staking.validatorDelegations(testutils_spec_1.validator.validatorAddress);
# +            expect(response.delegationResponses).toBeDefined();
# +            expect(response.delegationResponses).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("validators", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithStaking(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.staking.validators("BOND_STATUS_BONDED");
# +            expect(response.validators).toBeDefined();
# +            expect(response.validators).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("validatorUnbondingDelegations", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClientWithStaking(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.staking.validatorUnbondingDelegations(testutils_spec_1.validator.validatorAddress);
# +            expect(response.unbondingResponses).toBeDefined();
# +            expect(response.unbondingResponses).not.toBeNull();
# +            tmClient.disconnect();
# +        });
# +    });
# +});
# +//# sourceMappingURL=queries.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/staking/queries.spec.js.map b/node_modules/@cosmjs/stargate/build/modules/staking/queries.spec.js.map
# new file mode 100644
# index 0000000..e15641b
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/staking/queries.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"queries.spec.js","sourceRoot":"","sources":["../../../src/modules/staking/queries.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/tx/queries.js b/node_modules/@cosmjs/stargate/build/modules/tx/queries.js
# index 3617e38..c75ce80 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/tx/queries.js
# +++ b/node_modules/@cosmjs/stargate/build/modules/tx/queries.js
# @@ -25,25 +25,27 @@ function setupTxExtension(base) {
#                  return response;
#              },
#              simulate: async (messages, memo, signer, sequence) => {
# -                const tx = tx_1.Tx.fromPartial({
# -                    authInfo: tx_1.AuthInfo.fromPartial({
# -                        fee: tx_1.Fee.fromPartial({}),
# -                        signerInfos: [
# -                            {
# -                                publicKey: (0, proto_signing_1.encodePubkey)(signer),
# -                                sequence: long_1.default.fromNumber(sequence, true),
# -                                modeInfo: { single: { mode: signing_1.SignMode.SIGN_MODE_UNSPECIFIED } },
# -                            },
# -                        ],
# -                    }),
# -                    body: tx_1.TxBody.fromPartial({
# -                        messages: Array.from(messages),
# -                        memo: memo,
# -                    }),
# -                    signatures: [new Uint8Array()],
# -                });
#                  const request = service_1.SimulateRequest.fromPartial({
# -                    txBytes: tx_1.Tx.encode(tx).finish(),
# +                    tx: tx_1.Tx.fromPartial({
# +                        authInfo: tx_1.AuthInfo.fromPartial({
# +                            fee: tx_1.Fee.fromPartial({}),
# +                            signerInfos: [
# +                                {
# +                                    publicKey: (0, proto_signing_1.encodePubkey)(signer),
# +                                    sequence: long_1.default.fromNumber(sequence, true),
# +                                    modeInfo: { single: { mode: signing_1.SignMode.SIGN_MODE_UNSPECIFIED } },
# +                                },
# +                            ],
# +                        }),
# +                        body: tx_1.TxBody.fromPartial({
# +                            messages: Array.from(messages),
# +                            memo: memo,
# +                        }),
# +                        signatures: [new Uint8Array()],
# +                    }),
# +                    // Sending serialized `txBytes` is the future. But
# +                    // this is not available in Comsos SDK 0.42.
# +                    txBytes: undefined,
#                  });
#                  const response = await queryService.Simulate(request);
#                  return response;
# diff --git a/node_modules/@cosmjs/stargate/build/modules/tx/queries.js.map b/node_modules/@cosmjs/stargate/build/modules/tx/queries.js.map
# index ca865dd..c194c9f 100644
# --- a/node_modules/@cosmjs/stargate/build/modules/tx/queries.js.map
# +++ b/node_modules/@cosmjs/stargate/build/modules/tx/queries.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../src/modules/tx/queries.ts"],"names":[],"mappings":";;;;;;AACA,yDAAqD;AACrD,4EAA0E;AAC1E,oEAMgD;AAChD,0DAA8E;AAE9E,gDAAwB;AAExB,mDAAyE;AAiBzE,SAAgB,gBAAgB,CAAC,IAAiB;IAChD,6DAA6D;IAC7D,6CAA6C;IAC7C,MAAM,GAAG,GAAG,IAAA,qCAAuB,EAAC,IAAI,CAAC,CAAC;IAC1C,MAAM,YAAY,GAAG,IAAI,2BAAiB,CAAC,GAAG,CAAC,CAAC;IAEhD,OAAO;QACL,EAAE,EAAE;YACF,KAAK,EAAE,KAAK,EAAE,IAAY,EAAE,EAAE;gBAC5B,MAAM,OAAO,GAAiB;oBAC5B,IAAI,EAAE,IAAI;iBACX,CAAC;gBACF,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBACnD,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,QAAQ,EAAE,KAAK,EACb,QAAwB,EACxB,IAAwB,EACxB,MAAc,EACd,QAAgB,EAChB,EAAE;gBACF,MAAM,EAAE,GAAG,OAAE,CAAC,WAAW,CAAC;oBACxB,QAAQ,EAAE,aAAQ,CAAC,WAAW,CAAC;wBAC7B,GAAG,EAAE,QAAG,CAAC,WAAW,CAAC,EAAE,CAAC;wBACxB,WAAW,EAAE;4BACX;gCACE,SAAS,EAAE,IAAA,4BAAY,EAAC,MAAM,CAAC;gCAC/B,QAAQ,EAAE,cAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC;gCACzC,QAAQ,EAAE,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,kBAAQ,CAAC,qBAAqB,EAAE,EAAE;6BAC/D;yBACF;qBACF,CAAC;oBACF,IAAI,EAAE,WAAM,CAAC,WAAW,CAAC;wBACvB,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;wBAC9B,IAAI,EAAE,IAAI;qBACX,CAAC;oBACF,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC;iBAC/B,CAAC,CAAC;gBACH,MAAM,OAAO,GAAG,yBAAe,CAAC,WAAW,CAAC;oBAC1C,OAAO,EAAE,OAAE,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE;iBAChC,CAAC,CAAC;gBACH,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBACtD,OAAO,QAAQ,CAAC;YAClB,CAAC;SACF;KACF,CAAC;AACJ,CAAC;AA9CD,4CA8CC"}
# \ No newline at end of file
# +{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../src/modules/tx/queries.ts"],"names":[],"mappings":";;;;;;AACA,yDAAqD;AACrD,4EAA0E;AAC1E,oEAMgD;AAChD,0DAA8E;AAE9E,gDAAwB;AAExB,mDAAyE;AAiBzE,SAAgB,gBAAgB,CAAC,IAAiB;IAChD,6DAA6D;IAC7D,6CAA6C;IAC7C,MAAM,GAAG,GAAG,IAAA,qCAAuB,EAAC,IAAI,CAAC,CAAC;IAC1C,MAAM,YAAY,GAAG,IAAI,2BAAiB,CAAC,GAAG,CAAC,CAAC;IAEhD,OAAO;QACL,EAAE,EAAE;YACF,KAAK,EAAE,KAAK,EAAE,IAAY,EAAE,EAAE;gBAC5B,MAAM,OAAO,GAAiB;oBAC5B,IAAI,EAAE,IAAI;iBACX,CAAC;gBACF,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBACnD,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,QAAQ,EAAE,KAAK,EACb,QAAwB,EACxB,IAAwB,EACxB,MAAc,EACd,QAAgB,EAChB,EAAE;gBACF,MAAM,OAAO,GAAG,yBAAe,CAAC,WAAW,CAAC;oBAC1C,EAAE,EAAE,OAAE,CAAC,WAAW,CAAC;wBACjB,QAAQ,EAAE,aAAQ,CAAC,WAAW,CAAC;4BAC7B,GAAG,EAAE,QAAG,CAAC,WAAW,CAAC,EAAE,CAAC;4BACxB,WAAW,EAAE;gCACX;oCACE,SAAS,EAAE,IAAA,4BAAY,EAAC,MAAM,CAAC;oCAC/B,QAAQ,EAAE,cAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC;oCACzC,QAAQ,EAAE,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,kBAAQ,CAAC,qBAAqB,EAAE,EAAE;iCAC/D;6BACF;yBACF,CAAC;wBACF,IAAI,EAAE,WAAM,CAAC,WAAW,CAAC;4BACvB,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;4BAC9B,IAAI,EAAE,IAAI;yBACX,CAAC;wBACF,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC;qBAC/B,CAAC;oBACF,kDAAkD;oBAClD,4CAA4C;oBAC5C,OAAO,EAAE,SAAS;iBACnB,CAAC,CAAC;gBACH,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBACtD,OAAO,QAAQ,CAAC;YAClB,CAAC;SACF;KACF,CAAC;AACJ,CAAC;AAhDD,4CAgDC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/tx/queries.spec.d.ts b/node_modules/@cosmjs/stargate/build/modules/tx/queries.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/tx/queries.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/modules/tx/queries.spec.js b/node_modules/@cosmjs/stargate/build/modules/tx/queries.spec.js
# new file mode 100644
# index 0000000..3f8fbc6
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/tx/queries.spec.js
# @@ -0,0 +1,79 @@
# +"use strict";
# +var __importDefault = (this && this.__importDefault) || function (mod) {
# +    return (mod && mod.__esModule) ? mod : { "default": mod };
# +};
# +Object.defineProperty(exports, "__esModule", { value: true });
# +const proto_signing_1 = require("@cosmjs/proto-signing");
# +const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
# +const utils_1 = require("@cosmjs/utils");
# +const long_1 = __importDefault(require("long"));
# +const queryclient_1 = require("../../queryclient");
# +const signingstargateclient_1 = require("../../signingstargateclient");
# +const stargateclient_1 = require("../../stargateclient");
# +const testutils_spec_1 = require("../../testutils.spec");
# +const queries_1 = require("./queries");
# +async function makeClientWithTx(rpcUrl) {
# +    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(rpcUrl);
# +    return [queryclient_1.QueryClient.withExtensions(tmClient, queries_1.setupTxExtension), tmClient];
# +}
# +describe("TxExtension", () => {
# +    const defaultFee = {
# +        amount: (0, proto_signing_1.coins)(25000, "ucosm"),
# +        gas: "1500000", // 1.5 million
# +    };
# +    let txHash;
# +    let memo;
# +    beforeAll(async () => {
# +        if ((0, testutils_spec_1.simappEnabled)()) {
# +            const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +            const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +            {
# +                const recipient = (0, testutils_spec_1.makeRandomAddress)();
# +                memo = `Test tx ${Date.now()}`;
# +                const result = await client.sendTokens(testutils_spec_1.faucet.address0, recipient, (0, proto_signing_1.coins)(25000, "ucosm"), defaultFee, memo);
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +                txHash = result.transactionHash;
# +            }
# +            await (0, utils_1.sleep)(75); // wait until transactions are indexed
# +        }
# +    });
# +    describe("getTx", () => {
# +        it("works", async () => {
# +            var _a, _b;
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assertDefined)(txHash);
# +            (0, utils_1.assertDefined)(memo);
# +            const [client, tmClient] = await makeClientWithTx(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.tx.getTx(txHash);
# +            expect((_b = (_a = response.tx) === null || _a === void 0 ? void 0 : _a.body) === null || _b === void 0 ? void 0 : _b.memo).toEqual(memo);
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("simulate", () => {
# +        it("works", async () => {
# +            var _a, _b, _c;
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assertDefined)(txHash);
# +            (0, utils_1.assertDefined)(memo);
# +            const [client, tmClient] = await makeClientWithTx(testutils_spec_1.simapp.tendermintUrl);
# +            const sequenceClient = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const registry = new proto_signing_1.Registry(signingstargateclient_1.defaultRegistryTypes);
# +            const msg = {
# +                delegatorAddress: testutils_spec_1.faucet.address0,
# +                validatorAddress: testutils_spec_1.validator.validatorAddress,
# +                amount: (0, proto_signing_1.coin)(25000, "ustake"),
# +            };
# +            const msgAny = registry.encodeAsAny({
# +                typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                value: msg,
# +            });
# +            const { sequence } = await sequenceClient.getSequence(testutils_spec_1.faucet.address0);
# +            const response = await client.tx.simulate([msgAny], "foo", testutils_spec_1.faucet.pubkey0, sequence);
# +            expect((_a = response.gasInfo) === null || _a === void 0 ? void 0 : _a.gasUsed.toNumber()).toBeGreaterThanOrEqual(101000);
# +            expect((_b = response.gasInfo) === null || _b === void 0 ? void 0 : _b.gasUsed.toNumber()).toBeLessThanOrEqual(150000);
# +            expect((_c = response.gasInfo) === null || _c === void 0 ? void 0 : _c.gasWanted).toEqual((0, queryclient_1.longify)(long_1.default.UZERO));
# +            tmClient.disconnect();
# +        });
# +    });
# +});
# +//# sourceMappingURL=queries.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/tx/queries.spec.js.map b/node_modules/@cosmjs/stargate/build/modules/tx/queries.spec.js.map
# new file mode 100644
# index 0000000..56e2c2f
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/modules/tx/queries.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"queries.spec.js","sourceRoot":"","sources":["../../../src/modules/tx/queries.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/vesting/aminomessages.d.ts b/node_modules/@cosmjs/stargate/build/modules/vesting/aminomessages.d.ts
# deleted file mode 100644
# index a3f7e07..0000000
# --- a/node_modules/@cosmjs/stargate/build/modules/vesting/aminomessages.d.ts
# +++ /dev/null
# @@ -1,16 +0,0 @@
# -import { AminoMsg, Coin } from "@cosmjs/amino";
# -import { AminoConverters } from "../../aminotypes";
# -export interface AminoMsgCreateVestingAccount extends AminoMsg {
# -    readonly type: "cosmos-sdk/MsgCreateVestingAccount";
# -    readonly value: {
# -        /** Bech32 account address */
# -        readonly from_address: string;
# -        /** Bech32 account address */
# -        readonly to_address: string;
# -        readonly amount: readonly Coin[];
# -        readonly end_time: string;
# -        readonly delayed: boolean;
# -    };
# -}
# -export declare function isAminoMsgCreateVestingAccount(msg: AminoMsg): msg is AminoMsgCreateVestingAccount;
# -export declare function createVestingAminoConverters(): AminoConverters;
# diff --git a/node_modules/@cosmjs/stargate/build/modules/vesting/aminomessages.js b/node_modules/@cosmjs/stargate/build/modules/vesting/aminomessages.js
# deleted file mode 100644
# index 64e556d..0000000
# --- a/node_modules/@cosmjs/stargate/build/modules/vesting/aminomessages.js
# +++ /dev/null
# @@ -1,34 +0,0 @@
# -"use strict";
# -var __importDefault = (this && this.__importDefault) || function (mod) {
# -    return (mod && mod.__esModule) ? mod : { "default": mod };
# -};
# -Object.defineProperty(exports, "__esModule", { value: true });
# -exports.createVestingAminoConverters = exports.isAminoMsgCreateVestingAccount = void 0;
# -const long_1 = __importDefault(require("long"));
# -function isAminoMsgCreateVestingAccount(msg) {
# -    return msg.type === "cosmos-sdk/MsgCreateVestingAccount";
# -}
# -exports.isAminoMsgCreateVestingAccount = isAminoMsgCreateVestingAccount;
# -function createVestingAminoConverters() {
# -    return {
# -        "/cosmos.vesting.v1beta1.MsgCreateVestingAccount": {
# -            aminoType: "cosmos-sdk/MsgCreateVestingAccount",
# -            toAmino: ({ fromAddress, toAddress, amount, endTime, delayed, }) => ({
# -                from_address: fromAddress,
# -                to_address: toAddress,
# -                amount: [...amount],
# -                end_time: endTime.toString(),
# -                delayed: delayed,
# -            }),
# -            fromAmino: ({ from_address, to_address, amount, end_time, delayed, }) => ({
# -                fromAddress: from_address,
# -                toAddress: to_address,
# -                amount: [...amount],
# -                endTime: long_1.default.fromString(end_time),
# -                delayed: delayed,
# -            }),
# -        },
# -    };
# -}
# -exports.createVestingAminoConverters = createVestingAminoConverters;
# -//# sourceMappingURL=aminomessages.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/vesting/aminomessages.js.map b/node_modules/@cosmjs/stargate/build/modules/vesting/aminomessages.js.map
# deleted file mode 100644
# index 282a718..0000000
# --- a/node_modules/@cosmjs/stargate/build/modules/vesting/aminomessages.js.map
# +++ /dev/null
# @@ -1 +0,0 @@
# -{"version":3,"file":"aminomessages.js","sourceRoot":"","sources":["../../../src/modules/vesting/aminomessages.ts"],"names":[],"mappings":";;;;;;AAGA,gDAAwB;AAiBxB,SAAgB,8BAA8B,CAAC,GAAa;IAC1D,OAAO,GAAG,CAAC,IAAI,KAAK,oCAAoC,CAAC;AAC3D,CAAC;AAFD,wEAEC;AAED,SAAgB,4BAA4B;IAC1C,OAAO;QACL,iDAAiD,EAAE;YACjD,SAAS,EAAE,oCAAoC;YAC/C,OAAO,EAAE,CAAC,EACR,WAAW,EACX,SAAS,EACT,MAAM,EACN,OAAO,EACP,OAAO,GACiB,EAAyC,EAAE,CAAC,CAAC;gBACrE,YAAY,EAAE,WAAW;gBACzB,UAAU,EAAE,SAAS;gBACrB,MAAM,EAAE,CAAC,GAAG,MAAM,CAAC;gBACnB,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE;gBAC5B,OAAO,EAAE,OAAO;aACjB,CAAC;YACF,SAAS,EAAE,CAAC,EACV,YAAY,EACZ,UAAU,EACV,MAAM,EACN,QAAQ,EACR,OAAO,GAC+B,EAA2B,EAAE,CAAC,CAAC;gBACrE,WAAW,EAAE,YAAY;gBACzB,SAAS,EAAE,UAAU;gBACrB,MAAM,EAAE,CAAC,GAAG,MAAM,CAAC;gBACnB,OAAO,EAAE,cAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;gBAClC,OAAO,EAAE,OAAO;aACjB,CAAC;SACH;KACF,CAAC;AACJ,CAAC;AAhCD,oEAgCC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/vesting/messages.d.ts b/node_modules/@cosmjs/stargate/build/modules/vesting/messages.d.ts
# deleted file mode 100644
# index 1a08923..0000000
# --- a/node_modules/@cosmjs/stargate/build/modules/vesting/messages.d.ts
# +++ /dev/null
# @@ -1,2 +0,0 @@
# -import { GeneratedType } from "@cosmjs/proto-signing";
# -export declare const vestingTypes: ReadonlyArray<[string, GeneratedType]>;
# diff --git a/node_modules/@cosmjs/stargate/build/modules/vesting/messages.js b/node_modules/@cosmjs/stargate/build/modules/vesting/messages.js
# deleted file mode 100644
# index a8d082d..0000000
# --- a/node_modules/@cosmjs/stargate/build/modules/vesting/messages.js
# +++ /dev/null
# @@ -1,8 +0,0 @@
# -"use strict";
# -Object.defineProperty(exports, "__esModule", { value: true });
# -exports.vestingTypes = void 0;
# -const tx_1 = require("cosmjs-types/cosmos/vesting/v1beta1/tx");
# -exports.vestingTypes = [
# -    ["/cosmos.vesting.v1beta1.MsgCreateVestingAccount", tx_1.MsgCreateVestingAccount],
# -];
# -//# sourceMappingURL=messages.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/modules/vesting/messages.js.map b/node_modules/@cosmjs/stargate/build/modules/vesting/messages.js.map
# deleted file mode 100644
# index 96d4963..0000000
# --- a/node_modules/@cosmjs/stargate/build/modules/vesting/messages.js.map
# +++ /dev/null
# @@ -1 +0,0 @@
# -{"version":3,"file":"messages.js","sourceRoot":"","sources":["../../../src/modules/vesting/messages.ts"],"names":[],"mappings":";;;AACA,+DAAiF;AAEpE,QAAA,YAAY,GAA2C;IAClE,CAAC,iDAAiD,EAAE,4BAAuB,CAAC;CAC7E,CAAC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/multisignature.d.ts b/node_modules/@cosmjs/stargate/build/multisignature.d.ts
# index f08265e..0e8a350 100644
# --- a/node_modules/@cosmjs/stargate/build/multisignature.d.ts
# +++ b/node_modules/@cosmjs/stargate/build/multisignature.d.ts
# @@ -2,18 +2,4 @@ import { MultisigThresholdPubkey, StdFee } from "@cosmjs/amino";
#  import { CompactBitArray } from "cosmjs-types/cosmos/crypto/multisig/v1beta1/multisig";
#  import { TxRaw } from "cosmjs-types/cosmos/tx/v1beta1/tx";
#  export declare function makeCompactBitArray(bits: readonly boolean[]): CompactBitArray;
# -/**
# - * Creates a signed transaction from signer info, transaction body and signatures.
# - * The result can be broadcasted after serialization.
# - *
# - * Consider using `makeMultisignedTxBytes` instead if you want to broadcast the
# - * transaction immediately.
# - */
#  export declare function makeMultisignedTx(multisigPubkey: MultisigThresholdPubkey, sequence: number, fee: StdFee, bodyBytes: Uint8Array, signatures: Map<string, Uint8Array>): TxRaw;
# -/**
# - * Creates a signed transaction from signer info, transaction body and signatures.
# - * The result can be broadcasted.
# - *
# - * This is a wrapper around `makeMultisignedTx` that encodes the transaction for broadcasting.
# - */
# -export declare function makeMultisignedTxBytes(multisigPubkey: MultisigThresholdPubkey, sequence: number, fee: StdFee, bodyBytes: Uint8Array, signatures: Map<string, Uint8Array>): Uint8Array;
# diff --git a/node_modules/@cosmjs/stargate/build/multisignature.js b/node_modules/@cosmjs/stargate/build/multisignature.js
# index 20ceeaa..d42ef98 100644
# --- a/node_modules/@cosmjs/stargate/build/multisignature.js
# +++ b/node_modules/@cosmjs/stargate/build/multisignature.js
# @@ -3,7 +3,7 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
#      return (mod && mod.__esModule) ? mod : { "default": mod };
#  };
#  Object.defineProperty(exports, "__esModule", { value: true });
# -exports.makeMultisignedTxBytes = exports.makeMultisignedTx = exports.makeCompactBitArray = void 0;
# +exports.makeMultisignedTx = exports.makeCompactBitArray = void 0;
#  const amino_1 = require("@cosmjs/amino");
#  const encoding_1 = require("@cosmjs/encoding");
#  const proto_signing_1 = require("@cosmjs/proto-signing");
# @@ -26,13 +26,6 @@ function makeCompactBitArray(bits) {
#      return multisig_1.CompactBitArray.fromPartial({ elems: bytes, extraBitsStored: extraBits });
#  }
#  exports.makeCompactBitArray = makeCompactBitArray;
# -/**
# - * Creates a signed transaction from signer info, transaction body and signatures.
# - * The result can be broadcasted after serialization.
# - *
# - * Consider using `makeMultisignedTxBytes` instead if you want to broadcast the
# - * transaction immediately.
# - */
#  function makeMultisignedTx(multisigPubkey, sequence, fee, bodyBytes, signatures) {
#      const addresses = Array.from(signatures.keys());
#      const prefix = (0, encoding_1.fromBech32)(addresses[0]).prefix;
# @@ -72,15 +65,4 @@ function makeMultisignedTx(multisigPubkey, sequence, fee, bodyBytes, signatures)
#      return signedTx;
#  }
#  exports.makeMultisignedTx = makeMultisignedTx;
# -/**
# - * Creates a signed transaction from signer info, transaction body and signatures.
# - * The result can be broadcasted.
# - *
# - * This is a wrapper around `makeMultisignedTx` that encodes the transaction for broadcasting.
# - */
# -function makeMultisignedTxBytes(multisigPubkey, sequence, fee, bodyBytes, signatures) {
# -    const signedTx = makeMultisignedTx(multisigPubkey, sequence, fee, bodyBytes, signatures);
# -    return Uint8Array.from(tx_2.TxRaw.encode(signedTx).finish());
# -}
# -exports.makeMultisignedTxBytes = makeMultisignedTxBytes;
#  //# sourceMappingURL=multisignature.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/multisignature.js.map b/node_modules/@cosmjs/stargate/build/multisignature.js.map
# index 947696d..9f2c551 100644
# --- a/node_modules/@cosmjs/stargate/build/multisignature.js.map
# +++ b/node_modules/@cosmjs/stargate/build/multisignature.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"multisignature.js","sourceRoot":"","sources":["../src/multisignature.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# +{"version":3,"file":"multisignature.js","sourceRoot":"","sources":["../src/multisignature.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/multisignature.spec.d.ts b/node_modules/@cosmjs/stargate/build/multisignature.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/multisignature.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/multisignature.spec.js b/node_modules/@cosmjs/stargate/build/multisignature.spec.js
# new file mode 100644
# index 0000000..100155f
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/multisignature.spec.js
# @@ -0,0 +1,213 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +const amino_1 = require("@cosmjs/amino");
# +const proto_signing_1 = require("@cosmjs/proto-signing");
# +const utils_1 = require("@cosmjs/utils");
# +const tx_1 = require("cosmjs-types/cosmos/tx/v1beta1/tx");
# +const multisignature_1 = require("./multisignature");
# +const signingstargateclient_1 = require("./signingstargateclient");
# +const stargateclient_1 = require("./stargateclient");
# +const testutils_spec_1 = require("./testutils.spec");
# +describe("multisignature", () => {
# +    describe("makeCompactBitArray", () => {
# +        it("works for 0 bits of different lengths", () => {
# +            expect((0, multisignature_1.makeCompactBitArray)([])).toEqual({ elems: new Uint8Array([]), extraBitsStored: 0 });
# +            expect((0, multisignature_1.makeCompactBitArray)([false])).toEqual({
# +                elems: new Uint8Array([0b00000000]),
# +                extraBitsStored: 1,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, false])).toEqual({
# +                elems: new Uint8Array([0b00000000]),
# +                extraBitsStored: 2,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, false, false])).toEqual({
# +                elems: new Uint8Array([0b00000000]),
# +                extraBitsStored: 3,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, false, false, false])).toEqual({
# +                elems: new Uint8Array([0b00000000]),
# +                extraBitsStored: 4,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, false, false, false, false])).toEqual({
# +                elems: new Uint8Array([0b00000000]),
# +                extraBitsStored: 5,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, false, false, false, false, false])).toEqual({
# +                elems: new Uint8Array([0b00000000]),
# +                extraBitsStored: 6,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, false, false, false, false, false, false])).toEqual({
# +                elems: new Uint8Array([0b00000000]),
# +                extraBitsStored: 7,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, false, false, false, false, false, false, false])).toEqual({
# +                elems: new Uint8Array([0b00000000]),
# +                extraBitsStored: 0,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, false, false, false, false, false, false, false, false])).toEqual({
# +                elems: new Uint8Array([0b00000000, 0b00000000]),
# +                extraBitsStored: 1,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, false, false, false, false, false, false, false, false, false])).toEqual({ elems: new Uint8Array([0b00000000, 0b00000000]), extraBitsStored: 2 });
# +        });
# +        it("works for 1 bits of different lengths", () => {
# +            expect((0, multisignature_1.makeCompactBitArray)([])).toEqual({ elems: new Uint8Array([]), extraBitsStored: 0 });
# +            expect((0, multisignature_1.makeCompactBitArray)([true])).toEqual({
# +                elems: new Uint8Array([0b10000000]),
# +                extraBitsStored: 1,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([true, true])).toEqual({
# +                elems: new Uint8Array([0b11000000]),
# +                extraBitsStored: 2,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([true, true, true])).toEqual({
# +                elems: new Uint8Array([0b11100000]),
# +                extraBitsStored: 3,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([true, true, true, true])).toEqual({
# +                elems: new Uint8Array([0b11110000]),
# +                extraBitsStored: 4,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([true, true, true, true, true])).toEqual({
# +                elems: new Uint8Array([0b11111000]),
# +                extraBitsStored: 5,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([true, true, true, true, true, true])).toEqual({
# +                elems: new Uint8Array([0b11111100]),
# +                extraBitsStored: 6,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([true, true, true, true, true, true, true])).toEqual({
# +                elems: new Uint8Array([0b11111110]),
# +                extraBitsStored: 7,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([true, true, true, true, true, true, true, true])).toEqual({
# +                elems: new Uint8Array([0b11111111]),
# +                extraBitsStored: 0,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([true, true, true, true, true, true, true, true, true])).toEqual({
# +                elems: new Uint8Array([0b11111111, 0b10000000]),
# +                extraBitsStored: 1,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([true, true, true, true, true, true, true, true, true, true])).toEqual({
# +                elems: new Uint8Array([0b11111111, 0b11000000]),
# +                extraBitsStored: 2,
# +            });
# +        });
# +        it("works for 1 bit in different places", () => {
# +            expect((0, multisignature_1.makeCompactBitArray)([true, false, false, false, false, false, false, false, false, false])).toEqual({
# +                elems: new Uint8Array([0b10000000, 0b00000000]),
# +                extraBitsStored: 2,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, true, false, false, false, false, false, false, false, false])).toEqual({
# +                elems: new Uint8Array([0b01000000, 0b00000000]),
# +                extraBitsStored: 2,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, false, true, false, false, false, false, false, false, false])).toEqual({
# +                elems: new Uint8Array([0b00100000, 0b00000000]),
# +                extraBitsStored: 2,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, false, false, true, false, false, false, false, false, false])).toEqual({
# +                elems: new Uint8Array([0b00010000, 0b00000000]),
# +                extraBitsStored: 2,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, false, false, false, true, false, false, false, false, false])).toEqual({
# +                elems: new Uint8Array([0b00001000, 0b00000000]),
# +                extraBitsStored: 2,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, false, false, false, false, true, false, false, false, false])).toEqual({
# +                elems: new Uint8Array([0b00000100, 0b00000000]),
# +                extraBitsStored: 2,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, false, false, false, false, false, true, false, false, false])).toEqual({
# +                elems: new Uint8Array([0b00000010, 0b00000000]),
# +                extraBitsStored: 2,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, false, false, false, false, false, false, true, false, false])).toEqual({
# +                elems: new Uint8Array([0b00000001, 0b00000000]),
# +                extraBitsStored: 2,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, false, false, false, false, false, false, false, true, false])).toEqual({
# +                elems: new Uint8Array([0b00000000, 0b10000000]),
# +                extraBitsStored: 2,
# +            });
# +            expect((0, multisignature_1.makeCompactBitArray)([false, false, false, false, false, false, false, false, false, true])).toEqual({
# +                elems: new Uint8Array([0b00000000, 0b01000000]),
# +                extraBitsStored: 2,
# +            });
# +        });
# +    });
# +    describe("makeMultisignedTx", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const multisigAccountAddress = "cosmos1h90ml36rcu7yegwduzgzderj2jmq49hcpfclw9";
# +            // On the composer's machine signing instructions are created.
# +            // The composer does not need to be one of the signers.
# +            const signingInstruction = await (async () => {
# +                const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +                const accountOnChain = await client.getAccount(multisigAccountAddress);
# +                (0, utils_1.assert)(accountOnChain, "Account does not exist on chain");
# +                const msgSend = {
# +                    fromAddress: multisigAccountAddress,
# +                    toAddress: "cosmos19rvl6ja9h0erq9dc2xxfdzypc739ej8k5esnhg",
# +                    amount: (0, proto_signing_1.coins)(1234, "ucosm"),
# +                };
# +                const msg = {
# +                    typeUrl: "/cosmos.bank.v1beta1.MsgSend",
# +                    value: msgSend,
# +                };
# +                const gasLimit = 200000;
# +                const fee = {
# +                    amount: (0, proto_signing_1.coins)(2000, "ucosm"),
# +                    gas: gasLimit.toString(),
# +                };
# +                return {
# +                    accountNumber: accountOnChain.accountNumber,
# +                    sequence: accountOnChain.sequence,
# +                    chainId: await client.getChainId(),
# +                    msgs: [msg],
# +                    fee: fee,
# +                    memo: "Use your tokens wisely",
# +                };
# +            })();
# +            const [[pubkey0, signature0, bodyBytes], [pubkey1, signature1], [pubkey2, signature2], [pubkey3, signature3], [pubkey4, signature4],] = await Promise.all([0, 1, 2, 3, 4].map(async (i) => {
# +                // Signing environment
# +                const wallet = await amino_1.Secp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic, {
# +                    hdPaths: [(0, amino_1.makeCosmoshubPath)(i)],
# +                });
# +                const pubkey = (0, amino_1.encodeSecp256k1Pubkey)((await wallet.getAccounts())[0].pubkey);
# +                const address = (await wallet.getAccounts())[0].address;
# +                const signingClient = await signingstargateclient_1.SigningStargateClient.offline(wallet);
# +                const signerData = {
# +                    accountNumber: signingInstruction.accountNumber,
# +                    sequence: signingInstruction.sequence,
# +                    chainId: signingInstruction.chainId,
# +                };
# +                const { bodyBytes: bb, signatures } = await signingClient.sign(address, signingInstruction.msgs, signingInstruction.fee, signingInstruction.memo, signerData);
# +                return [pubkey, signatures[0], bb];
# +            }));
# +            // From here on, no private keys are required anymore. Any anonymous entity
# +            // can collect, assemble and broadcast.
# +            {
# +                const multisigPubkey = (0, amino_1.createMultisigThresholdPubkey)([pubkey0, pubkey1, pubkey2, pubkey3, pubkey4], 2);
# +                expect((0, amino_1.pubkeyToAddress)(multisigPubkey, "cosmos")).toEqual(multisigAccountAddress);
# +                const address0 = (0, amino_1.pubkeyToAddress)(pubkey0, "cosmos");
# +                const address1 = (0, amino_1.pubkeyToAddress)(pubkey1, "cosmos");
# +                const address2 = (0, amino_1.pubkeyToAddress)(pubkey2, "cosmos");
# +                const address3 = (0, amino_1.pubkeyToAddress)(pubkey3, "cosmos");
# +                const address4 = (0, amino_1.pubkeyToAddress)(pubkey4, "cosmos");
# +                const broadcaster = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +                const signedTx = (0, multisignature_1.makeMultisignedTx)(multisigPubkey, signingInstruction.sequence, signingInstruction.fee, bodyBytes, new Map([
# +                    [address0, signature0],
# +                    [address1, signature1],
# +                    [address2, signature2],
# +                    [address3, signature3],
# +                    [address4, signature4],
# +                ]));
# +                // ensure signature is valid
# +                const result = await broadcaster.broadcastTx(Uint8Array.from(tx_1.TxRaw.encode(signedTx).finish()));
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +            }
# +        });
# +    });
# +});
# +//# sourceMappingURL=multisignature.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/multisignature.spec.js.map b/node_modules/@cosmjs/stargate/build/multisignature.spec.js.map
# new file mode 100644
# index 0000000..b03f3c6
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/multisignature.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"multisignature.spec.js","sourceRoot":"","sources":["../src/multisignature.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/queryclient/index.d.ts b/node_modules/@cosmjs/stargate/build/queryclient/index.d.ts
# index 81c4276..fee74c3 100644
# --- a/node_modules/@cosmjs/stargate/build/queryclient/index.d.ts
# +++ b/node_modules/@cosmjs/stargate/build/queryclient/index.d.ts
# @@ -1,2 +1,2 @@
# -export { QueryAbciResponse, QueryClient, QueryStoreResponse } from "./queryclient";
# +export { QueryClient } from "./queryclient";
#  export { createPagination, createProtobufRpcClient, decodeCosmosSdkDecFromProto, longify, ProtobufRpcClient, } from "./utils";
# diff --git a/node_modules/@cosmjs/stargate/build/queryclient/index.js.map b/node_modules/@cosmjs/stargate/build/queryclient/index.js.map
# index e4b6690..dbcfbde 100644
# --- a/node_modules/@cosmjs/stargate/build/queryclient/index.js.map
# +++ b/node_modules/@cosmjs/stargate/build/queryclient/index.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/queryclient/index.ts"],"names":[],"mappings":";;;AAAA,6CAAmF;AAAvD,0GAAA,WAAW,OAAA;AACvC,iCAMiB;AALf,yGAAA,gBAAgB,OAAA;AAChB,gHAAA,uBAAuB,OAAA;AACvB,oHAAA,2BAA2B,OAAA;AAC3B,gGAAA,OAAO,OAAA"}
# \ No newline at end of file
# +{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/queryclient/index.ts"],"names":[],"mappings":";;;AAAA,6CAA4C;AAAnC,0GAAA,WAAW,OAAA;AACpB,iCAMiB;AALf,yGAAA,gBAAgB,OAAA;AAChB,gHAAA,uBAAuB,OAAA;AACvB,oHAAA,2BAA2B,OAAA;AAC3B,gGAAA,OAAO,OAAA"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/queryclient/queryclient.d.ts b/node_modules/@cosmjs/stargate/build/queryclient/queryclient.d.ts
# index 0854090..d987a00 100644
# --- a/node_modules/@cosmjs/stargate/build/queryclient/queryclient.d.ts
# +++ b/node_modules/@cosmjs/stargate/build/queryclient/queryclient.d.ts
# @@ -1,4 +1,4 @@
# -import { TendermintClient } from "@cosmjs/tendermint-rpc";
# +import { Tendermint34Client } from "@cosmjs/tendermint-rpc";
#  import { ProofOps } from "cosmjs-types/tendermint/crypto/proof";
#  declare type QueryExtensionSetup<P> = (base: QueryClient) => P;
#  export interface ProvenQuery {
# @@ -7,87 +7,50 @@ export interface ProvenQuery {
#      readonly proof: ProofOps;
#      readonly height: number;
#  }
# -export interface QueryStoreResponse {
# -    /** The response key from Tendermint. This is the same as the query key in the request. */
# -    readonly key: Uint8Array;
# -    readonly value: Uint8Array;
# -    readonly height: number;
# -}
# -/**
# - * The response of an ABCI query to Tendermint.
# - * This is a subset of `tendermint34.AbciQueryResponse` in order
# - * to abstract away Tendermint versions.
# - */
# -export interface QueryAbciResponse {
# -    readonly value: Uint8Array;
# -    readonly height: number;
# -}
#  export declare class QueryClient {
#      /** Constructs a QueryClient with 0 extensions */
# -    static withExtensions(tmClient: TendermintClient): QueryClient;
# +    static withExtensions(tmClient: Tendermint34Client): QueryClient;
#      /** Constructs a QueryClient with 1 extension */
# -    static withExtensions<A extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>): QueryClient & A;
# +    static withExtensions<A extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>): QueryClient & A;
#      /** Constructs a QueryClient with 2 extensions */
# -    static withExtensions<A extends object, B extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>): QueryClient & A & B;
# +    static withExtensions<A extends object, B extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>): QueryClient & A & B;
#      /** Constructs a QueryClient with 3 extensions */
# -    static withExtensions<A extends object, B extends object, C extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>): QueryClient & A & B & C;
# +    static withExtensions<A extends object, B extends object, C extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>): QueryClient & A & B & C;
#      /** Constructs a QueryClient with 4 extensions */
# -    static withExtensions<A extends object, B extends object, C extends object, D extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>): QueryClient & A & B & C & D;
# +    static withExtensions<A extends object, B extends object, C extends object, D extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>): QueryClient & A & B & C & D;
#      /** Constructs a QueryClient with 5 extensions */
# -    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>): QueryClient & A & B & C & D & E;
# +    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>): QueryClient & A & B & C & D & E;
#      /** Constructs a QueryClient with 6 extensions */
# -    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>): QueryClient & A & B & C & D & E & F;
# +    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>): QueryClient & A & B & C & D & E & F;
#      /** Constructs a QueryClient with 7 extensions */
# -    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>): QueryClient & A & B & C & D & E & F & G;
# +    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>): QueryClient & A & B & C & D & E & F & G;
#      /** Constructs a QueryClient with 8 extensions */
# -    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>): QueryClient & A & B & C & D & E & F & G & H;
# +    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>): QueryClient & A & B & C & D & E & F & G & H;
#      /** Constructs a QueryClient with 9 extensions */
# -    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>): QueryClient & A & B & C & D & E & F & G & H & I;
# +    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>): QueryClient & A & B & C & D & E & F & G & H & I;
#      /** Constructs a QueryClient with 10 extensions */
# -    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>): QueryClient & A & B & C & D & E & F & G & H & I & J;
# +    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>): QueryClient & A & B & C & D & E & F & G & H & I & J;
#      /** Constructs a QueryClient with 11 extensions */
# -    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object, K extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>, setupExtensionK: QueryExtensionSetup<K>): QueryClient & A & B & C & D & E & F & G & H & I & J & K;
# +    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object, K extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>, setupExtensionK: QueryExtensionSetup<K>): QueryClient & A & B & C & D & E & F & G & H & I & J & K;
#      /** Constructs a QueryClient with 12 extensions */
# -    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object, K extends object, L extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>, setupExtensionK: QueryExtensionSetup<K>, setupExtensionL: QueryExtensionSetup<L>): QueryClient & A & B & C & D & E & F & G & H & I & J & K & L;
# +    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object, K extends object, L extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>, setupExtensionK: QueryExtensionSetup<K>, setupExtensionL: QueryExtensionSetup<L>): QueryClient & A & B & C & D & E & F & G & H & I & J & K & L;
#      /** Constructs a QueryClient with 13 extensions */
# -    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object, K extends object, L extends object, M extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>, setupExtensionK: QueryExtensionSetup<K>, setupExtensionL: QueryExtensionSetup<L>, setupExtensionM: QueryExtensionSetup<M>): QueryClient & A & B & C & D & E & F & G & H & I & J & K & L & M;
# +    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object, K extends object, L extends object, M extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>, setupExtensionK: QueryExtensionSetup<K>, setupExtensionL: QueryExtensionSetup<L>, setupExtensionM: QueryExtensionSetup<M>): QueryClient & A & B & C & D & E & F & G & H & I & J & K & L & M;
#      /** Constructs a QueryClient with 14 extensions */
# -    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object, K extends object, L extends object, M extends object, N extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>, setupExtensionK: QueryExtensionSetup<K>, setupExtensionL: QueryExtensionSetup<L>, setupExtensionM: QueryExtensionSetup<M>, setupExtensionN: QueryExtensionSetup<N>): QueryClient & A & B & C & D & E & F & G & H & I & J & K & L & M & N;
# +    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object, K extends object, L extends object, M extends object, N extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>, setupExtensionK: QueryExtensionSetup<K>, setupExtensionL: QueryExtensionSetup<L>, setupExtensionM: QueryExtensionSetup<M>, setupExtensionN: QueryExtensionSetup<N>): QueryClient & A & B & C & D & E & F & G & H & I & J & K & L & M & N;
#      /** Constructs a QueryClient with 15 extensions */
# -    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object, K extends object, L extends object, M extends object, N extends object, O extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>, setupExtensionK: QueryExtensionSetup<K>, setupExtensionL: QueryExtensionSetup<L>, setupExtensionM: QueryExtensionSetup<M>, setupExtensionN: QueryExtensionSetup<N>, setupExtensionO: QueryExtensionSetup<O>): QueryClient & A & B & C & D & E & F & G & H & I & J & K & L & M & N & O;
# +    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object, K extends object, L extends object, M extends object, N extends object, O extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>, setupExtensionK: QueryExtensionSetup<K>, setupExtensionL: QueryExtensionSetup<L>, setupExtensionM: QueryExtensionSetup<M>, setupExtensionN: QueryExtensionSetup<N>, setupExtensionO: QueryExtensionSetup<O>): QueryClient & A & B & C & D & E & F & G & H & I & J & K & L & M & N & O;
#      /** Constructs a QueryClient with 16 extensions */
# -    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object, K extends object, L extends object, M extends object, N extends object, O extends object, P extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>, setupExtensionK: QueryExtensionSetup<K>, setupExtensionL: QueryExtensionSetup<L>, setupExtensionM: QueryExtensionSetup<M>, setupExtensionN: QueryExtensionSetup<N>, setupExtensionO: QueryExtensionSetup<O>, setupExtensionP: QueryExtensionSetup<P>): QueryClient & A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P;
# +    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object, K extends object, L extends object, M extends object, N extends object, O extends object, P extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>, setupExtensionK: QueryExtensionSetup<K>, setupExtensionL: QueryExtensionSetup<L>, setupExtensionM: QueryExtensionSetup<M>, setupExtensionN: QueryExtensionSetup<N>, setupExtensionO: QueryExtensionSetup<O>, setupExtensionP: QueryExtensionSetup<P>): QueryClient & A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P;
#      /** Constructs a QueryClient with 17 extensions */
# -    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object, K extends object, L extends object, M extends object, N extends object, O extends object, P extends object, Q extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>, setupExtensionK: QueryExtensionSetup<K>, setupExtensionL: QueryExtensionSetup<L>, setupExtensionM: QueryExtensionSetup<M>, setupExtensionN: QueryExtensionSetup<N>, setupExtensionO: QueryExtensionSetup<O>, setupExtensionP: QueryExtensionSetup<P>, setupExtensionQ: QueryExtensionSetup<Q>): QueryClient & A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q;
# +    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object, K extends object, L extends object, M extends object, N extends object, O extends object, P extends object, Q extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>, setupExtensionK: QueryExtensionSetup<K>, setupExtensionL: QueryExtensionSetup<L>, setupExtensionM: QueryExtensionSetup<M>, setupExtensionN: QueryExtensionSetup<N>, setupExtensionO: QueryExtensionSetup<O>, setupExtensionP: QueryExtensionSetup<P>, setupExtensionQ: QueryExtensionSetup<Q>): QueryClient & A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q;
#      /** Constructs a QueryClient with 18 extensions */
# -    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object, K extends object, L extends object, M extends object, N extends object, O extends object, P extends object, Q extends object, R extends object>(tmClient: TendermintClient, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>, setupExtensionK: QueryExtensionSetup<K>, setupExtensionL: QueryExtensionSetup<L>, setupExtensionM: QueryExtensionSetup<M>, setupExtensionN: QueryExtensionSetup<N>, setupExtensionO: QueryExtensionSetup<O>, setupExtensionP: QueryExtensionSetup<P>, setupExtensionQ: QueryExtensionSetup<Q>, setupExtensionR: QueryExtensionSetup<R>): QueryClient & A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q & R;
# +    static withExtensions<A extends object, B extends object, C extends object, D extends object, E extends object, F extends object, G extends object, H extends object, I extends object, J extends object, K extends object, L extends object, M extends object, N extends object, O extends object, P extends object, Q extends object, R extends object>(tmClient: Tendermint34Client, setupExtensionA: QueryExtensionSetup<A>, setupExtensionB: QueryExtensionSetup<B>, setupExtensionC: QueryExtensionSetup<C>, setupExtensionD: QueryExtensionSetup<D>, setupExtensionE: QueryExtensionSetup<E>, setupExtensionF: QueryExtensionSetup<F>, setupExtensionG: QueryExtensionSetup<G>, setupExtensionH: QueryExtensionSetup<H>, setupExtensionI: QueryExtensionSetup<I>, setupExtensionJ: QueryExtensionSetup<J>, setupExtensionK: QueryExtensionSetup<K>, setupExtensionL: QueryExtensionSetup<L>, setupExtensionM: QueryExtensionSetup<M>, setupExtensionN: QueryExtensionSetup<N>, setupExtensionO: QueryExtensionSetup<O>, setupExtensionP: QueryExtensionSetup<P>, setupExtensionQ: QueryExtensionSetup<Q>, setupExtensionR: QueryExtensionSetup<R>): QueryClient & A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q & R;
#      private readonly tmClient;
# -    constructor(tmClient: TendermintClient);
# -    /**
# -     * @deprecated use queryStoreVerified instead
# -     */
# -    queryVerified(store: string, queryKey: Uint8Array, desiredHeight?: number): Promise<Uint8Array>;
# -    /**
# -     * Queries the database store with a proof, which is then verified.
# -     *
# -     * Please note: the current implementation trusts block headers it gets from the PRC endpoint.
# -     */
# -    queryStoreVerified(store: string, queryKey: Uint8Array, desiredHeight?: number): Promise<QueryStoreResponse>;
# +    constructor(tmClient: Tendermint34Client);
# +    queryVerified(store: string, key: Uint8Array, desiredHeight?: number): Promise<Uint8Array>;
#      queryRawProof(store: string, queryKey: Uint8Array, desiredHeight?: number): Promise<ProvenQuery>;
# -    /**
# -     * Performs an ABCI query to Tendermint without requesting a proof.
# -     *
# -     * @deprecated use queryAbci instead
# -     */
# -    queryUnverified(path: string, request: Uint8Array, desiredHeight?: number): Promise<Uint8Array>;
# -    /**
# -     * Performs an ABCI query to Tendermint without requesting a proof.
# -     *
# -     * If the `desiredHeight` is set, a particular height is requested. Otherwise
# -     * the latest height is requested. The response contains the actual height of
# -     * the query.
# -     */
# -    queryAbci(path: string, request: Uint8Array, desiredHeight?: number): Promise<QueryAbciResponse>;
# +    queryUnverified(path: string, request: Uint8Array): Promise<Uint8Array>;
#      private getNextHeader;
#  }
#  export {};
# diff --git a/node_modules/@cosmjs/stargate/build/queryclient/queryclient.js b/node_modules/@cosmjs/stargate/build/queryclient/queryclient.js
# index 4ca8889..690696f 100644
# --- a/node_modules/@cosmjs/stargate/build/queryclient/queryclient.js
# +++ b/node_modules/@cosmjs/stargate/build/queryclient/queryclient.js
# @@ -35,21 +35,9 @@ class QueryClient {
#          }
#          return client;
#      }
# -    /**
# -     * @deprecated use queryStoreVerified instead
# -     */
# -    async queryVerified(store, queryKey, desiredHeight) {
# -        const { value } = await this.queryStoreVerified(store, queryKey, desiredHeight);
# -        return value;
# -    }
# -    /**
# -     * Queries the database store with a proof, which is then verified.
# -     *
# -     * Please note: the current implementation trusts block headers it gets from the PRC endpoint.
# -     */
# -    async queryStoreVerified(store, queryKey, desiredHeight) {
# -        const { height, proof, key, value } = await this.queryRawProof(store, queryKey, desiredHeight);
# -        const subProof = checkAndParseOp(proof.ops[0], "ics23:iavl", queryKey);
# +    async queryVerified(store, key, desiredHeight) {
# +        const { height, proof, value } = await this.queryRawProof(store, key, desiredHeight);
# +        const subProof = checkAndParseOp(proof.ops[0], "ics23:iavl", key);
#          const storeProof = checkAndParseOp(proof.ops[1], "ics23:simple", (0, encoding_1.toAscii)(store));
#          // this must always be existence, if the store is not a typo
#          (0, utils_1.assert)(storeProof.exist);
# @@ -59,21 +47,22 @@ class QueryClient {
#              // non-existence check
#              (0, utils_1.assert)(subProof.nonexist);
#              // the subproof must map the desired key to the "value" of the storeProof
# -            (0, ics23_1.verifyNonExistence)(subProof.nonexist, ics23_1.iavlSpec, storeProof.exist.value, queryKey);
# +            (0, ics23_1.verifyNonExistence)(subProof.nonexist, ics23_1.iavlSpec, storeProof.exist.value, key);
#          }
#          else {
#              // existence check
#              (0, utils_1.assert)(subProof.exist);
#              (0, utils_1.assert)(subProof.exist.value);
#              // the subproof must map the desired key to the "value" of the storeProof
# -            (0, ics23_1.verifyExistence)(subProof.exist, ics23_1.iavlSpec, storeProof.exist.value, queryKey, value);
# +            (0, ics23_1.verifyExistence)(subProof.exist, ics23_1.iavlSpec, storeProof.exist.value, key, value);
#          }
#          // the store proof must map its declared value (root of subProof) to the appHash of the next block
#          const header = await this.getNextHeader(height);
#          (0, ics23_1.verifyExistence)(storeProof.exist, ics23_1.tendermintSpec, header.appHash, (0, encoding_1.toAscii)(store), storeProof.exist.value);
# -        return { key, value, height };
# +        return value;
#      }
#      async queryRawProof(store, queryKey, desiredHeight) {
# +        var _a;
#          const { key, value, height, proof, code, log } = await this.tmClient.abciQuery({
#              // we need the StoreKey for the module, not the module name
#              // https://github.com/cosmos/cosmos-sdk/blob/8cab43c8120fec5200c3459cbf4a92017bb6f287/x/auth/types/keys.go#L12
# @@ -92,7 +81,7 @@ class QueryClient {
#              throw new Error("No query height returned");
#          }
#          if (!proof || proof.ops.length !== 2) {
# -            throw new Error(`Expected 2 proof ops, got ${proof?.ops.length ?? 0}. Are you using stargate?`);
# +            throw new Error(`Expected 2 proof ops, got ${(_a = proof === null || proof === void 0 ? void 0 : proof.ops.length) !== null && _a !== void 0 ? _a : 0}. Are you using stargate?`);
#          }
#          // we don't need the results, but we can ensure the data is the proper format
#          checkAndParseOp(proof.ops[0], "ics23:iavl", key);
# @@ -107,39 +96,16 @@ class QueryClient {
#              },
#          };
#      }
# -    /**
# -     * Performs an ABCI query to Tendermint without requesting a proof.
# -     *
# -     * @deprecated use queryAbci instead
# -     */
# -    async queryUnverified(path, request, desiredHeight) {
# -        const response = await this.queryAbci(path, request, desiredHeight);
# -        return response.value;
# -    }
# -    /**
# -     * Performs an ABCI query to Tendermint without requesting a proof.
# -     *
# -     * If the `desiredHeight` is set, a particular height is requested. Otherwise
# -     * the latest height is requested. The response contains the actual height of
# -     * the query.
# -     */
# -    async queryAbci(path, request, desiredHeight) {
# +    async queryUnverified(path, request) {
#          const response = await this.tmClient.abciQuery({
#              path: path,
#              data: request,
#              prove: false,
# -            height: desiredHeight,
#          });
#          if (response.code) {
#              throw new Error(`Query failed with (${response.code}): ${response.log}`);
#          }
# -        if (!response.height) {
# -            throw new Error("No query height returned");
# -        }
# -        return {
# -            value: response.value,
# -            height: response.height,
# -        };
# +        return response.value;
#      }
#      // this must return the header for height+1
#      // throws an error if height is 0 or undefined
# @@ -154,7 +120,7 @@ class QueryClient {
#          try {
#              headersSubscription = this.tmClient.subscribeNewBlockHeader();
#          }
# -        catch {
# +        catch (_a) {
#              // Ignore exception caused by non-WebSocket Tendermint clients
#          }
#          if (headersSubscription) {
# diff --git a/node_modules/@cosmjs/stargate/build/queryclient/queryclient.js.map b/node_modules/@cosmjs/stargate/build/queryclient/queryclient.js.map
# index 7d92113..eff7754 100644
# --- a/node_modules/@cosmjs/stargate/build/queryclient/queryclient.js.map
# +++ b/node_modules/@cosmjs/stargate/build/queryclient/queryclient.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"queryclient.js","sourceRoot":"","sources":["../../src/queryclient/queryclient.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# +{"version":3,"file":"queryclient.js","sourceRoot":"","sources":["../../src/queryclient/queryclient.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/queryclient/queryclient.spec.d.ts b/node_modules/@cosmjs/stargate/build/queryclient/queryclient.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/queryclient/queryclient.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/queryclient/queryclient.spec.js b/node_modules/@cosmjs/stargate/build/queryclient/queryclient.spec.js
# new file mode 100644
# index 0000000..8c95995
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/queryclient/queryclient.spec.js
# @@ -0,0 +1,76 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +/* eslint-disable @typescript-eslint/naming-convention */
# +const encoding_1 = require("@cosmjs/encoding");
# +const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
# +const bank_1 = require("cosmjs-types/cosmos/bank/v1beta1/bank");
# +const query_1 = require("cosmjs-types/cosmos/bank/v1beta1/query");
# +const testutils_spec_1 = require("../testutils.spec");
# +const queryclient_1 = require("./queryclient");
# +async function makeClient(rpcUrl) {
# +    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(rpcUrl);
# +    return [queryclient_1.QueryClient.withExtensions(tmClient), tmClient];
# +}
# +/**
# + * See
# + * - https://github.com/cosmos/cosmos-sdk/blob/v0.42.10/x/bank/types/key.go#L27
# + * - https://github.com/cosmos/cosmos-sdk/blob/v0.44.2/x/bank/types/key.go#L28
# + */
# +const denomMetadataPrefix = new Uint8Array([0x01]);
# +describe("QueryClient", () => {
# +    describe("queryVerified", () => {
# +        it("works via WebSockets", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClient(testutils_spec_1.simapp.tendermintUrlWs);
# +            // "keys before 0.45 had denom two times in the key"
# +            // https://github.com/cosmos/cosmos-sdk/blob/10ad61a4dd/x/bank/migrations/v045/store_test.go#L91
# +            const key = Uint8Array.from([
# +                ...denomMetadataPrefix,
# +                ...(0, encoding_1.toAscii)(testutils_spec_1.simapp.denomFee),
# +                ...(0, encoding_1.toAscii)(testutils_spec_1.simapp.denomFee),
# +            ]);
# +            const data = await client.queryVerified("bank", key);
# +            const response = bank_1.Metadata.decode(data);
# +            expect(response.base).toEqual(testutils_spec_1.simapp.denomFee);
# +            expect(response.description).toEqual("The fee token of this test chain");
# +            tmClient.disconnect();
# +        });
# +        it("works via http", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClient(testutils_spec_1.simapp.tendermintUrlHttp);
# +            // "keys before 0.45 had denom two times in the key"
# +            // https://github.com/cosmos/cosmos-sdk/blob/10ad61a4dd/x/bank/migrations/v045/store_test.go#L91
# +            const key = Uint8Array.from([
# +                ...denomMetadataPrefix,
# +                ...(0, encoding_1.toAscii)(testutils_spec_1.simapp.denomFee),
# +                ...(0, encoding_1.toAscii)(testutils_spec_1.simapp.denomFee),
# +            ]);
# +            const data = await client.queryVerified("bank", key);
# +            const response = bank_1.Metadata.decode(data);
# +            expect(response.base).toEqual(testutils_spec_1.simapp.denomFee);
# +            expect(response.description).toEqual("The fee token of this test chain");
# +            tmClient.disconnect();
# +        });
# +    });
# +    describe("queryUnverified", () => {
# +        it("works via WebSockets", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClient(testutils_spec_1.simapp.tendermintUrlWs);
# +            const requestData = Uint8Array.from(query_1.QueryAllBalancesRequest.encode({ address: testutils_spec_1.unused.address }).finish());
# +            const data = await client.queryUnverified(`/cosmos.bank.v1beta1.Query/AllBalances`, requestData);
# +            const response = query_1.QueryAllBalancesResponse.decode(data);
# +            expect(response.balances.length).toEqual(2);
# +            tmClient.disconnect();
# +        });
# +        it("works via http", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const [client, tmClient] = await makeClient(testutils_spec_1.simapp.tendermintUrlHttp);
# +            const requestData = Uint8Array.from(query_1.QueryAllBalancesRequest.encode({ address: testutils_spec_1.unused.address }).finish());
# +            const data = await client.queryUnverified(`/cosmos.bank.v1beta1.Query/AllBalances`, requestData);
# +            const response = query_1.QueryAllBalancesResponse.decode(data);
# +            expect(response.balances.length).toEqual(2);
# +            tmClient.disconnect();
# +        });
# +    });
# +});
# +//# sourceMappingURL=queryclient.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/queryclient/queryclient.spec.js.map b/node_modules/@cosmjs/stargate/build/queryclient/queryclient.spec.js.map
# new file mode 100644
# index 0000000..66cd165
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/queryclient/queryclient.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"queryclient.spec.js","sourceRoot":"","sources":["../../src/queryclient/queryclient.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/queryclient/utils.js b/node_modules/@cosmjs/stargate/build/queryclient/utils.js
# index 6f4ecaa..0cca6a8 100644
# --- a/node_modules/@cosmjs/stargate/build/queryclient/utils.js
# +++ b/node_modules/@cosmjs/stargate/build/queryclient/utils.js
# @@ -25,15 +25,21 @@ exports.toAccAddress = toAccAddress;
#   * request the next page.
#   */
#  function createPagination(paginationKey) {
# -    return paginationKey ? pagination_1.PageRequest.fromPartial({ key: paginationKey }) : undefined;
# +    return paginationKey
# +        ? pagination_1.PageRequest.fromPartial({
# +            key: paginationKey,
# +            offset: long_1.default.fromNumber(0, true),
# +            limit: long_1.default.fromNumber(0, true),
# +            countTotal: false,
# +        })
# +        : undefined;
#  }
#  exports.createPagination = createPagination;
#  function createProtobufRpcClient(base) {
#      return {
# -        request: async (service, method, data) => {
# +        request: (service, method, data) => {
#              const path = `/${service}/${method}`;
# -            const response = await base.queryAbci(path, data, undefined);
# -            return response.value;
# +            return base.queryUnverified(path, data);
#          },
#      };
#  }
# diff --git a/node_modules/@cosmjs/stargate/build/queryclient/utils.js.map b/node_modules/@cosmjs/stargate/build/queryclient/utils.js.map
# index a5ebf90..97851de 100644
# --- a/node_modules/@cosmjs/stargate/build/queryclient/utils.js.map
# +++ b/node_modules/@cosmjs/stargate/build/queryclient/utils.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/queryclient/utils.ts"],"names":[],"mappings":";;;;;;AAAA,+CAAyD;AACzD,uCAA+C;AAC/C,kFAAgF;AAChF,gDAAwB;AAIxB;;;;GAIG;AACH,SAAgB,YAAY,CAAC,OAAe;IAC1C,OAAO,IAAA,qBAAU,EAAC,OAAO,CAAC,CAAC,IAAI,CAAC;AAClC,CAAC;AAFD,oCAEC;AAED;;;;;;GAMG;AACH,SAAgB,gBAAgB,CAAC,aAA0B;IACzD,OAAO,aAAa,CAAC,CAAC,CAAC,wBAAW,CAAC,WAAW,CAAC,EAAE,GAAG,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AACrF,CAAC;AAFD,4CAEC;AAMD,SAAgB,uBAAuB,CAAC,IAAiB;IACvD,OAAO;QACL,OAAO,EAAE,KAAK,EAAE,OAAe,EAAE,MAAc,EAAE,IAAgB,EAAuB,EAAE;YACxF,MAAM,IAAI,GAAG,IAAI,OAAO,IAAI,MAAM,EAAE,CAAC;YACrC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;YAC7D,OAAO,QAAQ,CAAC,KAAK,CAAC;QACxB,CAAC;KACF,CAAC;AACJ,CAAC;AARD,0DAQC;AAED;;;GAGG;AACH,SAAgB,OAAO,CAAC,KAAsC;IAC5D,MAAM,YAAY,GAAG,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IACzD,OAAO,cAAI,CAAC,WAAW,CAAC,CAAC,GAAG,YAAY,CAAC,gBAAgB,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AACtE,CAAC;AAHD,0BAGC;AAED;;;;;GAKG;AACH,SAAgB,2BAA2B,CAAC,KAA0B;IACpE,MAAM,QAAQ,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAA,oBAAS,EAAC,KAAK,CAAC,CAAC;IACtE,OAAO,cAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;AAC3C,CAAC;AAHD,kEAGC"}
# \ No newline at end of file
# +{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/queryclient/utils.ts"],"names":[],"mappings":";;;;;;AAAA,+CAAyD;AACzD,uCAA+C;AAC/C,kFAAgF;AAChF,gDAAwB;AAIxB;;;;GAIG;AACH,SAAgB,YAAY,CAAC,OAAe;IAC1C,OAAO,IAAA,qBAAU,EAAC,OAAO,CAAC,CAAC,IAAI,CAAC;AAClC,CAAC;AAFD,oCAEC;AAED;;;;;;GAMG;AACH,SAAgB,gBAAgB,CAAC,aAA0B;IACzD,OAAO,aAAa;QAClB,CAAC,CAAC,wBAAW,CAAC,WAAW,CAAC;YACtB,GAAG,EAAE,aAAa;YAClB,MAAM,EAAE,cAAI,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC;YAChC,KAAK,EAAE,cAAI,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC;YAC/B,UAAU,EAAE,KAAK;SAClB,CAAC;QACJ,CAAC,CAAC,SAAS,CAAC;AAChB,CAAC;AATD,4CASC;AAMD,SAAgB,uBAAuB,CAAC,IAAiB;IACvD,OAAO;QACL,OAAO,EAAE,CAAC,OAAe,EAAE,MAAc,EAAE,IAAgB,EAAuB,EAAE;YAClF,MAAM,IAAI,GAAG,IAAI,OAAO,IAAI,MAAM,EAAE,CAAC;YACrC,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC1C,CAAC;KACF,CAAC;AACJ,CAAC;AAPD,0DAOC;AAED;;;GAGG;AACH,SAAgB,OAAO,CAAC,KAAsC;IAC5D,MAAM,YAAY,GAAG,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IACzD,OAAO,cAAI,CAAC,WAAW,CAAC,CAAC,GAAG,YAAY,CAAC,gBAAgB,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AACtE,CAAC;AAHD,0BAGC;AAED;;;;;GAKG;AACH,SAAgB,2BAA2B,CAAC,KAA0B;IACpE,MAAM,QAAQ,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAA,oBAAS,EAAC,KAAK,CAAC,CAAC;IACtE,OAAO,cAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;AAC3C,CAAC;AAHD,kEAGC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/queryclient/utils.spec.d.ts b/node_modules/@cosmjs/stargate/build/queryclient/utils.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/queryclient/utils.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/queryclient/utils.spec.js b/node_modules/@cosmjs/stargate/build/queryclient/utils.spec.js
# new file mode 100644
# index 0000000..6306aae
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/queryclient/utils.spec.js
# @@ -0,0 +1,19 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +const encoding_1 = require("@cosmjs/encoding");
# +const utils_1 = require("./utils");
# +describe("utils", () => {
# +    describe("decodeCosmosSdkDecFromProto", () => {
# +        it("works for string inputs", () => {
# +            expect((0, utils_1.decodeCosmosSdkDecFromProto)("0").toString()).toEqual("0");
# +            expect((0, utils_1.decodeCosmosSdkDecFromProto)("1").toString()).toEqual("0.000000000000000001");
# +            expect((0, utils_1.decodeCosmosSdkDecFromProto)("3000000").toString()).toEqual("0.000000000003");
# +            expect((0, utils_1.decodeCosmosSdkDecFromProto)("123456789123456789").toString()).toEqual("0.123456789123456789");
# +            expect((0, utils_1.decodeCosmosSdkDecFromProto)("1234567891234567890").toString()).toEqual("1.23456789123456789");
# +        });
# +        it("works for byte inputs", () => {
# +            expect((0, utils_1.decodeCosmosSdkDecFromProto)((0, encoding_1.fromHex)("313330303033343138373830313631333938")).toString()).toEqual("0.130003418780161398");
# +        });
# +    });
# +});
# +//# sourceMappingURL=utils.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/queryclient/utils.spec.js.map b/node_modules/@cosmjs/stargate/build/queryclient/utils.spec.js.map
# new file mode 100644
# index 0000000..eefec81
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/queryclient/utils.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"utils.spec.js","sourceRoot":"","sources":["../../src/queryclient/utils.spec.ts"],"names":[],"mappings":";;AAAA,+CAA2C;AAE3C,mCAAsD;AAEtD,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;IACrB,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;QAC3C,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;YACjC,MAAM,CAAC,IAAA,mCAA2B,EAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACjE,MAAM,CAAC,IAAA,mCAA2B,EAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;YACpF,MAAM,CAAC,IAAA,mCAA2B,EAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;YACpF,MAAM,CAAC,IAAA,mCAA2B,EAAC,oBAAoB,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;YACrG,MAAM,CAAC,IAAA,mCAA2B,EAAC,qBAAqB,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;QACvG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAC/B,MAAM,CAAC,IAAA,mCAA2B,EAAC,IAAA,kBAAO,EAAC,sCAAsC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CACrG,sBAAsB,CACvB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/signingstargateclient.d.ts b/node_modules/@cosmjs/stargate/build/signingstargateclient.d.ts
# index f678ec3..b0bd8bb 100644
# --- a/node_modules/@cosmjs/stargate/build/signingstargateclient.d.ts
# +++ b/node_modules/@cosmjs/stargate/build/signingstargateclient.d.ts
# @@ -1,10 +1,10 @@
#  import { StdFee } from "@cosmjs/amino";
#  import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
# -import { HttpEndpoint, TendermintClient } from "@cosmjs/tendermint-rpc";
# +import { Tendermint34Client } from "@cosmjs/tendermint-rpc";
#  import { Coin } from "cosmjs-types/cosmos/base/v1beta1/coin";
#  import { TxRaw } from "cosmjs-types/cosmos/tx/v1beta1/tx";
#  import { Height } from "cosmjs-types/ibc/core/client/v1/client";
# -import { AminoConverters, AminoTypes } from "./aminotypes";
# +import { AminoTypes } from "./aminotypes";
#  import { GasPrice } from "./fee";
#  import { DeliverTxResponse, StargateClient, StargateClientOptions } from "./stargateclient";
#  export declare const defaultRegistryTypes: ReadonlyArray<[string, GeneratedType]>;
# @@ -25,11 +25,11 @@ export interface PrivateSigningStargateClient {
#  export interface SigningStargateClientOptions extends StargateClientOptions {
#      readonly registry?: Registry;
#      readonly aminoTypes?: AminoTypes;
# +    readonly prefix?: string;
#      readonly broadcastTimeoutMs?: number;
#      readonly broadcastPollIntervalMs?: number;
#      readonly gasPrice?: GasPrice;
#  }
# -export declare function createDefaultAminoConverters(): AminoConverters;
#  export declare class SigningStargateClient extends StargateClient {
#      readonly registry: Registry;
#      readonly broadcastTimeoutMs: number | undefined;
# @@ -37,18 +37,7 @@ export declare class SigningStargateClient extends StargateClient {
#      private readonly signer;
#      private readonly aminoTypes;
#      private readonly gasPrice;
# -    /**
# -     * Creates an instance by connecting to the given Tendermint RPC endpoint.
# -     *
# -     * For now this uses the Tendermint 0.34 client. If you need Tendermint 0.37
# -     * support, see `createWithSigner`.
# -     */
# -    static connectWithSigner(endpoint: string | HttpEndpoint, signer: OfflineSigner, options?: SigningStargateClientOptions): Promise<SigningStargateClient>;
# -    /**
# -     * Creates an instance from a manually created Tendermint client.
# -     * Use this to use `Tendermint37Client` instead of `Tendermint34Client`.
# -     */
# -    static createWithSigner(tmClient: TendermintClient, signer: OfflineSigner, options?: SigningStargateClientOptions): Promise<SigningStargateClient>;
# +    static connectWithSigner(endpoint: string, signer: OfflineSigner, options?: SigningStargateClientOptions): Promise<SigningStargateClient>;
#      /**
#       * Creates a client in offline mode.
#       *
# @@ -59,7 +48,7 @@ export declare class SigningStargateClient extends StargateClient {
#       * exception will be raised.
#       */
#      static offline(signer: OfflineSigner, options?: SigningStargateClientOptions): Promise<SigningStargateClient>;
# -    protected constructor(tmClient: TendermintClient | undefined, signer: OfflineSigner, options: SigningStargateClientOptions);
# +    protected constructor(tmClient: Tendermint34Client | undefined, signer: OfflineSigner, options: SigningStargateClientOptions);
#      simulate(signerAddress: string, messages: readonly EncodeObject[], memo: string | undefined): Promise<number>;
#      sendTokens(senderAddress: string, recipientAddress: string, amount: readonly Coin[], fee: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
#      delegateTokens(delegatorAddress: string, validatorAddress: string, amount: Coin, fee: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
# diff --git a/node_modules/@cosmjs/stargate/build/signingstargateclient.js b/node_modules/@cosmjs/stargate/build/signingstargateclient.js
# index a72bc5e..e9904c1 100644
# --- a/node_modules/@cosmjs/stargate/build/signingstargateclient.js
# +++ b/node_modules/@cosmjs/stargate/build/signingstargateclient.js
# @@ -3,7 +3,7 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
#      return (mod && mod.__esModule) ? mod : { "default": mod };
#  };
#  Object.defineProperty(exports, "__esModule", { value: true });
# -exports.SigningStargateClient = exports.createDefaultAminoConverters = exports.defaultRegistryTypes = void 0;
# +exports.SigningStargateClient = exports.defaultRegistryTypes = void 0;
#  const amino_1 = require("@cosmjs/amino");
#  const encoding_1 = require("@cosmjs/encoding");
#  const math_1 = require("@cosmjs/math");
# @@ -31,25 +31,28 @@ exports.defaultRegistryTypes = [
#      ...modules_1.govTypes,
#      ...modules_1.stakingTypes,
#      ...modules_1.ibcTypes,
# -    ...modules_1.vestingTypes,
#  ];
# -function createDefaultAminoConverters() {
# +function createDefaultRegistry() {
# +    return new proto_signing_1.Registry(exports.defaultRegistryTypes);
# +}
# +function createDefaultTypes(prefix) {
#      return {
#          ...(0, modules_2.createAuthzAminoConverters)(),
#          ...(0, modules_2.createBankAminoConverters)(),
#          ...(0, modules_2.createDistributionAminoConverters)(),
#          ...(0, modules_2.createGovAminoConverters)(),
# -        ...(0, modules_2.createStakingAminoConverters)(),
# +        ...(0, modules_2.createStakingAminoConverters)(prefix),
#          ...(0, modules_2.createIbcAminoConverters)(),
# -        ...(0, modules_2.createFeegrantAminoConverters)(),
# -        ...(0, modules_2.createVestingAminoConverters)(),
# +        ...(0, modules_2.createFreegrantAminoConverters)(),
#      };
#  }
# -exports.createDefaultAminoConverters = createDefaultAminoConverters;
#  class SigningStargateClient extends stargateclient_1.StargateClient {
#      constructor(tmClient, signer, options) {
# +        var _a;
#          super(tmClient, options);
# -        const { registry = new proto_signing_1.Registry(exports.defaultRegistryTypes), aminoTypes = new aminotypes_1.AminoTypes(createDefaultAminoConverters()), } = options;
# +        // TODO: do we really want to set a default here? Ideally we could get it from the signer such that users only have to set it once.
# +        const prefix = (_a = options.prefix) !== null && _a !== void 0 ? _a : "cosmos";
# +        const { registry = createDefaultRegistry(), aminoTypes = new aminotypes_1.AminoTypes(createDefaultTypes(prefix)) } = options;
#          this.registry = registry;
#          this.aminoTypes = aminoTypes;
#          this.signer = signer;
# @@ -57,21 +60,8 @@ class SigningStargateClient extends stargateclient_1.StargateClient {
#          this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;
#          this.gasPrice = options.gasPrice;
#      }
# -    /**
# -     * Creates an instance by connecting to the given Tendermint RPC endpoint.
# -     *
# -     * For now this uses the Tendermint 0.34 client. If you need Tendermint 0.37
# -     * support, see `createWithSigner`.
# -     */
#      static async connectWithSigner(endpoint, signer, options = {}) {
#          const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);
# -        return SigningStargateClient.createWithSigner(tmClient, signer, options);
# -    }
# -    /**
# -     * Creates an instance from a manually created Tendermint client.
# -     * Use this to use `Tendermint37Client` instead of `Tendermint34Client`.
# -     */
# -    static async createWithSigner(tmClient, signer, options = {}) {
#          return new SigningStargateClient(tmClient, signer, options);
#      }
#      /**
# @@ -226,7 +216,7 @@ class SigningStargateClient extends stargateclient_1.StargateClient {
#          const signedTxBodyBytes = this.registry.encode(signedTxBodyEncodeObject);
#          const signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();
#          const signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();
# -        const signedAuthInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{ pubkey, sequence: signedSequence }], signed.fee.amount, signedGasLimit, signed.fee.granter, signed.fee.payer, signMode);
# +        const signedAuthInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{ pubkey, sequence: signedSequence }], signed.fee.amount, signedGasLimit, signMode);
#          return tx_3.TxRaw.fromPartial({
#              bodyBytes: signedTxBodyBytes,
#              authInfoBytes: signedAuthInfoBytes,
# @@ -236,10 +226,11 @@ class SigningStargateClient extends stargateclient_1.StargateClient {
#      async signDirect(signerAddress, messages, fee, memo, { accountNumber, sequence, chainId }) {
#          (0, utils_1.assert)((0, proto_signing_1.isOfflineDirectSigner)(this.signer));
#          const accountFromSigner = (await this.signer.getAccounts()).find((account) => account.address === signerAddress);
# +        const account = await this.getAccount(signerAddress);
#          if (!accountFromSigner) {
#              throw new Error("Failed to retrieve account from signer");
#          }
# -        const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));
# +        let pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));
#          const txBodyEncodeObject = {
#              typeUrl: "/cosmos.tx.v1beta1.TxBody",
#              value: {
# @@ -249,9 +240,9 @@ class SigningStargateClient extends stargateclient_1.StargateClient {
#          };
#          const txBodyBytes = this.registry.encode(txBodyEncodeObject);
#          const gasLimit = math_1.Int53.fromString(fee.gas).toNumber();
# -        const authInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{ pubkey, sequence }], fee.amount, gasLimit, fee.granter, fee.payer);
# +        const authInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{ pubkey, sequence }], fee.amount, gasLimit);
#          const signDoc = (0, proto_signing_1.makeSignDoc)(txBodyBytes, authInfoBytes, chainId, accountNumber);
# -        const { signature, signed } = await this.signer.signDirect(signerAddress, signDoc);
# +        const { signature, signed } = await this.signer.signDirect(signerAddress, signDoc, pubkey.typeUrl);
#          return tx_3.TxRaw.fromPartial({
#              bodyBytes: signed.bodyBytes,
#              authInfoBytes: signed.authInfoBytes,
# diff --git a/node_modules/@cosmjs/stargate/build/signingstargateclient.js.map b/node_modules/@cosmjs/stargate/build/signingstargateclient.js.map
# index f9ea931..4d1a0dd 100644
# --- a/node_modules/@cosmjs/stargate/build/signingstargateclient.js.map
# +++ b/node_modules/@cosmjs/stargate/build/signingstargateclient.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"signingstargateclient.js","sourceRoot":"","sources":["../src/signingstargateclient.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# +{"version":3,"file":"signingstargateclient.js","sourceRoot":"","sources":["../src/signingstargateclient.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/signingstargateclient.spec.d.ts b/node_modules/@cosmjs/stargate/build/signingstargateclient.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/signingstargateclient.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/signingstargateclient.spec.js b/node_modules/@cosmjs/stargate/build/signingstargateclient.spec.js
# new file mode 100644
# index 0000000..7828dc3
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/signingstargateclient.spec.js
# @@ -0,0 +1,652 @@
# +"use strict";
# +var __importDefault = (this && this.__importDefault) || function (mod) {
# +    return (mod && mod.__esModule) ? mod : { "default": mod };
# +};
# +Object.defineProperty(exports, "__esModule", { value: true });
# +/* eslint-disable @typescript-eslint/naming-convention,no-bitwise */
# +const amino_1 = require("@cosmjs/amino");
# +const proto_signing_1 = require("@cosmjs/proto-signing");
# +const utils_1 = require("@cosmjs/utils");
# +const tx_1 = require("cosmjs-types/cosmos/bank/v1beta1/tx");
# +const coin_1 = require("cosmjs-types/cosmos/base/v1beta1/coin");
# +const tx_2 = require("cosmjs-types/cosmos/staking/v1beta1/tx");
# +const tx_3 = require("cosmjs-types/cosmos/tx/v1beta1/tx");
# +const long_1 = __importDefault(require("long"));
# +const minimal_1 = __importDefault(require("protobufjs/minimal"));
# +const aminotypes_1 = require("./aminotypes");
# +const signingstargateclient_1 = require("./signingstargateclient");
# +const stargateclient_1 = require("./stargateclient");
# +const testutils_spec_1 = require("./testutils.spec");
# +describe("SigningStargateClient", () => {
# +    describe("constructor", () => {
# +        it("can be constructed with custom registry", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +            const registry = new proto_signing_1.Registry();
# +            registry.register("/custom.MsgCustom", tx_1.MsgSend);
# +            const options = { ...testutils_spec_1.defaultSigningClientOptions, registry: registry };
# +            const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, options);
# +            const openedClient = client;
# +            expect(openedClient.registry.lookupType("/custom.MsgCustom")).toEqual(tx_1.MsgSend);
# +        });
# +    });
# +    describe("simulate", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +            const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +            const msg = tx_2.MsgDelegate.fromPartial({
# +                delegatorAddress: testutils_spec_1.faucet.address0,
# +                validatorAddress: testutils_spec_1.validator.validatorAddress,
# +                amount: (0, proto_signing_1.coin)(1234, "ustake"),
# +            });
# +            const msgAny = {
# +                typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                value: msg,
# +            };
# +            const memo = "Use your power wisely";
# +            const gasUsed = await client.simulate(testutils_spec_1.faucet.address0, [msgAny], memo);
# +            expect(gasUsed).toBeGreaterThanOrEqual(101000);
# +            expect(gasUsed).toBeLessThanOrEqual(150000);
# +            client.disconnect();
# +        });
# +    });
# +    describe("sendTokens", () => {
# +        it("works with direct signer", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +            const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +            const amount = (0, proto_signing_1.coins)(7890, "ucosm");
# +            const beneficiaryAddress = (0, testutils_spec_1.makeRandomAddress)();
# +            const memo = "for dinner";
# +            // no tokens here
# +            const before = await client.getBalance(beneficiaryAddress, "ucosm");
# +            expect(before).toEqual({
# +                denom: "ucosm",
# +                amount: "0",
# +            });
# +            // send
# +            const result = await client.sendTokens(testutils_spec_1.faucet.address0, beneficiaryAddress, amount, testutils_spec_1.defaultSendFee, memo);
# +            (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +            expect(result.rawLog).toBeTruthy();
# +            // got tokens
# +            const after = await client.getBalance(beneficiaryAddress, "ucosm");
# +            expect(after).toEqual(amount[0]);
# +        });
# +        it("works with legacy Amino signer", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const wallet = await amino_1.Secp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +            const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +            const amount = (0, proto_signing_1.coins)(7890, "ucosm");
# +            const beneficiaryAddress = (0, testutils_spec_1.makeRandomAddress)();
# +            const memo = "for dinner";
# +            // no tokens here
# +            const before = await client.getBalance(beneficiaryAddress, "ucosm");
# +            expect(before).toEqual({
# +                denom: "ucosm",
# +                amount: "0",
# +            });
# +            // send
# +            const result = await client.sendTokens(testutils_spec_1.faucet.address0, beneficiaryAddress, amount, testutils_spec_1.defaultSendFee, memo);
# +            (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +            expect(result.rawLog).toBeTruthy();
# +            // got tokens
# +            const after = await client.getBalance(beneficiaryAddress, "ucosm");
# +            expect(after).toEqual(amount[0]);
# +        });
# +    });
# +    describe("sendIbcTokens", () => {
# +        it("works with direct signing", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp42)();
# +            const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +            const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +            const memo = "Cross-chain fun";
# +            const fee = {
# +                amount: (0, proto_signing_1.coins)(2000, "ucosm"),
# +                gas: "180000", // 180k
# +            };
# +            // both timeouts set
# +            {
# +                const result = await client.sendIbcTokens(testutils_spec_1.faucet.address0, testutils_spec_1.faucet.address1, (0, proto_signing_1.coin)(1234, "ucosm"), "fooPort", "fooChannel", { revisionHeight: long_1.default.fromNumber(123), revisionNumber: long_1.default.fromNumber(456) }, Math.floor(Date.now() / 1000) + 60, fee, memo);
# +                // CheckTx must pass but the execution must fail in DeliverTx due to invalid channel/port
# +                expect((0, stargateclient_1.isDeliverTxFailure)(result)).toEqual(true);
# +            }
# +            // no height timeout
# +            {
# +                const result = await client.sendIbcTokens(testutils_spec_1.faucet.address0, testutils_spec_1.faucet.address1, (0, proto_signing_1.coin)(1234, "ucosm"), "fooPort", "fooChannel", undefined, Math.floor(Date.now() / 1000) + 60, fee, memo);
# +                // CheckTx must pass but the execution must fail in DeliverTx due to invalid channel/port
# +                expect((0, stargateclient_1.isDeliverTxFailure)(result)).toEqual(true);
# +            }
# +        });
# +        it("works with Amino signing", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp42)();
# +            const wallet = await amino_1.Secp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +            const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +            const memo = "Cross-chain fun";
# +            const fee = {
# +                amount: (0, proto_signing_1.coins)(2000, "ucosm"),
# +                gas: "180000", // 180k
# +            };
# +            // both timeouts set
# +            {
# +                const result = await client.sendIbcTokens(testutils_spec_1.faucet.address0, testutils_spec_1.faucet.address1, (0, proto_signing_1.coin)(1234, "ucosm"), "fooPort", "fooChannel", { revisionHeight: long_1.default.fromNumber(123), revisionNumber: long_1.default.fromNumber(456) }, Math.floor(Date.now() / 1000) + 60, fee, memo);
# +                // CheckTx must pass but the execution must fail in DeliverTx due to invalid channel/port
# +                expect((0, stargateclient_1.isDeliverTxFailure)(result)).toEqual(true);
# +            }
# +            // no height timeout
# +            {
# +                const result = await client.sendIbcTokens(testutils_spec_1.faucet.address0, testutils_spec_1.faucet.address1, (0, proto_signing_1.coin)(1234, "ucosm"), "fooPort", "fooChannel", undefined, Math.floor(Date.now() / 1000) + 60, fee, memo);
# +                // CheckTx must pass but the execution must fail in DeliverTx due to invalid channel/port
# +                expect((0, stargateclient_1.isDeliverTxFailure)(result)).toEqual(true);
# +            }
# +        });
# +    });
# +    describe("signAndBroadcast", () => {
# +        describe("direct mode", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp)();
# +                const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +                const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +                const msg = tx_2.MsgDelegate.fromPartial({
# +                    delegatorAddress: testutils_spec_1.faucet.address0,
# +                    validatorAddress: testutils_spec_1.validator.validatorAddress,
# +                    amount: (0, proto_signing_1.coin)(1234, "ustake"),
# +                });
# +                const msgAny = {
# +                    typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                    value: msg,
# +                };
# +                const fee = {
# +                    amount: (0, proto_signing_1.coins)(2000, "ucosm"),
# +                    gas: "180000", // 180k
# +                };
# +                const memo = "Use your power wisely";
# +                const result = await client.signAndBroadcast(testutils_spec_1.faucet.address0, [msgAny], fee, memo);
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +                expect(result.code).toEqual(0);
# +                expect(result.gasWanted).toEqual(180000);
# +                expect(result.gasUsed).toBeLessThanOrEqual(180000);
# +                expect(result.gasUsed).toBeGreaterThan(100000);
# +            });
# +            it("returns DeliverTxFailure on DeliverTx failure", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp)();
# +                const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +                const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +                const msg = tx_1.MsgSend.fromPartial({
# +                    fromAddress: testutils_spec_1.faucet.address0,
# +                    toAddress: (0, testutils_spec_1.makeRandomAddress)(),
# +                    amount: (0, proto_signing_1.coins)(Number.MAX_SAFE_INTEGER, "ustake"),
# +                });
# +                const msgAny = {
# +                    typeUrl: "/cosmos.bank.v1beta1.MsgSend",
# +                    value: msg,
# +                };
# +                const fee = {
# +                    amount: (0, proto_signing_1.coins)(2000, "ucosm"),
# +                    gas: "99000",
# +                };
# +                const result = await client.signAndBroadcast(testutils_spec_1.faucet.address0, [msgAny], fee);
# +                (0, stargateclient_1.assertIsDeliverTxFailure)(result);
# +                expect(result.code).toBeGreaterThan(0);
# +                expect(result.gasWanted).toEqual(99000);
# +                expect(result.gasUsed).toBeLessThanOrEqual(99000);
# +                expect(result.gasUsed).toBeGreaterThan(40000);
# +            });
# +            it("works with auto gas", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp)();
# +                const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +                const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, {
# +                    ...testutils_spec_1.defaultSigningClientOptions,
# +                    gasPrice: testutils_spec_1.defaultGasPrice,
# +                });
# +                const msg = tx_2.MsgDelegate.fromPartial({
# +                    delegatorAddress: testutils_spec_1.faucet.address0,
# +                    validatorAddress: testutils_spec_1.validator.validatorAddress,
# +                    amount: (0, proto_signing_1.coin)(1234, "ustake"),
# +                });
# +                const msgAny = {
# +                    typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                    value: msg,
# +                };
# +                const result = await client.signAndBroadcast(testutils_spec_1.faucet.address0, [msgAny], "auto");
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +            });
# +            it("works with a modifying signer", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp)();
# +                const wallet = await testutils_spec_1.ModifyingDirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +                const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +                const msg = tx_2.MsgDelegate.fromPartial({
# +                    delegatorAddress: testutils_spec_1.faucet.address0,
# +                    validatorAddress: testutils_spec_1.validator.validatorAddress,
# +                    amount: (0, proto_signing_1.coin)(1234, "ustake"),
# +                });
# +                const msgAny = {
# +                    typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                    value: msg,
# +                };
# +                const fee = {
# +                    amount: (0, proto_signing_1.coins)(2000, "ucosm"),
# +                    gas: "180000", // 180k
# +                };
# +                const memo = "Use your power wisely";
# +                const result = await client.signAndBroadcast(testutils_spec_1.faucet.address0, [msgAny], fee, memo);
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +                await (0, utils_1.sleep)(1000);
# +                const searchResult = await client.getTx(result.transactionHash);
# +                (0, utils_1.assert)(searchResult, "Must find transaction");
# +                const tx = (0, proto_signing_1.decodeTxRaw)(searchResult.tx);
# +                // From ModifyingDirectSecp256k1HdWallet
# +                expect(tx.body.memo).toEqual("This was modified");
# +                expect({ ...tx.authInfo.fee.amount[0] }).toEqual((0, proto_signing_1.coin)(3000, "ucosm"));
# +                expect(tx.authInfo.fee.gasLimit.toNumber()).toEqual(333333);
# +            });
# +        });
# +        describe("legacy Amino mode", () => {
# +            it("works with bank MsgSend", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp)();
# +                const wallet = await amino_1.Secp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +                const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +                const msgSend = {
# +                    fromAddress: testutils_spec_1.faucet.address0,
# +                    toAddress: (0, testutils_spec_1.makeRandomAddress)(),
# +                    amount: (0, proto_signing_1.coins)(1234, "ucosm"),
# +                };
# +                const msgAny = {
# +                    typeUrl: "/cosmos.bank.v1beta1.MsgSend",
# +                    value: msgSend,
# +                };
# +                const fee = {
# +                    amount: (0, proto_signing_1.coins)(2000, "ucosm"),
# +                    gas: "200000",
# +                };
# +                const memo = "Use your tokens wisely";
# +                const result = await client.signAndBroadcast(testutils_spec_1.faucet.address0, [msgAny], fee, memo);
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +            });
# +            it("works with staking MsgDelegate", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp)();
# +                const wallet = await amino_1.Secp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +                const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +                const msgDelegate = {
# +                    delegatorAddress: testutils_spec_1.faucet.address0,
# +                    validatorAddress: testutils_spec_1.validator.validatorAddress,
# +                    amount: (0, proto_signing_1.coin)(1234, "ustake"),
# +                };
# +                const msgAny = {
# +                    typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                    value: msgDelegate,
# +                };
# +                const fee = {
# +                    amount: (0, proto_signing_1.coins)(2000, "ustake"),
# +                    gas: "200000",
# +                };
# +                const memo = "Use your tokens wisely";
# +                const result = await client.signAndBroadcast(testutils_spec_1.faucet.address0, [msgAny], fee, memo);
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +            });
# +            it("works with a custom registry and custom message", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp)();
# +                const wallet = await amino_1.Secp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +                const customRegistry = new proto_signing_1.Registry();
# +                const msgDelegateTypeUrl = "/cosmos.staking.v1beta1.MsgDelegate";
# +                const baseCustomMsgDelegate = {
# +                    customDelegatorAddress: "",
# +                    customValidatorAddress: "",
# +                };
# +                const CustomMsgDelegate = {
# +                    // Adapted from autogenerated MsgDelegate implementation
# +                    encode(message, writer = minimal_1.default.Writer.create()) {
# +                        var _a, _b;
# +                        writer.uint32(10).string((_a = message.customDelegatorAddress) !== null && _a !== void 0 ? _a : "");
# +                        writer.uint32(18).string((_b = message.customValidatorAddress) !== null && _b !== void 0 ? _b : "");
# +                        if (message.customAmount !== undefined && message.customAmount !== undefined) {
# +                            coin_1.Coin.encode(message.customAmount, writer.uint32(26).fork()).ldelim();
# +                        }
# +                        return writer;
# +                    },
# +                    decode() {
# +                        throw new Error("decode method should not be required");
# +                    },
# +                    fromJSON() {
# +                        throw new Error("fromJSON method should not be required");
# +                    },
# +                    fromPartial(object) {
# +                        const message = { ...baseCustomMsgDelegate };
# +                        if (object.customDelegatorAddress !== undefined && object.customDelegatorAddress !== null) {
# +                            message.customDelegatorAddress = object.customDelegatorAddress;
# +                        }
# +                        else {
# +                            message.customDelegatorAddress = "";
# +                        }
# +                        if (object.customValidatorAddress !== undefined && object.customValidatorAddress !== null) {
# +                            message.customValidatorAddress = object.customValidatorAddress;
# +                        }
# +                        else {
# +                            message.customValidatorAddress = "";
# +                        }
# +                        if (object.customAmount !== undefined && object.customAmount !== null) {
# +                            message.customAmount = coin_1.Coin.fromPartial(object.customAmount);
# +                        }
# +                        else {
# +                            message.customAmount = undefined;
# +                        }
# +                        return message;
# +                    },
# +                    toJSON() {
# +                        throw new Error("toJSON method should not be required");
# +                    },
# +                };
# +                customRegistry.register(msgDelegateTypeUrl, CustomMsgDelegate);
# +                const customAminoTypes = new aminotypes_1.AminoTypes({
# +                    "/cosmos.staking.v1beta1.MsgDelegate": {
# +                        aminoType: "cosmos-sdk/MsgDelegate",
# +                        toAmino: ({ customDelegatorAddress, customValidatorAddress, customAmount, }) => {
# +                            (0, utils_1.assert)(customDelegatorAddress, "missing customDelegatorAddress");
# +                            (0, utils_1.assert)(customValidatorAddress, "missing validatorAddress");
# +                            (0, utils_1.assert)(customAmount, "missing amount");
# +                            return {
# +                                delegator_address: customDelegatorAddress,
# +                                validator_address: customValidatorAddress,
# +                                amount: {
# +                                    amount: customAmount.amount,
# +                                    denom: customAmount.denom,
# +                                },
# +                            };
# +                        },
# +                        fromAmino: ({ delegator_address, validator_address, amount, }) => ({
# +                            customDelegatorAddress: delegator_address,
# +                            customValidatorAddress: validator_address,
# +                            customAmount: coin_1.Coin.fromPartial(amount),
# +                        }),
# +                    },
# +                });
# +                const options = {
# +                    ...testutils_spec_1.defaultSigningClientOptions,
# +                    registry: customRegistry,
# +                    aminoTypes: customAminoTypes,
# +                };
# +                const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, options);
# +                const msg = {
# +                    customDelegatorAddress: testutils_spec_1.faucet.address0,
# +                    customValidatorAddress: testutils_spec_1.validator.validatorAddress,
# +                    customAmount: (0, proto_signing_1.coin)(1234, "ustake"),
# +                };
# +                const msgAny = {
# +                    typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                    value: msg,
# +                };
# +                const fee = {
# +                    amount: (0, proto_signing_1.coins)(2000, "ucosm"),
# +                    gas: "200000",
# +                };
# +                const memo = "Use your power wisely";
# +                const result = await client.signAndBroadcast(testutils_spec_1.faucet.address0, [msgAny], fee, memo);
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +            });
# +            it("works with a modifying signer", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp)();
# +                const wallet = await testutils_spec_1.ModifyingSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +                const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +                const msg = {
# +                    delegatorAddress: testutils_spec_1.faucet.address0,
# +                    validatorAddress: testutils_spec_1.validator.validatorAddress,
# +                    amount: (0, proto_signing_1.coin)(1234, "ustake"),
# +                };
# +                const msgAny = {
# +                    typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                    value: msg,
# +                };
# +                const fee = {
# +                    amount: (0, proto_signing_1.coins)(2000, "ucosm"),
# +                    gas: "200000",
# +                };
# +                const memo = "Use your power wisely";
# +                const result = await client.signAndBroadcast(testutils_spec_1.faucet.address0, [msgAny], fee, memo);
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +                await (0, utils_1.sleep)(1000);
# +                const searchResult = await client.getTx(result.transactionHash);
# +                (0, utils_1.assert)(searchResult, "Must find transaction");
# +                const tx = (0, proto_signing_1.decodeTxRaw)(searchResult.tx);
# +                // From ModifyingSecp256k1HdWallet
# +                expect(tx.body.memo).toEqual("This was modified");
# +                expect({ ...tx.authInfo.fee.amount[0] }).toEqual((0, proto_signing_1.coin)(3000, "ucosm"));
# +                expect(tx.authInfo.fee.gasLimit.toNumber()).toEqual(333333);
# +            });
# +        });
# +    });
# +    describe("sign", () => {
# +        describe("direct mode", () => {
# +            it("works", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp)();
# +                const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +                const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +                const msg = tx_2.MsgDelegate.fromPartial({
# +                    delegatorAddress: testutils_spec_1.faucet.address0,
# +                    validatorAddress: testutils_spec_1.validator.validatorAddress,
# +                    amount: (0, proto_signing_1.coin)(1234, "ustake"),
# +                });
# +                const msgAny = {
# +                    typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                    value: msg,
# +                };
# +                const fee = {
# +                    amount: (0, proto_signing_1.coins)(2000, "ucosm"),
# +                    gas: "180000", // 180k
# +                };
# +                const memo = "Use your power wisely";
# +                const signed = await client.sign(testutils_spec_1.faucet.address0, [msgAny], fee, memo);
# +                // ensure signature is valid
# +                const result = await client.broadcastTx(Uint8Array.from(tx_3.TxRaw.encode(signed).finish()));
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +            });
# +            it("works with a modifying signer", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp)();
# +                const wallet = await testutils_spec_1.ModifyingDirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +                const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +                const msg = tx_2.MsgDelegate.fromPartial({
# +                    delegatorAddress: testutils_spec_1.faucet.address0,
# +                    validatorAddress: testutils_spec_1.validator.validatorAddress,
# +                    amount: (0, proto_signing_1.coin)(1234, "ustake"),
# +                });
# +                const msgAny = {
# +                    typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                    value: msg,
# +                };
# +                const fee = {
# +                    amount: (0, proto_signing_1.coins)(2000, "ucosm"),
# +                    gas: "180000", // 180k
# +                };
# +                const memo = "Use your power wisely";
# +                const signed = await client.sign(testutils_spec_1.faucet.address0, [msgAny], fee, memo);
# +                const body = tx_3.TxBody.decode(signed.bodyBytes);
# +                const authInfo = tx_3.AuthInfo.decode(signed.authInfoBytes);
# +                // From ModifyingDirectSecp256k1HdWallet
# +                expect(body.memo).toEqual("This was modified");
# +                expect({ ...authInfo.fee.amount[0] }).toEqual((0, proto_signing_1.coin)(3000, "ucosm"));
# +                expect(authInfo.fee.gasLimit.toNumber()).toEqual(333333);
# +                // ensure signature is valid
# +                const result = await client.broadcastTx(Uint8Array.from(tx_3.TxRaw.encode(signed).finish()));
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +            });
# +        });
# +        describe("legacy Amino mode", () => {
# +            it("works with bank MsgSend", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp)();
# +                const wallet = await amino_1.Secp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +                const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +                const msgSend = {
# +                    fromAddress: testutils_spec_1.faucet.address0,
# +                    toAddress: (0, testutils_spec_1.makeRandomAddress)(),
# +                    amount: (0, proto_signing_1.coins)(1234, "ucosm"),
# +                };
# +                const msgAny = {
# +                    typeUrl: "/cosmos.bank.v1beta1.MsgSend",
# +                    value: msgSend,
# +                };
# +                const fee = {
# +                    amount: (0, proto_signing_1.coins)(2000, "ucosm"),
# +                    gas: "200000",
# +                };
# +                const memo = "Use your tokens wisely";
# +                const signed = await client.sign(testutils_spec_1.faucet.address0, [msgAny], fee, memo);
# +                // ensure signature is valid
# +                const result = await client.broadcastTx(Uint8Array.from(tx_3.TxRaw.encode(signed).finish()));
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +            });
# +            it("works with staking MsgDelegate", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp)();
# +                const wallet = await amino_1.Secp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +                const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +                const msgDelegate = {
# +                    delegatorAddress: testutils_spec_1.faucet.address0,
# +                    validatorAddress: testutils_spec_1.validator.validatorAddress,
# +                    amount: (0, proto_signing_1.coin)(1234, "ustake"),
# +                };
# +                const msgAny = {
# +                    typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                    value: msgDelegate,
# +                };
# +                const fee = {
# +                    amount: (0, proto_signing_1.coins)(2000, "ustake"),
# +                    gas: "200000",
# +                };
# +                const memo = "Use your tokens wisely";
# +                const signed = await client.sign(testutils_spec_1.faucet.address0, [msgAny], fee, memo);
# +                // ensure signature is valid
# +                const result = await client.broadcastTx(Uint8Array.from(tx_3.TxRaw.encode(signed).finish()));
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +            });
# +            it("works with a custom registry and custom message", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp)();
# +                const wallet = await amino_1.Secp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +                const customRegistry = new proto_signing_1.Registry();
# +                const msgDelegateTypeUrl = "/cosmos.staking.v1beta1.MsgDelegate";
# +                const baseCustomMsgDelegate = {
# +                    customDelegatorAddress: "",
# +                    customValidatorAddress: "",
# +                };
# +                const CustomMsgDelegate = {
# +                    // Adapted from autogenerated MsgDelegate implementation
# +                    encode(message, writer = minimal_1.default.Writer.create()) {
# +                        var _a, _b;
# +                        writer.uint32(10).string((_a = message.customDelegatorAddress) !== null && _a !== void 0 ? _a : "");
# +                        writer.uint32(18).string((_b = message.customValidatorAddress) !== null && _b !== void 0 ? _b : "");
# +                        if (message.customAmount !== undefined && message.customAmount !== undefined) {
# +                            coin_1.Coin.encode(message.customAmount, writer.uint32(26).fork()).ldelim();
# +                        }
# +                        return writer;
# +                    },
# +                    decode() {
# +                        throw new Error("decode method should not be required");
# +                    },
# +                    fromJSON() {
# +                        throw new Error("fromJSON method should not be required");
# +                    },
# +                    fromPartial(object) {
# +                        const message = { ...baseCustomMsgDelegate };
# +                        if (object.customDelegatorAddress !== undefined && object.customDelegatorAddress !== null) {
# +                            message.customDelegatorAddress = object.customDelegatorAddress;
# +                        }
# +                        else {
# +                            message.customDelegatorAddress = "";
# +                        }
# +                        if (object.customValidatorAddress !== undefined && object.customValidatorAddress !== null) {
# +                            message.customValidatorAddress = object.customValidatorAddress;
# +                        }
# +                        else {
# +                            message.customValidatorAddress = "";
# +                        }
# +                        if (object.customAmount !== undefined && object.customAmount !== null) {
# +                            message.customAmount = coin_1.Coin.fromPartial(object.customAmount);
# +                        }
# +                        else {
# +                            message.customAmount = undefined;
# +                        }
# +                        return message;
# +                    },
# +                    toJSON() {
# +                        throw new Error("toJSON method should not be required");
# +                    },
# +                };
# +                customRegistry.register(msgDelegateTypeUrl, CustomMsgDelegate);
# +                const customAminoTypes = new aminotypes_1.AminoTypes({
# +                    "/cosmos.staking.v1beta1.MsgDelegate": {
# +                        aminoType: "cosmos-sdk/MsgDelegate",
# +                        toAmino: ({ customDelegatorAddress, customValidatorAddress, customAmount, }) => {
# +                            (0, utils_1.assert)(customDelegatorAddress, "missing customDelegatorAddress");
# +                            (0, utils_1.assert)(customValidatorAddress, "missing validatorAddress");
# +                            (0, utils_1.assert)(customAmount, "missing amount");
# +                            return {
# +                                delegator_address: customDelegatorAddress,
# +                                validator_address: customValidatorAddress,
# +                                amount: {
# +                                    amount: customAmount.amount,
# +                                    denom: customAmount.denom,
# +                                },
# +                            };
# +                        },
# +                        fromAmino: ({ delegator_address, validator_address, amount, }) => ({
# +                            customDelegatorAddress: delegator_address,
# +                            customValidatorAddress: validator_address,
# +                            customAmount: coin_1.Coin.fromPartial(amount),
# +                        }),
# +                    },
# +                });
# +                const options = {
# +                    ...testutils_spec_1.defaultSigningClientOptions,
# +                    registry: customRegistry,
# +                    aminoTypes: customAminoTypes,
# +                };
# +                const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, options);
# +                const msg = {
# +                    customDelegatorAddress: testutils_spec_1.faucet.address0,
# +                    customValidatorAddress: testutils_spec_1.validator.validatorAddress,
# +                    customAmount: (0, proto_signing_1.coin)(1234, "ustake"),
# +                };
# +                const msgAny = {
# +                    typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                    value: msg,
# +                };
# +                const fee = {
# +                    amount: (0, proto_signing_1.coins)(2000, "ucosm"),
# +                    gas: "200000",
# +                };
# +                const memo = "Use your power wisely";
# +                const signed = await client.sign(testutils_spec_1.faucet.address0, [msgAny], fee, memo);
# +                // ensure signature is valid
# +                const result = await client.broadcastTx(Uint8Array.from(tx_3.TxRaw.encode(signed).finish()));
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +            });
# +            it("works with a modifying signer", async () => {
# +                (0, testutils_spec_1.pendingWithoutSimapp)();
# +                const wallet = await testutils_spec_1.ModifyingSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +                const client = await signingstargateclient_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.tendermintUrl, wallet, testutils_spec_1.defaultSigningClientOptions);
# +                const msg = {
# +                    delegatorAddress: testutils_spec_1.faucet.address0,
# +                    validatorAddress: testutils_spec_1.validator.validatorAddress,
# +                    amount: (0, proto_signing_1.coin)(1234, "ustake"),
# +                };
# +                const msgAny = {
# +                    typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
# +                    value: msg,
# +                };
# +                const fee = {
# +                    amount: (0, proto_signing_1.coins)(2000, "ucosm"),
# +                    gas: "200000",
# +                };
# +                const memo = "Use your power wisely";
# +                const signed = await client.sign(testutils_spec_1.faucet.address0, [msgAny], fee, memo);
# +                const body = tx_3.TxBody.decode(signed.bodyBytes);
# +                const authInfo = tx_3.AuthInfo.decode(signed.authInfoBytes);
# +                // From ModifyingSecp256k1HdWallet
# +                expect(body.memo).toEqual("This was modified");
# +                expect({ ...authInfo.fee.amount[0] }).toEqual((0, proto_signing_1.coin)(3000, "ucosm"));
# +                expect(authInfo.fee.gasLimit.toNumber()).toEqual(333333);
# +                // ensure signature is valid
# +                const result = await client.broadcastTx(Uint8Array.from(tx_3.TxRaw.encode(signed).finish()));
# +                (0, stargateclient_1.assertIsDeliverTxSuccess)(result);
# +            });
# +        });
# +    });
# +});
# +//# sourceMappingURL=signingstargateclient.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/signingstargateclient.spec.js.map b/node_modules/@cosmjs/stargate/build/signingstargateclient.spec.js.map
# new file mode 100644
# index 0000000..2781ca8
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/signingstargateclient.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"signingstargateclient.spec.js","sourceRoot":"","sources":["../src/signingstargateclient.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/stargateclient.d.ts b/node_modules/@cosmjs/stargate/build/stargateclient.d.ts
# index 9ea82d8..c02653b 100644
# --- a/node_modules/@cosmjs/stargate/build/stargateclient.d.ts
# +++ b/node_modules/@cosmjs/stargate/build/stargateclient.d.ts
# @@ -1,8 +1,7 @@
# -import { HttpEndpoint, TendermintClient } from "@cosmjs/tendermint-rpc";
# +import { Tendermint34Client } from "@cosmjs/tendermint-rpc";
#  import { MsgData } from "cosmjs-types/cosmos/base/abci/v1beta1/abci";
#  import { Coin } from "cosmjs-types/cosmos/base/v1beta1/coin";
#  import { Account, AccountParser } from "./accounts";
# -import { Event } from "./events";
#  import { AuthExtension, BankExtension, StakingExtension, TxExtension } from "./modules";
#  import { QueryClient } from "./queryclient";
#  import { SearchTxFilter, SearchTxQuery } from "./search";
# @@ -30,20 +29,10 @@ export interface Block {
#  /** A transaction that is indexed as part of the transaction history */
#  export interface IndexedTx {
#      readonly height: number;
# -    /** The position of the transaction within the block. This is a 0-based index. */
# -    readonly txIndex: number;
#      /** Transaction hash (might be used as transaction ID). Guaranteed to be non-empty upper-case hex */
#      readonly hash: string;
#      /** Transaction execution error code. 0 on success. */
#      readonly code: number;
# -    readonly events: readonly Event[];
# -    /**
# -     * A string-based log document.
# -     *
# -     * This currently seems to merge attributes of multiple events into one event per type
# -     * (https://github.com/tendermint/tendermint/issues/9595). You might want to use the `events`
# -     * field instead.
# -     */
#      readonly rawLog: string;
#      /**
#       * Raw transaction bytes stored in Tendermint.
# @@ -73,19 +62,9 @@ export interface SequenceResponse {
#   */
#  export interface DeliverTxResponse {
#      readonly height: number;
# -    /** The position of the transaction within the block. This is a 0-based index. */
# -    readonly txIndex: number;
#      /** Error code. The transaction suceeded iff code is 0. */
#      readonly code: number;
#      readonly transactionHash: string;
# -    readonly events: readonly Event[];
# -    /**
# -     * A string-based log document.
# -     *
# -     * This currently seems to merge attributes of multiple events into one event per type
# -     * (https://github.com/tendermint/tendermint/issues/9595). You might want to use the `events`
# -     * field instead.
# -     */
#      readonly rawLog?: string;
#      readonly data?: readonly MsgData[];
#      readonly gasUsed: number;
# @@ -101,20 +80,9 @@ export declare function assertIsDeliverTxSuccess(result: DeliverTxResponse): voi
#   * Ensures the given result is a failure. Throws a detailed error message otherwise.
#   */
#  export declare function assertIsDeliverTxFailure(result: DeliverTxResponse): void;
# -/**
# - * An error when broadcasting the transaction. This contains the CheckTx errors
# - * from the blockchain. Once a transaction is included in a block no BroadcastTxError
# - * is thrown, even if the execution fails (DeliverTx errors).
# - */
# -export declare class BroadcastTxError extends Error {
# -    readonly code: number;
# -    readonly codespace: string;
# -    readonly log: string | undefined;
# -    constructor(code: number, codespace: string, log: string | undefined);
# -}
#  /** Use for testing only */
#  export interface PrivateStargateClient {
# -    readonly tmClient: TendermintClient | undefined;
# +    readonly tmClient: Tendermint34Client | undefined;
#  }
#  export interface StargateClientOptions {
#      readonly accountParser?: AccountParser;
# @@ -124,21 +92,10 @@ export declare class StargateClient {
#      private readonly queryClient;
#      private chainId;
#      private readonly accountParser;
# -    /**
# -     * Creates an instance by connecting to the given Tendermint RPC endpoint.
# -     *
# -     * For now this uses the Tendermint 0.34 client. If you need Tendermint 0.37
# -     * support, see `create`.
# -     */
# -    static connect(endpoint: string | HttpEndpoint, options?: StargateClientOptions): Promise<StargateClient>;
# -    /**
# -     * Creates an instance from a manually created Tendermint client.
# -     * Use this to use `Tendermint37Client` instead of `Tendermint34Client`.
# -     */
# -    static create(tmClient: TendermintClient, options?: StargateClientOptions): Promise<StargateClient>;
# -    protected constructor(tmClient: TendermintClient | undefined, options: StargateClientOptions);
# -    protected getTmClient(): TendermintClient | undefined;
# -    protected forceGetTmClient(): TendermintClient;
# +    static connect(endpoint: string, options?: StargateClientOptions): Promise<StargateClient>;
# +    protected constructor(tmClient: Tendermint34Client | undefined, options: StargateClientOptions);
# +    protected getTmClient(): Tendermint34Client | undefined;
# +    protected forceGetTmClient(): Tendermint34Client;
#      protected getQueryClient(): (QueryClient & AuthExtension & BankExtension & StakingExtension & TxExtension) | undefined;
#      protected forceGetQueryClient(): QueryClient & AuthExtension & BankExtension & StakingExtension & TxExtension;
#      getChainId(): Promise<string>;
# @@ -154,7 +111,6 @@ export declare class StargateClient {
#       * proofs from such a method.
#       */
#      getAllBalances(address: string): Promise<readonly Coin[]>;
# -    getBalanceStaked(address: string): Promise<Coin | null>;
#      getDelegation(delegatorAddress: string, validatorAddress: string): Promise<Coin | null>;
#      getTx(id: string): Promise<IndexedTx | null>;
#      searchTx(query: SearchTxQuery, filter?: SearchTxFilter): Promise<readonly IndexedTx[]>;
# diff --git a/node_modules/@cosmjs/stargate/build/stargateclient.js b/node_modules/@cosmjs/stargate/build/stargateclient.js
# index f3fc508..977b7d0 100644
# --- a/node_modules/@cosmjs/stargate/build/stargateclient.js
# +++ b/node_modules/@cosmjs/stargate/build/stargateclient.js
# @@ -1,14 +1,12 @@
#  "use strict";
#  Object.defineProperty(exports, "__esModule", { value: true });
# -exports.StargateClient = exports.BroadcastTxError = exports.assertIsDeliverTxFailure = exports.assertIsDeliverTxSuccess = exports.isDeliverTxSuccess = exports.isDeliverTxFailure = exports.TimeoutError = void 0;
# +exports.StargateClient = exports.assertIsDeliverTxFailure = exports.assertIsDeliverTxSuccess = exports.isDeliverTxSuccess = exports.isDeliverTxFailure = exports.TimeoutError = void 0;
#  /* eslint-disable @typescript-eslint/naming-convention */
# -const amino_1 = require("@cosmjs/amino");
#  const encoding_1 = require("@cosmjs/encoding");
#  const math_1 = require("@cosmjs/math");
#  const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
#  const utils_1 = require("@cosmjs/utils");
#  const accounts_1 = require("./accounts");
# -const events_1 = require("./events");
#  const modules_1 = require("./modules");
#  const queryclient_1 = require("./queryclient");
#  const search_1 = require("./search");
# @@ -45,20 +43,6 @@ function assertIsDeliverTxFailure(result) {
#      }
#  }
#  exports.assertIsDeliverTxFailure = assertIsDeliverTxFailure;
# -/**
# - * An error when broadcasting the transaction. This contains the CheckTx errors
# - * from the blockchain. Once a transaction is included in a block no BroadcastTxError
# - * is thrown, even if the execution fails (DeliverTx errors).
# - */
# -class BroadcastTxError extends Error {
# -    constructor(code, codespace, log) {
# -        super(`Broadcasting transaction failed with code ${code} (codespace: ${codespace}). Log: ${log}`);
# -        this.code = code;
# -        this.codespace = codespace;
# -        this.log = log;
# -    }
# -}
# -exports.BroadcastTxError = BroadcastTxError;
#  class StargateClient {
#      constructor(tmClient, options) {
#          if (tmClient) {
# @@ -68,21 +52,8 @@ class StargateClient {
#          const { accountParser = accounts_1.accountFromAny } = options;
#          this.accountParser = accountParser;
#      }
# -    /**
# -     * Creates an instance by connecting to the given Tendermint RPC endpoint.
# -     *
# -     * For now this uses the Tendermint 0.34 client. If you need Tendermint 0.37
# -     * support, see `create`.
# -     */
#      static async connect(endpoint, options = {}) {
#          const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);
# -        return StargateClient.create(tmClient, options);
# -    }
# -    /**
# -     * Creates an instance from a manually created Tendermint client.
# -     * Use this to use `Tendermint37Client` instead of `Tendermint34Client`.
# -     */
# -    static async create(tmClient, options = {}) {
#          return new StargateClient(tmClient, options);
#      }
#      getTmClient() {
# @@ -132,7 +103,7 @@ class StargateClient {
#      async getSequence(address) {
#          const account = await this.getAccount(address);
#          if (!account) {
# -            throw new Error(`Account '${address}' does not exist on chain. Send some tokens there before trying to query sequence.`);
# +            throw new Error("Account does not exist on chain. Send some tokens there before trying to query sequence.");
#          }
#          return {
#              accountNumber: account.accountNumber,
# @@ -167,26 +138,11 @@ class StargateClient {
#      async getAllBalances(address) {
#          return this.forceGetQueryClient().bank.allBalances(address);
#      }
# -    async getBalanceStaked(address) {
# -        const allDelegations = [];
# -        let startAtKey = undefined;
# -        do {
# -            const { delegationResponses, pagination } = await this.forceGetQueryClient().staking.delegatorDelegations(address, startAtKey);
# -            const loadedDelegations = delegationResponses || [];
# -            allDelegations.push(...loadedDelegations);
# -            startAtKey = pagination?.nextKey;
# -        } while (startAtKey !== undefined && startAtKey.length !== 0);
# -        const sumValues = allDelegations.reduce((previousValue, currentValue) => {
# -            // Safe because field is set to non-nullable (https://github.com/cosmos/cosmos-sdk/blob/v0.45.3/proto/cosmos/staking/v1beta1/staking.proto#L295)
# -            (0, utils_1.assert)(currentValue.balance);
# -            return previousValue !== null ? (0, amino_1.addCoins)(previousValue, currentValue.balance) : currentValue.balance;
# -        }, null);
# -        return sumValues;
# -    }
#      async getDelegation(delegatorAddress, validatorAddress) {
# +        var _a;
#          let delegatedAmount;
#          try {
# -            delegatedAmount = (await this.forceGetQueryClient().staking.delegation(delegatorAddress, validatorAddress)).delegationResponse?.balance;
# +            delegatedAmount = (_a = (await this.forceGetQueryClient().staking.delegation(delegatorAddress, validatorAddress)).delegationResponse) === null || _a === void 0 ? void 0 : _a.balance;
#          }
#          catch (e) {
#              if (e.toString().includes("key not found")) {
# @@ -199,8 +155,9 @@ class StargateClient {
#          return delegatedAmount || null;
#      }
#      async getTx(id) {
# +        var _a;
#          const results = await this.txsQuery(`tx.hash='${id}'`);
# -        return results[0] ?? null;
# +        return (_a = results[0]) !== null && _a !== void 0 ? _a : null;
#      }
#      async searchTx(query, filter = {}) {
#          const minHeight = filter.minHeight || 0;
# @@ -256,7 +213,7 @@ class StargateClient {
#          }, timeoutMs);
#          const pollForTx = async (txId) => {
#              if (timedOut) {
# -                throw new TimeoutError(`Transaction with ID ${txId} was submitted but was not yet found on the chain. You might want to check later. There was a wait of ${timeoutMs / 1000} seconds.`, txId);
# +                throw new TimeoutError(`Transaction with ID ${txId} was submitted but was not yet found on the chain. You might want to check later. There was a wait of ${timeoutMs / 10000} seconds.`, txId);
#              }
#              await (0, utils_1.sleep)(pollIntervalMs);
#              const result = await this.getTx(txId);
# @@ -264,8 +221,6 @@ class StargateClient {
#                  ? {
#                      code: result.code,
#                      height: result.height,
# -                    txIndex: result.txIndex,
# -                    events: result.events,
#                      rawLog: result.rawLog,
#                      transactionHash: txId,
#                      gasUsed: result.gasUsed,
# @@ -275,7 +230,7 @@ class StargateClient {
#          };
#          const broadcasted = await this.forceGetTmClient().broadcastTxSync({ tx });
#          if (broadcasted.code) {
# -            return Promise.reject(new BroadcastTxError(broadcasted.code, broadcasted.codespace ?? "", broadcasted.log));
# +            return Promise.reject(new Error(`Broadcasting transaction failed with code ${broadcasted.code} (codespace: ${broadcasted.codeSpace}). Log: ${broadcasted.log}`));
#          }
#          const transactionId = (0, encoding_1.toHex)(broadcasted.hash).toUpperCase();
#          return new Promise((resolve, reject) => pollForTx(transactionId).then((value) => {
# @@ -291,10 +246,8 @@ class StargateClient {
#          return results.txs.map((tx) => {
#              return {
#                  height: tx.height,
# -                txIndex: tx.index,
#                  hash: (0, encoding_1.toHex)(tx.hash).toUpperCase(),
#                  code: tx.result.code,
# -                events: tx.result.events.map(events_1.fromTendermintEvent),
#                  rawLog: tx.result.log || "",
#                  tx: tx.tx,
#                  gasUsed: tx.result.gasUsed,
# diff --git a/node_modules/@cosmjs/stargate/build/stargateclient.js.map b/node_modules/@cosmjs/stargate/build/stargateclient.js.map
# index 35808d4..52617da 100644
# --- a/node_modules/@cosmjs/stargate/build/stargateclient.js.map
# +++ b/node_modules/@cosmjs/stargate/build/stargateclient.js.map
# @@ -1 +1 @@
# -{"version":3,"file":"stargateclient.js","sourceRoot":"","sources":["../src/stargateclient.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# +{"version":3,"file":"stargateclient.js","sourceRoot":"","sources":["../src/stargateclient.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/stargateclient.searchtx.spec.d.ts b/node_modules/@cosmjs/stargate/build/stargateclient.searchtx.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/stargateclient.searchtx.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/stargateclient.searchtx.spec.js b/node_modules/@cosmjs/stargate/build/stargateclient.searchtx.spec.js
# new file mode 100644
# index 0000000..c0a3239
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/stargateclient.searchtx.spec.js
# @@ -0,0 +1,271 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +const encoding_1 = require("@cosmjs/encoding");
# +const proto_signing_1 = require("@cosmjs/proto-signing");
# +const utils_1 = require("@cosmjs/utils");
# +const tx_1 = require("cosmjs-types/cosmos/tx/v1beta1/tx");
# +const modules_1 = require("./modules");
# +const stargateclient_1 = require("./stargateclient");
# +const testutils_spec_1 = require("./testutils.spec");
# +async function sendTokens(client, registry, wallet, recipient, amount, memo) {
# +    const [{ address: walletAddress, pubkey: pubkeyBytes }] = await wallet.getAccounts();
# +    const pubkey = (0, proto_signing_1.encodePubkey)({
# +        type: "tendermint/PubKeySecp256k1",
# +        value: (0, encoding_1.toBase64)(pubkeyBytes),
# +    });
# +    const txBodyFields = {
# +        typeUrl: "/cosmos.tx.v1beta1.TxBody",
# +        value: {
# +            messages: [
# +                {
# +                    typeUrl: "/cosmos.bank.v1beta1.MsgSend",
# +                    value: {
# +                        fromAddress: walletAddress,
# +                        toAddress: recipient,
# +                        amount: amount,
# +                    },
# +                },
# +            ],
# +            memo: memo,
# +        },
# +    };
# +    const txBodyBytes = registry.encode(txBodyFields);
# +    const { accountNumber, sequence } = (await client.getSequence(walletAddress));
# +    const feeAmount = [
# +        {
# +            amount: "2000",
# +            denom: "ucosm",
# +        },
# +    ];
# +    const gasLimit = 200000;
# +    const authInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{ pubkey, sequence }], feeAmount, gasLimit);
# +    const chainId = await client.getChainId();
# +    const signDoc = (0, proto_signing_1.makeSignDoc)(txBodyBytes, authInfoBytes, chainId, accountNumber);
# +    const { signature } = await wallet.signDirect(walletAddress, signDoc);
# +    const txRaw = tx_1.TxRaw.fromPartial({
# +        bodyBytes: txBodyBytes,
# +        authInfoBytes: authInfoBytes,
# +        signatures: [(0, encoding_1.fromBase64)(signature.signature)],
# +    });
# +    const txRawBytes = Uint8Array.from(tx_1.TxRaw.encode(txRaw).finish());
# +    const broadcastResponse = await client.broadcastTx(txRawBytes, testutils_spec_1.defaultSigningClientOptions.broadcastTimeoutMs, testutils_spec_1.defaultSigningClientOptions.broadcastPollIntervalMs);
# +    return {
# +        broadcastResponse: broadcastResponse,
# +        tx: txRawBytes,
# +    };
# +}
# +describe("StargateClient.getTx and .searchTx", () => {
# +    const registry = new proto_signing_1.Registry();
# +    let sendUnsuccessful;
# +    let sendSuccessful;
# +    beforeAll(async () => {
# +        if ((0, testutils_spec_1.simappEnabled)()) {
# +            const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const unsuccessfulRecipient = (0, testutils_spec_1.makeRandomAddress)();
# +            const successfulRecipient = (0, testutils_spec_1.makeRandomAddress)();
# +            const unsuccessfulResult = await sendTokens(client, registry, wallet, unsuccessfulRecipient, (0, proto_signing_1.coins)(123456700000000, "ucosm"), "Sending more than I can afford");
# +            if ((0, stargateclient_1.isDeliverTxFailure)(unsuccessfulResult.broadcastResponse)) {
# +                sendUnsuccessful = {
# +                    sender: testutils_spec_1.faucet.address0,
# +                    recipient: unsuccessfulRecipient,
# +                    hash: unsuccessfulResult.broadcastResponse.transactionHash,
# +                    height: unsuccessfulResult.broadcastResponse.height,
# +                    tx: unsuccessfulResult.tx,
# +                };
# +            }
# +            const successfulResult = await sendTokens(client, registry, wallet, successfulRecipient, (0, proto_signing_1.coins)(1234567, "ucosm"), "Something I can afford");
# +            if ((0, stargateclient_1.isDeliverTxSuccess)(successfulResult.broadcastResponse)) {
# +                sendSuccessful = {
# +                    sender: testutils_spec_1.faucet.address0,
# +                    recipient: successfulRecipient,
# +                    hash: successfulResult.broadcastResponse.transactionHash,
# +                    height: successfulResult.broadcastResponse.height,
# +                    tx: successfulResult.tx,
# +                };
# +            }
# +            await (0, utils_1.sleep)(75); // wait until transactions are indexed
# +        }
# +    });
# +    describe("getTx", () => {
# +        it("can get successful tx by ID", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assert)(sendSuccessful, "value must be set in beforeAll()");
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const result = await client.getTx(sendSuccessful.hash);
# +            expect(result).toEqual(jasmine.objectContaining({
# +                height: sendSuccessful.height,
# +                hash: sendSuccessful.hash,
# +                code: 0,
# +                tx: sendSuccessful.tx,
# +            }));
# +        });
# +        it("can get unsuccessful tx by ID", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assert)(sendUnsuccessful, "value must be set in beforeAll()");
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const result = await client.getTx(sendUnsuccessful.hash);
# +            expect(result).toEqual(jasmine.objectContaining({
# +                height: sendUnsuccessful.height,
# +                hash: sendUnsuccessful.hash,
# +                code: 5,
# +                tx: sendUnsuccessful.tx,
# +            }));
# +        });
# +        it("can get by ID (non existent)", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const nonExistentId = "0000000000000000000000000000000000000000000000000000000000000000";
# +            const result = await client.getTx(nonExistentId);
# +            expect(result).toBeNull();
# +        });
# +    });
# +    describe("with SearchByHeightQuery", () => {
# +        it("can search successful tx by height", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assert)(sendSuccessful, "value must be set in beforeAll()");
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const result = await client.searchTx({ height: sendSuccessful.height });
# +            expect(result.length).toBeGreaterThanOrEqual(1);
# +            expect(result).toContain(jasmine.objectContaining({
# +                height: sendSuccessful.height,
# +                hash: sendSuccessful.hash,
# +                code: 0,
# +                tx: sendSuccessful.tx,
# +            }));
# +        });
# +        it("can search unsuccessful tx by height", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assert)(sendUnsuccessful, "value must be set in beforeAll()");
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const result = await client.searchTx({ height: sendUnsuccessful.height });
# +            expect(result.length).toBeGreaterThanOrEqual(1);
# +            expect(result).toContain(jasmine.objectContaining({
# +                height: sendUnsuccessful.height,
# +                hash: sendUnsuccessful.hash,
# +                code: 5,
# +                tx: sendUnsuccessful.tx,
# +            }));
# +        });
# +    });
# +    describe("with SearchBySentFromOrToQuery", () => {
# +        it("can search by sender", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assert)(sendSuccessful, "value must be set in beforeAll()");
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const results = await client.searchTx({ sentFromOrTo: sendSuccessful.sender });
# +            expect(results.length).toBeGreaterThanOrEqual(1);
# +            // Check basic structure of all results
# +            for (const result of results) {
# +                const tx = (0, proto_signing_1.decodeTxRaw)(result.tx);
# +                const filteredMsgs = tx.body.messages.filter((msg) => {
# +                    if (!(0, modules_1.isMsgSendEncodeObject)(msg))
# +                        return false;
# +                    const decoded = registry.decode(msg);
# +                    return decoded.fromAddress === (sendSuccessful === null || sendSuccessful === void 0 ? void 0 : sendSuccessful.sender);
# +                });
# +                expect(filteredMsgs.length).toBeGreaterThanOrEqual(1);
# +            }
# +            // Check details of most recent result
# +            expect(results[results.length - 1]).toEqual(jasmine.objectContaining({
# +                height: sendSuccessful.height,
# +                hash: sendSuccessful.hash,
# +                tx: sendSuccessful.tx,
# +            }));
# +        });
# +        it("can search by recipient", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assert)(sendSuccessful, "value must be set in beforeAll()");
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const results = await client.searchTx({ sentFromOrTo: sendSuccessful.recipient });
# +            expect(results.length).toBeGreaterThanOrEqual(1);
# +            // Check basic structure of all results
# +            for (const result of results) {
# +                const tx = (0, proto_signing_1.decodeTxRaw)(result.tx);
# +                const filteredMsgs = tx.body.messages.filter((msg) => {
# +                    if (!(0, modules_1.isMsgSendEncodeObject)(msg))
# +                        return false;
# +                    const decoded = registry.decode(msg);
# +                    return decoded.toAddress === (sendSuccessful === null || sendSuccessful === void 0 ? void 0 : sendSuccessful.recipient);
# +                });
# +                expect(filteredMsgs.length).toBeGreaterThanOrEqual(1);
# +            }
# +            // Check details of most recent result
# +            expect(results[results.length - 1]).toEqual(jasmine.objectContaining({
# +                height: sendSuccessful.height,
# +                hash: sendSuccessful.hash,
# +                tx: sendSuccessful.tx,
# +            }));
# +        });
# +        it("can search by recipient and filter by minHeight", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assert)(sendSuccessful);
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const query = { sentFromOrTo: sendSuccessful.recipient };
# +            {
# +                const result = await client.searchTx(query, { minHeight: 0 });
# +                expect(result.length).toEqual(1);
# +            }
# +            {
# +                const result = await client.searchTx(query, { minHeight: sendSuccessful.height - 1 });
# +                expect(result.length).toEqual(1);
# +            }
# +            {
# +                const result = await client.searchTx(query, { minHeight: sendSuccessful.height });
# +                expect(result.length).toEqual(1);
# +            }
# +            {
# +                const result = await client.searchTx(query, { minHeight: sendSuccessful.height + 1 });
# +                expect(result.length).toEqual(0);
# +            }
# +        });
# +        it("can search by recipient and filter by maxHeight", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assert)(sendSuccessful);
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const query = { sentFromOrTo: sendSuccessful.recipient };
# +            {
# +                const result = await client.searchTx(query, { maxHeight: 9999999999999 });
# +                expect(result.length).toEqual(1);
# +            }
# +            {
# +                const result = await client.searchTx(query, { maxHeight: sendSuccessful.height + 1 });
# +                expect(result.length).toEqual(1);
# +            }
# +            {
# +                const result = await client.searchTx(query, { maxHeight: sendSuccessful.height });
# +                expect(result.length).toEqual(1);
# +            }
# +            {
# +                const result = await client.searchTx(query, { maxHeight: sendSuccessful.height - 1 });
# +                expect(result.length).toEqual(0);
# +            }
# +        });
# +    });
# +    describe("with SearchByTagsQuery", () => {
# +        it("can search by transfer.recipient", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            (0, utils_1.assert)(sendSuccessful, "value must be set in beforeAll()");
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const results = await client.searchTx({
# +                tags: [{ key: "transfer.recipient", value: sendSuccessful.recipient }],
# +            });
# +            expect(results.length).toBeGreaterThanOrEqual(1);
# +            // Check basic structure of all results
# +            for (const result of results) {
# +                const tx = (0, proto_signing_1.decodeTxRaw)(result.tx);
# +                const msg = (0, testutils_spec_1.fromOneElementArray)(tx.body.messages);
# +                expect(msg.typeUrl).toEqual("/cosmos.bank.v1beta1.MsgSend");
# +                const decoded = registry.decode(msg);
# +                expect(decoded.toAddress).toEqual(sendSuccessful.recipient);
# +            }
# +            // Check details of most recent result
# +            expect(results[results.length - 1]).toEqual(jasmine.objectContaining({
# +                height: sendSuccessful.height,
# +                hash: sendSuccessful.hash,
# +                tx: sendSuccessful.tx,
# +            }));
# +        });
# +    });
# +});
# +//# sourceMappingURL=stargateclient.searchtx.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/stargateclient.searchtx.spec.js.map b/node_modules/@cosmjs/stargate/build/stargateclient.searchtx.spec.js.map
# new file mode 100644
# index 0000000..2b8dc0c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/stargateclient.searchtx.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"stargateclient.searchtx.spec.js","sourceRoot":"","sources":["../src/stargateclient.searchtx.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/stargateclient.spec.d.ts b/node_modules/@cosmjs/stargate/build/stargateclient.spec.d.ts
# new file mode 100644
# index 0000000..cb0ff5c
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/stargateclient.spec.d.ts
# @@ -0,0 +1 @@
# +export {};
# diff --git a/node_modules/@cosmjs/stargate/build/stargateclient.spec.js b/node_modules/@cosmjs/stargate/build/stargateclient.spec.js
# new file mode 100644
# index 0000000..4c434f9
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/stargateclient.spec.js
# @@ -0,0 +1,394 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +/* eslint-disable @typescript-eslint/naming-convention */
# +const encoding_1 = require("@cosmjs/encoding");
# +const proto_signing_1 = require("@cosmjs/proto-signing");
# +const utils_1 = require("@cosmjs/utils");
# +const tx_1 = require("cosmjs-types/cosmos/tx/v1beta1/tx");
# +const readonly_date_1 = require("readonly-date");
# +const stargateclient_1 = require("./stargateclient");
# +const testutils_spec_1 = require("./testutils.spec");
# +const resultFailure = {
# +    code: 5,
# +    height: 219901,
# +    rawLog: "failed to execute message; message index: 0: 1855527000ufct is smaller than 20000000000000000000000ufct: insufficient funds",
# +    transactionHash: "FDC4FB701AABD465935F7D04AE490D1EF5F2BD4B227601C4E98B57EB077D9B7D",
# +    gasUsed: 54396,
# +    gasWanted: 200000,
# +};
# +const resultSuccess = {
# +    code: 0,
# +    height: 219894,
# +    rawLog: '[{"events":[{"type":"message","attributes":[{"key":"action","value":"send"},{"key":"sender","value":"firma1trqyle9m2nvyafc2n25frkpwed2504y6avgfzr"},{"key":"module","value":"bank"}]},{"type":"transfer","attributes":[{"key":"recipient","value":"firma12er8ls2sf5zess3jgjxz59xat9xtf8hz0hk6n4"},{"key":"sender","value":"firma1trqyle9m2nvyafc2n25frkpwed2504y6avgfzr"},{"key":"amount","value":"2000000ufct"}]}]}]',
# +    transactionHash: "C0B416CA868C55C2B8C1BBB8F3CFA233854F13A5CB15D3E9599F50CAF7B3D161",
# +    gasUsed: 61556,
# +    gasWanted: 200000,
# +};
# +describe("isDeliverTxFailure", () => {
# +    it("works", () => {
# +        expect((0, stargateclient_1.isDeliverTxFailure)(resultFailure)).toEqual(true);
# +        expect((0, stargateclient_1.isDeliverTxFailure)(resultSuccess)).toEqual(false);
# +    });
# +});
# +describe("isDeliverTxSuccess", () => {
# +    it("works", () => {
# +        expect((0, stargateclient_1.isDeliverTxSuccess)(resultFailure)).toEqual(false);
# +        expect((0, stargateclient_1.isDeliverTxSuccess)(resultSuccess)).toEqual(true);
# +    });
# +});
# +describe("StargateClient", () => {
# +    describe("connect", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            expect(client).toBeTruthy();
# +            client.disconnect();
# +        });
# +    });
# +    describe("getChainId", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            expect(await client.getChainId()).toEqual(testutils_spec_1.simapp.chainId);
# +            client.disconnect();
# +        });
# +        it("caches chain ID", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const openedClient = client;
# +            const getCodeSpy = spyOn(openedClient.tmClient, "status").and.callThrough();
# +            expect(await client.getChainId()).toEqual(testutils_spec_1.simapp.chainId); // from network
# +            expect(await client.getChainId()).toEqual(testutils_spec_1.simapp.chainId); // from cache
# +            expect(getCodeSpy).toHaveBeenCalledTimes(1);
# +            client.disconnect();
# +        });
# +    });
# +    describe("getHeight", () => {
# +        it("works", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const height1 = await client.getHeight();
# +            expect(height1).toBeGreaterThan(0);
# +            await (0, utils_1.sleep)(testutils_spec_1.simapp.blockTime * 1.4); // tolerate chain being 40% slower than expected
# +            const height2 = await client.getHeight();
# +            expect(height2).toBeGreaterThanOrEqual(height1 + 1);
# +            expect(height2).toBeLessThanOrEqual(height1 + 2);
# +            client.disconnect();
# +        });
# +    });
# +    describe("getAccount", () => {
# +        it("works for unused account", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const account = await client.getAccount(testutils_spec_1.unused.address);
# +            (0, utils_1.assert)(account);
# +            expect(account).toEqual({
# +                address: testutils_spec_1.unused.address,
# +                pubkey: null,
# +                accountNumber: testutils_spec_1.unused.accountNumber,
# +                sequence: testutils_spec_1.unused.sequence,
# +            });
# +            client.disconnect();
# +        });
# +        it("works for account with pubkey and non-zero sequence", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const account = await client.getAccount(testutils_spec_1.validator.delegatorAddress);
# +            (0, utils_1.assert)(account);
# +            expect(account).toEqual({
# +                address: testutils_spec_1.validator.delegatorAddress,
# +                pubkey: testutils_spec_1.validator.pubkey,
# +                accountNumber: testutils_spec_1.validator.accountNumber,
# +                sequence: testutils_spec_1.validator.sequence,
# +            });
# +            client.disconnect();
# +        });
# +        it("returns null for non-existent address", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const account = await client.getAccount(testutils_spec_1.nonExistentAddress);
# +            expect(account).toBeNull();
# +            client.disconnect();
# +        });
# +    });
# +    describe("getSequence", () => {
# +        it("works for unused account", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const account = await client.getSequence(testutils_spec_1.unused.address);
# +            (0, utils_1.assert)(account);
# +            expect(account).toEqual({
# +                accountNumber: testutils_spec_1.unused.accountNumber,
# +                sequence: testutils_spec_1.unused.sequence,
# +            });
# +            client.disconnect();
# +        });
# +        it("rejects for non-existent address", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            await expectAsync(client.getSequence(testutils_spec_1.nonExistentAddress)).toBeRejectedWithError(/account does not exist on chain/i);
# +            client.disconnect();
# +        });
# +    });
# +    describe("getBlock", () => {
# +        it("works for latest block", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.getBlock();
# +            expect(response).toEqual(jasmine.objectContaining({
# +                id: jasmine.stringMatching(testutils_spec_1.tendermintIdMatcher),
# +                header: jasmine.objectContaining({
# +                    chainId: await client.getChainId(),
# +                }),
# +                txs: jasmine.arrayContaining([]),
# +            }));
# +            expect(response.header.height).toBeGreaterThanOrEqual(1);
# +            expect(new readonly_date_1.ReadonlyDate(response.header.time).getTime()).toBeLessThan(readonly_date_1.ReadonlyDate.now());
# +            expect(new readonly_date_1.ReadonlyDate(response.header.time).getTime()).toBeGreaterThanOrEqual(readonly_date_1.ReadonlyDate.now() - 5000);
# +            client.disconnect();
# +        });
# +        it("works for block by height", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const height = (await client.getBlock()).header.height;
# +            const response = await client.getBlock(height - 1);
# +            expect(response).toEqual(jasmine.objectContaining({
# +                id: jasmine.stringMatching(testutils_spec_1.tendermintIdMatcher),
# +                header: jasmine.objectContaining({
# +                    height: height - 1,
# +                    chainId: await client.getChainId(),
# +                }),
# +                txs: jasmine.arrayContaining([]),
# +            }));
# +            expect(new readonly_date_1.ReadonlyDate(response.header.time).getTime()).toBeLessThan(readonly_date_1.ReadonlyDate.now());
# +            expect(new readonly_date_1.ReadonlyDate(response.header.time).getTime()).toBeGreaterThanOrEqual(readonly_date_1.ReadonlyDate.now() - 5000);
# +            client.disconnect();
# +        });
# +    });
# +    describe("getBalance", () => {
# +        it("works for different existing balances", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const response1 = await client.getBalance(testutils_spec_1.unused.address, testutils_spec_1.simapp.denomFee);
# +            expect(response1).toEqual({
# +                amount: testutils_spec_1.unused.balanceFee,
# +                denom: testutils_spec_1.simapp.denomFee,
# +            });
# +            const response2 = await client.getBalance(testutils_spec_1.unused.address, testutils_spec_1.simapp.denomStaking);
# +            expect(response2).toEqual({
# +                amount: testutils_spec_1.unused.balanceStaking,
# +                denom: testutils_spec_1.simapp.denomStaking,
# +            });
# +            client.disconnect();
# +        });
# +        it("returns 0 for non-existent balance", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.getBalance(testutils_spec_1.unused.address, "gintonic");
# +            expect(response).toEqual({
# +                denom: "gintonic",
# +                amount: "0",
# +            });
# +            client.disconnect();
# +        });
# +        it("returns 0 for non-existent address", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const response = await client.getBalance(testutils_spec_1.nonExistentAddress, testutils_spec_1.simapp.denomFee);
# +            expect(response).toEqual({
# +                denom: testutils_spec_1.simapp.denomFee,
# +                amount: "0",
# +            });
# +            client.disconnect();
# +        });
# +    });
# +    describe("getAllBalances", () => {
# +        it("returns all balances for unused account", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const balances = await client.getAllBalances(testutils_spec_1.unused.address);
# +            expect(balances).toEqual([
# +                {
# +                    amount: testutils_spec_1.unused.balanceFee,
# +                    denom: testutils_spec_1.simapp.denomFee,
# +                },
# +                {
# +                    amount: testutils_spec_1.unused.balanceStaking,
# +                    denom: testutils_spec_1.simapp.denomStaking,
# +                },
# +            ]);
# +            client.disconnect();
# +        });
# +        it("returns an empty list for non-existent account", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const balances = await client.getAllBalances(testutils_spec_1.nonExistentAddress);
# +            expect(balances).toEqual([]);
# +            client.disconnect();
# +        });
# +    });
# +    describe("broadcastTx", () => {
# +        it("broadcasts a transaction", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +            const [{ address, pubkey: pubkeyBytes }] = await wallet.getAccounts();
# +            const pubkey = (0, proto_signing_1.encodePubkey)({
# +                type: "tendermint/PubKeySecp256k1",
# +                value: (0, encoding_1.toBase64)(pubkeyBytes),
# +            });
# +            const registry = new proto_signing_1.Registry();
# +            const txBodyFields = {
# +                typeUrl: "/cosmos.tx.v1beta1.TxBody",
# +                value: {
# +                    messages: [
# +                        {
# +                            typeUrl: "/cosmos.bank.v1beta1.MsgSend",
# +                            value: {
# +                                fromAddress: address,
# +                                toAddress: (0, testutils_spec_1.makeRandomAddress)(),
# +                                amount: [
# +                                    {
# +                                        denom: "ucosm",
# +                                        amount: "1234567",
# +                                    },
# +                                ],
# +                            },
# +                        },
# +                    ],
# +                },
# +            };
# +            const txBodyBytes = registry.encode(txBodyFields);
# +            const { accountNumber, sequence } = (await client.getSequence(address));
# +            const feeAmount = (0, proto_signing_1.coins)(2000, "ucosm");
# +            const gasLimit = 200000;
# +            const authInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{ pubkey, sequence }], feeAmount, gasLimit);
# +            const chainId = await client.getChainId();
# +            const signDoc = (0, proto_signing_1.makeSignDoc)(txBodyBytes, authInfoBytes, chainId, accountNumber);
# +            const { signature } = await wallet.signDirect(address, signDoc);
# +            const txRaw = tx_1.TxRaw.fromPartial({
# +                bodyBytes: txBodyBytes,
# +                authInfoBytes: authInfoBytes,
# +                signatures: [(0, encoding_1.fromBase64)(signature.signature)],
# +            });
# +            const txRawBytes = Uint8Array.from(tx_1.TxRaw.encode(txRaw).finish());
# +            const txResult = await client.broadcastTx(txRawBytes);
# +            (0, stargateclient_1.assertIsDeliverTxSuccess)(txResult);
# +            const { gasUsed, rawLog, transactionHash } = txResult;
# +            expect(gasUsed).toBeGreaterThan(0);
# +            expect(rawLog).toMatch(/{"key":"amount","value":"1234567ucosm"}/);
# +            expect(transactionHash).toMatch(/^[0-9A-F]{64}$/);
# +            client.disconnect();
# +        });
# +        it("errors immediately for a CheckTx failure", async () => {
# +            (0, testutils_spec_1.pendingWithoutSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
# +            const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +            const [{ address, pubkey: pubkeyBytes }] = await wallet.getAccounts();
# +            const pubkey = (0, proto_signing_1.encodePubkey)({
# +                type: "tendermint/PubKeySecp256k1",
# +                value: (0, encoding_1.toBase64)(pubkeyBytes),
# +            });
# +            const registry = new proto_signing_1.Registry();
# +            const invalidRecipientAddress = "tgrade1z363ulwcrxged4z5jswyt5dn5v3lzsemwz9ewj"; // wrong bech32 prefix
# +            const txBodyFields = {
# +                typeUrl: "/cosmos.tx.v1beta1.TxBody",
# +                value: {
# +                    messages: [
# +                        {
# +                            typeUrl: "/cosmos.bank.v1beta1.MsgSend",
# +                            value: {
# +                                fromAddress: address,
# +                                toAddress: invalidRecipientAddress,
# +                                amount: [
# +                                    {
# +                                        denom: "ucosm",
# +                                        amount: "1234567",
# +                                    },
# +                                ],
# +                            },
# +                        },
# +                    ],
# +                },
# +            };
# +            const txBodyBytes = registry.encode(txBodyFields);
# +            const { accountNumber, sequence } = (await client.getSequence(address));
# +            const feeAmount = (0, proto_signing_1.coins)(2000, "ucosm");
# +            const gasLimit = 200000;
# +            const authInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{ pubkey, sequence }], feeAmount, gasLimit, sequence);
# +            const chainId = await client.getChainId();
# +            const signDoc = (0, proto_signing_1.makeSignDoc)(txBodyBytes, authInfoBytes, chainId, accountNumber);
# +            const { signature } = await wallet.signDirect(address, signDoc);
# +            const txRaw = tx_1.TxRaw.fromPartial({
# +                bodyBytes: txBodyBytes,
# +                authInfoBytes: authInfoBytes,
# +                signatures: [(0, encoding_1.fromBase64)(signature.signature)],
# +            });
# +            const txRawBytes = Uint8Array.from(tx_1.TxRaw.encode(txRaw).finish());
# +            await expectAsync(client.broadcastTx(txRawBytes)).toBeRejectedWithError(/invalid recipient address/i);
# +            client.disconnect();
# +        });
# +        it("respects user timeouts rather than RPC timeouts", async () => {
# +            (0, testutils_spec_1.pendingWithoutSlowSimapp)();
# +            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.slowSimapp.tendermintUrl);
# +            const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
# +            const [{ address, pubkey: pubkeyBytes }] = await wallet.getAccounts();
# +            const pubkey = (0, proto_signing_1.encodePubkey)({
# +                type: "tendermint/PubKeySecp256k1",
# +                value: (0, encoding_1.toBase64)(pubkeyBytes),
# +            });
# +            const registry = new proto_signing_1.Registry();
# +            const txBodyFields = {
# +                typeUrl: "/cosmos.tx.v1beta1.TxBody",
# +                value: {
# +                    messages: [
# +                        {
# +                            typeUrl: "/cosmos.bank.v1beta1.MsgSend",
# +                            value: {
# +                                fromAddress: address,
# +                                toAddress: (0, testutils_spec_1.makeRandomAddress)(),
# +                                amount: [
# +                                    {
# +                                        denom: "ucosm",
# +                                        amount: "1234567",
# +                                    },
# +                                ],
# +                            },
# +                        },
# +                    ],
# +                },
# +            };
# +            const txBodyBytes = registry.encode(txBodyFields);
# +            const chainId = await client.getChainId();
# +            const feeAmount = (0, proto_signing_1.coins)(2000, "ucosm");
# +            const gasLimit = 200000;
# +            const { accountNumber: accountNumber1, sequence: sequence1 } = (await client.getSequence(address));
# +            const authInfoBytes1 = (0, proto_signing_1.makeAuthInfoBytes)([{ pubkey, sequence: sequence1 }], feeAmount, gasLimit);
# +            const signDoc1 = (0, proto_signing_1.makeSignDoc)(txBodyBytes, authInfoBytes1, chainId, accountNumber1);
# +            const { signature: signature1 } = await wallet.signDirect(address, signDoc1);
# +            const txRaw1 = tx_1.TxRaw.fromPartial({
# +                bodyBytes: txBodyBytes,
# +                authInfoBytes: authInfoBytes1,
# +                signatures: [(0, encoding_1.fromBase64)(signature1.signature)],
# +            });
# +            const txRawBytes1 = Uint8Array.from(tx_1.TxRaw.encode(txRaw1).finish());
# +            const largeTimeoutMs = 30000;
# +            const txResult = await client.broadcastTx(txRawBytes1, largeTimeoutMs);
# +            (0, stargateclient_1.assertIsDeliverTxSuccess)(txResult);
# +            const { accountNumber: accountNumber2, sequence: sequence2 } = (await client.getSequence(address));
# +            const authInfoBytes2 = (0, proto_signing_1.makeAuthInfoBytes)([{ pubkey, sequence: sequence2 }], feeAmount, gasLimit);
# +            const signDoc2 = (0, proto_signing_1.makeSignDoc)(txBodyBytes, authInfoBytes2, chainId, accountNumber2);
# +            const { signature: signature2 } = await wallet.signDirect(address, signDoc2);
# +            const txRaw2 = tx_1.TxRaw.fromPartial({
# +                bodyBytes: txBodyBytes,
# +                authInfoBytes: authInfoBytes2,
# +                signatures: [(0, encoding_1.fromBase64)(signature2.signature)],
# +            });
# +            const txRawBytes2 = Uint8Array.from(tx_1.TxRaw.encode(txRaw2).finish());
# +            const smallTimeoutMs = 1000;
# +            await expectAsync(client.broadcastTx(txRawBytes2, smallTimeoutMs)).toBeRejectedWithError(stargateclient_1.TimeoutError, /transaction with id .+ was submitted but was not yet found on the chain/i);
# +            client.disconnect();
# +        }, 30000);
# +    });
# +});
# +//# sourceMappingURL=stargateclient.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/stargateclient.spec.js.map b/node_modules/@cosmjs/stargate/build/stargateclient.spec.js.map
# new file mode 100644
# index 0000000..d9c16b2
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/stargateclient.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"stargateclient.spec.js","sourceRoot":"","sources":["../src/stargateclient.spec.ts"],"names":[],"mappings":"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"}
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/testutils.spec.d.ts b/node_modules/@cosmjs/stargate/build/testutils.spec.d.ts
# new file mode 100644
# index 0000000..02a0d5e
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/testutils.spec.d.ts
# @@ -0,0 +1,130 @@
# +import { AminoSignResponse, Secp256k1HdWallet, Secp256k1HdWalletOptions, StdSignDoc } from "@cosmjs/amino";
# +import { DirectSecp256k1HdWallet, DirectSecp256k1HdWalletOptions, DirectSignResponse } from "@cosmjs/proto-signing";
# +import { SignDoc } from "cosmjs-types/cosmos/tx/v1beta1/tx";
# +import { GasPrice } from "./fee";
# +import { SigningStargateClientOptions } from "./signingstargateclient";
# +export declare function simapp42Enabled(): boolean;
# +export declare function simapp44Enabled(): boolean;
# +export declare function simappEnabled(): boolean;
# +export declare function pendingWithoutSimapp44(): void;
# +export declare function pendingWithoutSimapp42(): void;
# +export declare function pendingWithoutSimapp(): void;
# +export declare function slowSimappEnabled(): boolean;
# +export declare function pendingWithoutSlowSimapp(): void;
# +export declare function makeRandomAddressBytes(): Uint8Array;
# +export declare function makeRandomAddress(): string;
# +/** Returns first element. Throws if array has a different length than 1. */
# +export declare function fromOneElementArray<T>(elements: ArrayLike<T>): T;
# +export declare const defaultGasPrice: GasPrice;
# +export declare const defaultSendFee: import("@cosmjs/amino").StdFee;
# +export declare const simapp: {
# +    tendermintUrl: string;
# +    tendermintUrlWs: string;
# +    tendermintUrlHttp: string;
# +    chainId: string;
# +    denomStaking: string;
# +    denomFee: string;
# +    blockTime: number;
# +    totalSupply: number;
# +    govMinDeposit: import("@cosmjs/amino").Coin[];
# +};
# +export declare const slowSimapp: {
# +    tendermintUrl: string;
# +    tendermintUrlWs: string;
# +    tendermintUrlHttp: string;
# +    chainId: string;
# +    denomStaking: string;
# +    denomFee: string;
# +    blockTime: number;
# +    totalSupply: number;
# +};
# +/** Setting to speed up testing */
# +export declare const defaultSigningClientOptions: SigningStargateClientOptions;
# +export declare const faucet: {
# +    mnemonic: string;
# +    pubkey0: {
# +        type: string;
# +        value: string;
# +    };
# +    pubkey1: {
# +        type: string;
# +        value: string;
# +    };
# +    pubkey2: {
# +        type: string;
# +        value: string;
# +    };
# +    pubkey3: {
# +        type: string;
# +        value: string;
# +    };
# +    pubkey4: {
# +        type: string;
# +        value: string;
# +    };
# +    address0: string;
# +    address1: string;
# +    address2: string;
# +    address3: string;
# +    address4: string;
# +};
# +/** Unused account */
# +export declare const unused: {
# +    pubkey: {
# +        type: string;
# +        value: string;
# +    };
# +    address: string;
# +    accountNumber: number;
# +    sequence: number;
# +    balanceStaking: string;
# +    balanceFee: string;
# +};
# +export declare const validator: {
# +    /**
# +     * From first gentx's auth_info.signer_infos in scripts/simapp42/template/.simapp/config/genesis.json
# +     *
# +     * ```
# +     * jq ".app_state.genutil.gen_txs[0].auth_info.signer_infos[0].public_key" scripts/simapp42/template/.simapp/config/genesis.json
# +     * ```
# +     */
# +    pubkey: {
# +        type: string;
# +        value: string;
# +    };
# +    /**
# +     * delegator_address from /cosmos.staking.v1beta1.MsgCreateValidator in scripts/simapp42/template/.simapp/config/genesis.json
# +     *
# +     * ```
# +     * jq ".app_state.genutil.gen_txs[0].body.messages[0].delegator_address" scripts/simapp42/template/.simapp/config/genesis.json
# +     * ```
# +     */
# +    delegatorAddress: string;
# +    /**
# +     * validator_address from /cosmos.staking.v1beta1.MsgCreateValidator in scripts/simapp42/template/.simapp/config/genesis.json
# +     *
# +     * ```
# +     * jq ".app_state.genutil.gen_txs[0].body.messages[0].validator_address" scripts/simapp42/template/.simapp/config/genesis.json
# +     * ```
# +     */
# +    validatorAddress: string;
# +    accountNumber: number;
# +    sequence: number;
# +};
# +export declare const nonExistentAddress = "cosmos1p79apjaufyphcmsn4g07cynqf0wyjuezqu84hd";
# +export declare const nonNegativeIntegerMatcher: RegExp;
# +export declare const tendermintIdMatcher: RegExp;
# +/**
# + * A class for testing clients using an Amino signer which modifies the transaction it receives before signing
# + */
# +export declare class ModifyingSecp256k1HdWallet extends Secp256k1HdWallet {
# +    static fromMnemonic(mnemonic: string, options?: Partial<Secp256k1HdWalletOptions>): Promise<ModifyingSecp256k1HdWallet>;
# +    signAmino(signerAddress: string, signDoc: StdSignDoc): Promise<AminoSignResponse>;
# +}
# +/**
# + * A class for testing clients using a direct signer which modifies the transaction it receives before signing
# + */
# +export declare class ModifyingDirectSecp256k1HdWallet extends DirectSecp256k1HdWallet {
# +    static fromMnemonic(mnemonic: string, options?: Partial<DirectSecp256k1HdWalletOptions>): Promise<DirectSecp256k1HdWallet>;
# +    signDirect(address: string, signDoc: SignDoc): Promise<DirectSignResponse>;
# +}
# diff --git a/node_modules/@cosmjs/stargate/build/testutils.spec.js b/node_modules/@cosmjs/stargate/build/testutils.spec.js
# new file mode 100644
# index 0000000..a342350
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/testutils.spec.js
# @@ -0,0 +1,222 @@
# +"use strict";
# +Object.defineProperty(exports, "__esModule", { value: true });
# +exports.ModifyingDirectSecp256k1HdWallet = exports.ModifyingSecp256k1HdWallet = exports.tendermintIdMatcher = exports.nonNegativeIntegerMatcher = exports.nonExistentAddress = exports.validator = exports.unused = exports.faucet = exports.defaultSigningClientOptions = exports.slowSimapp = exports.simapp = exports.defaultSendFee = exports.defaultGasPrice = exports.fromOneElementArray = exports.makeRandomAddress = exports.makeRandomAddressBytes = exports.pendingWithoutSlowSimapp = exports.slowSimappEnabled = exports.pendingWithoutSimapp = exports.pendingWithoutSimapp42 = exports.pendingWithoutSimapp44 = exports.simappEnabled = exports.simapp44Enabled = exports.simapp42Enabled = void 0;
# +/* eslint-disable @typescript-eslint/naming-convention */
# +const amino_1 = require("@cosmjs/amino");
# +const crypto_1 = require("@cosmjs/crypto");
# +const encoding_1 = require("@cosmjs/encoding");
# +const proto_signing_1 = require("@cosmjs/proto-signing");
# +const signing_1 = require("cosmjs-types/cosmos/tx/signing/v1beta1/signing");
# +const tx_1 = require("cosmjs-types/cosmos/tx/v1beta1/tx");
# +const fee_1 = require("./fee");
# +function simapp42Enabled() {
# +    return !!process.env.SIMAPP42_ENABLED;
# +}
# +exports.simapp42Enabled = simapp42Enabled;
# +function simapp44Enabled() {
# +    return !!process.env.SIMAPP44_ENABLED;
# +}
# +exports.simapp44Enabled = simapp44Enabled;
# +function simappEnabled() {
# +    return simapp42Enabled() || simapp44Enabled();
# +}
# +exports.simappEnabled = simappEnabled;
# +function pendingWithoutSimapp44() {
# +    if (!simapp44Enabled()) {
# +        return pending("Set SIMAPP44_ENABLED to enable Simapp based tests");
# +    }
# +}
# +exports.pendingWithoutSimapp44 = pendingWithoutSimapp44;
# +function pendingWithoutSimapp42() {
# +    if (!simapp42Enabled()) {
# +        return pending("Set SIMAPP42_ENABLED to enable Simapp based tests");
# +    }
# +}
# +exports.pendingWithoutSimapp42 = pendingWithoutSimapp42;
# +function pendingWithoutSimapp() {
# +    if (!simappEnabled()) {
# +        return pending("Set SIMAPP42_ENABLED or SIMAPP44_ENABLED to enable Simapp based tests");
# +    }
# +}
# +exports.pendingWithoutSimapp = pendingWithoutSimapp;
# +function slowSimappEnabled() {
# +    return !!process.env.SLOW_SIMAPP42_ENABLED || !!process.env.SLOW_SIMAPP44_ENABLED;
# +}
# +exports.slowSimappEnabled = slowSimappEnabled;
# +function pendingWithoutSlowSimapp() {
# +    if (!slowSimappEnabled()) {
# +        return pending("Set SLOW_SIMAPP42_ENABLED or SLOW_SIMAPP44_ENABLED to enable slow Simapp based tests");
# +    }
# +}
# +exports.pendingWithoutSlowSimapp = pendingWithoutSlowSimapp;
# +function makeRandomAddressBytes() {
# +    return crypto_1.Random.getBytes(20);
# +}
# +exports.makeRandomAddressBytes = makeRandomAddressBytes;
# +function makeRandomAddress() {
# +    return (0, encoding_1.toBech32)("cosmos", makeRandomAddressBytes());
# +}
# +exports.makeRandomAddress = makeRandomAddress;
# +/** Returns first element. Throws if array has a different length than 1. */
# +function fromOneElementArray(elements) {
# +    if (elements.length !== 1)
# +        throw new Error(`Expected exactly one element but got ${elements.length}`);
# +    return elements[0];
# +}
# +exports.fromOneElementArray = fromOneElementArray;
# +exports.defaultGasPrice = fee_1.GasPrice.fromString("0.025ucosm");
# +exports.defaultSendFee = (0, fee_1.calculateFee)(100000, exports.defaultGasPrice);
# +exports.simapp = {
# +    tendermintUrl: "localhost:26658",
# +    tendermintUrlWs: "ws://localhost:26658",
# +    tendermintUrlHttp: "http://localhost:26658",
# +    chainId: "simd-testing",
# +    denomStaking: "ustake",
# +    denomFee: "ucosm",
# +    blockTime: 1000,
# +    totalSupply: 21000000000,
# +    govMinDeposit: (0, proto_signing_1.coins)(10000000, "ustake"),
# +};
# +exports.slowSimapp = {
# +    tendermintUrl: "localhost:26660",
# +    tendermintUrlWs: "ws://localhost:26660",
# +    tendermintUrlHttp: "http://localhost:26660",
# +    chainId: "simd-testing",
# +    denomStaking: "ustake",
# +    denomFee: "ucosm",
# +    blockTime: 10000,
# +    totalSupply: 21000000000, // ucosm
# +};
# +/** Setting to speed up testing */
# +exports.defaultSigningClientOptions = {
# +    broadcastPollIntervalMs: 300,
# +    broadcastTimeoutMs: 8000,
# +};
# +exports.faucet = {
# +    mnemonic: "economy stock theory fatal elder harbor betray wasp final emotion task crumble siren bottom lizard educate guess current outdoor pair theory focus wife stone",
# +    pubkey0: {
# +        type: "tendermint/PubKeySecp256k1",
# +        value: "A08EGB7ro1ORuFhjOnZcSgwYlpe0DSFjVNUIkNNQxwKQ",
# +    },
# +    pubkey1: {
# +        type: "tendermint/PubKeySecp256k1",
# +        value: "AiDosfIbBi54XJ1QjCeApumcy/FjdtF+YhywPf3DKTx7",
# +    },
# +    pubkey2: {
# +        type: "tendermint/PubKeySecp256k1",
# +        value: "AzQg33JZqH7vSsm09esZY5bZvmzYwE/SY78cA0iLxpD7",
# +    },
# +    pubkey3: {
# +        type: "tendermint/PubKeySecp256k1",
# +        value: "A3gOAlB6aiRTCPvWMQg2+ZbGYNsLd8qlvV28m8p2UhY2",
# +    },
# +    pubkey4: {
# +        type: "tendermint/PubKeySecp256k1",
# +        value: "Aum2063ub/ErUnIUB36sK55LktGUStgcbSiaAnL1wadu",
# +    },
# +    address0: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
# +    address1: "cosmos10dyr9899g6t0pelew4nvf4j5c3jcgv0r73qga5",
# +    address2: "cosmos1xy4yqngt0nlkdcenxymg8tenrghmek4nmqm28k",
# +    address3: "cosmos142u9fgcjdlycfcez3lw8x6x5h7rfjlnfhpw2lx",
# +    address4: "cosmos1hsm76p4ahyhl5yh3ve9ur49r5kemhp2r0dcjvx",
# +};
# +/** Unused account */
# +exports.unused = {
# +    pubkey: {
# +        type: "tendermint/PubKeySecp256k1",
# +        value: "ArkCaFUJ/IH+vKBmNRCdUVl3mCAhbopk9jjW4Ko4OfRQ",
# +    },
# +    address: "cosmos1cjsxept9rkggzxztslae9ndgpdyt2408lk850u",
# +    accountNumber: 16,
# +    sequence: 0,
# +    balanceStaking: "2000000000",
# +    balanceFee: "1000000000", // 1000 COSM
# +};
# +exports.validator = {
# +    /**
# +     * From first gentx's auth_info.signer_infos in scripts/simapp42/template/.simapp/config/genesis.json
# +     *
# +     * ```
# +     * jq ".app_state.genutil.gen_txs[0].auth_info.signer_infos[0].public_key" scripts/simapp42/template/.simapp/config/genesis.json
# +     * ```
# +     */
# +    pubkey: {
# +        type: "tendermint/PubKeySecp256k1",
# +        value: "AtDcuH4cX1eaxZrJ5shheLG3tXPAoV4awoIZmNQtQxmf",
# +    },
# +    /**
# +     * delegator_address from /cosmos.staking.v1beta1.MsgCreateValidator in scripts/simapp42/template/.simapp/config/genesis.json
# +     *
# +     * ```
# +     * jq ".app_state.genutil.gen_txs[0].body.messages[0].delegator_address" scripts/simapp42/template/.simapp/config/genesis.json
# +     * ```
# +     */
# +    delegatorAddress: "cosmos1urk9gy7cfws0ak9x5nu7lx4un9n6gqkry79679",
# +    /**
# +     * validator_address from /cosmos.staking.v1beta1.MsgCreateValidator in scripts/simapp42/template/.simapp/config/genesis.json
# +     *
# +     * ```
# +     * jq ".app_state.genutil.gen_txs[0].body.messages[0].validator_address" scripts/simapp42/template/.simapp/config/genesis.json
# +     * ```
# +     */
# +    validatorAddress: "cosmosvaloper1urk9gy7cfws0ak9x5nu7lx4un9n6gqkrp230jk",
# +    accountNumber: 0,
# +    sequence: 1,
# +};
# +exports.nonExistentAddress = "cosmos1p79apjaufyphcmsn4g07cynqf0wyjuezqu84hd";
# +exports.nonNegativeIntegerMatcher = /^[0-9]+$/;
# +exports.tendermintIdMatcher = /^[0-9A-F]{64}$/;
# +/**
# + * A class for testing clients using an Amino signer which modifies the transaction it receives before signing
# + */
# +class ModifyingSecp256k1HdWallet extends amino_1.Secp256k1HdWallet {
# +    static async fromMnemonic(mnemonic, options = {}) {
# +        const mnemonicChecked = new crypto_1.EnglishMnemonic(mnemonic);
# +        const seed = await crypto_1.Bip39.mnemonicToSeed(mnemonicChecked, options.bip39Password);
# +        return new ModifyingSecp256k1HdWallet(mnemonicChecked, { ...options, seed: seed });
# +    }
# +    async signAmino(signerAddress, signDoc) {
# +        const modifiedSignDoc = {
# +            ...signDoc,
# +            fee: {
# +                amount: (0, proto_signing_1.coins)(3000, "ucosm"),
# +                gas: "333333",
# +            },
# +            memo: "This was modified",
# +        };
# +        return super.signAmino(signerAddress, modifiedSignDoc);
# +    }
# +}
# +exports.ModifyingSecp256k1HdWallet = ModifyingSecp256k1HdWallet;
# +/**
# + * A class for testing clients using a direct signer which modifies the transaction it receives before signing
# + */
# +class ModifyingDirectSecp256k1HdWallet extends proto_signing_1.DirectSecp256k1HdWallet {
# +    static async fromMnemonic(mnemonic, options = {}) {
# +        const mnemonicChecked = new crypto_1.EnglishMnemonic(mnemonic);
# +        const seed = await crypto_1.Bip39.mnemonicToSeed(mnemonicChecked, options.bip39Password);
# +        return new ModifyingDirectSecp256k1HdWallet(mnemonicChecked, { ...options, seed: seed });
# +    }
# +    async signDirect(address, signDoc) {
# +        const txBody = tx_1.TxBody.decode(signDoc.bodyBytes);
# +        const modifiedTxBody = tx_1.TxBody.fromPartial({
# +            ...txBody,
# +            memo: "This was modified",
# +        });
# +        const authInfo = tx_1.AuthInfo.decode(signDoc.authInfoBytes);
# +        const signers = authInfo.signerInfos.map((signerInfo) => ({
# +            pubkey: signerInfo.publicKey,
# +            sequence: signerInfo.sequence.toNumber(),
# +        }));
# +        const modifiedFeeAmount = (0, proto_signing_1.coins)(3000, "ucosm");
# +        const modifiedGasLimit = 333333;
# +        const modifiedSignDoc = {
# +            ...signDoc,
# +            bodyBytes: Uint8Array.from(tx_1.TxBody.encode(modifiedTxBody).finish()),
# +            authInfoBytes: (0, proto_signing_1.makeAuthInfoBytes)(signers, modifiedFeeAmount, modifiedGasLimit, signing_1.SignMode.SIGN_MODE_DIRECT),
# +        };
# +        return super.signDirect(address, modifiedSignDoc);
# +    }
# +}
# +exports.ModifyingDirectSecp256k1HdWallet = ModifyingDirectSecp256k1HdWallet;
# +//# sourceMappingURL=testutils.spec.js.map
# \ No newline at end of file
# diff --git a/node_modules/@cosmjs/stargate/build/testutils.spec.js.map b/node_modules/@cosmjs/stargate/build/testutils.spec.js.map
# new file mode 100644
# index 0000000..e90b1b9
# --- /dev/null
# +++ b/node_modules/@cosmjs/stargate/build/testutils.spec.js.map
# @@ -0,0 +1 @@
# +{"version":3,"file":"testutils.spec.js","sourceRoot":"","sources":["../src/testutils.spec.ts"],"names":[],"mappings":";;;AAAA,yDAAyD;AACzD,yCAA2G;AAC3G,2CAAgE;AAChE,+CAA4C;AAC5C,yDAM+B;AAC/B,4EAA0E;AAC1E,0DAA8E;AAE9E,+BAA+C;AAG/C,SAAgB,eAAe;IAC7B,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;AACxC,CAAC;AAFD,0CAEC;AAED,SAAgB,eAAe;IAC7B,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;AACxC,CAAC;AAFD,0CAEC;AAED,SAAgB,aAAa;IAC3B,OAAO,eAAe,EAAE,IAAI,eAAe,EAAE,CAAC;AAChD,CAAC;AAFD,sCAEC;AAED,SAAgB,sBAAsB;IACpC,IAAI,CAAC,eAAe,EAAE,EAAE;QACtB,OAAO,OAAO,CAAC,mDAAmD,CAAC,CAAC;KACrE;AACH,CAAC;AAJD,wDAIC;AAED,SAAgB,sBAAsB;IACpC,IAAI,CAAC,eAAe,EAAE,EAAE;QACtB,OAAO,OAAO,CAAC,mDAAmD,CAAC,CAAC;KACrE;AACH,CAAC;AAJD,wDAIC;AAED,SAAgB,oBAAoB;IAClC,IAAI,CAAC,aAAa,EAAE,EAAE;QACpB,OAAO,OAAO,CAAC,uEAAuE,CAAC,CAAC;KACzF;AACH,CAAC;AAJD,oDAIC;AAED,SAAgB,iBAAiB;IAC/B,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC;AACpF,CAAC;AAFD,8CAEC;AAED,SAAgB,wBAAwB;IACtC,IAAI,CAAC,iBAAiB,EAAE,EAAE;QACxB,OAAO,OAAO,CAAC,sFAAsF,CAAC,CAAC;KACxG;AACH,CAAC;AAJD,4DAIC;AAED,SAAgB,sBAAsB;IACpC,OAAO,eAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAC7B,CAAC;AAFD,wDAEC;AAED,SAAgB,iBAAiB;IAC/B,OAAO,IAAA,mBAAQ,EAAC,QAAQ,EAAE,sBAAsB,EAAE,CAAC,CAAC;AACtD,CAAC;AAFD,8CAEC;AAED,4EAA4E;AAC5E,SAAgB,mBAAmB,CAAI,QAAsB;IAC3D,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,wCAAwC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;IACtG,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC;AAHD,kDAGC;AAEY,QAAA,eAAe,GAAG,cAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;AACpD,QAAA,cAAc,GAAG,IAAA,kBAAY,EAAC,MAAO,EAAE,uBAAe,CAAC,CAAC;AAExD,QAAA,MAAM,GAAG;IACpB,aAAa,EAAE,iBAAiB;IAChC,eAAe,EAAE,sBAAsB;IACvC,iBAAiB,EAAE,wBAAwB;IAC3C,OAAO,EAAE,cAAc;IACvB,YAAY,EAAE,QAAQ;IACtB,QAAQ,EAAE,OAAO;IACjB,SAAS,EAAE,IAAK;IAChB,WAAW,EAAE,WAAW;IACxB,aAAa,EAAE,IAAA,qBAAK,EAAC,QAAQ,EAAE,QAAQ,CAAC;CACzC,CAAC;AAEW,QAAA,UAAU,GAAG;IACxB,aAAa,EAAE,iBAAiB;IAChC,eAAe,EAAE,sBAAsB;IACvC,iBAAiB,EAAE,wBAAwB;IAC3C,OAAO,EAAE,cAAc;IACvB,YAAY,EAAE,QAAQ;IACtB,QAAQ,EAAE,OAAO;IACjB,SAAS,EAAE,KAAM;IACjB,WAAW,EAAE,WAAW,EAAE,QAAQ;CACnC,CAAC;AAEF,kCAAkC;AACrB,QAAA,2BAA2B,GAAiC;IACvE,uBAAuB,EAAE,GAAG;IAC5B,kBAAkB,EAAE,IAAK;CAC1B,CAAC;AAEW,QAAA,MAAM,GAAG;IACpB,QAAQ,EACN,+JAA+J;IACjK,OAAO,EAAE;QACP,IAAI,EAAE,4BAA4B;QAClC,KAAK,EAAE,8CAA8C;KACtD;IACD,OAAO,EAAE;QACP,IAAI,EAAE,4BAA4B;QAClC,KAAK,EAAE,8CAA8C;KACtD;IACD,OAAO,EAAE;QACP,IAAI,EAAE,4BAA4B;QAClC,KAAK,EAAE,8CAA8C;KACtD;IACD,OAAO,EAAE;QACP,IAAI,EAAE,4BAA4B;QAClC,KAAK,EAAE,8CAA8C;KACtD;IACD,OAAO,EAAE;QACP,IAAI,EAAE,4BAA4B;QAClC,KAAK,EAAE,8CAA8C;KACtD;IACD,QAAQ,EAAE,+CAA+C;IACzD,QAAQ,EAAE,+CAA+C;IACzD,QAAQ,EAAE,+CAA+C;IACzD,QAAQ,EAAE,+CAA+C;IACzD,QAAQ,EAAE,+CAA+C;CAC1D,CAAC;AAEF,qBAAqB;AACR,QAAA,MAAM,GAAG;IACpB,MAAM,EAAE;QACN,IAAI,EAAE,4BAA4B;QAClC,KAAK,EAAE,8CAA8C;KACtD;IACD,OAAO,EAAE,+CAA+C;IACxD,aAAa,EAAE,EAAE;IACjB,QAAQ,EAAE,CAAC;IACX,cAAc,EAAE,YAAY;IAC5B,UAAU,EAAE,YAAY,EAAE,YAAY;CACvC,CAAC;AAEW,QAAA,SAAS,GAAG;IACvB;;;;;;OAMG;IACH,MAAM,EAAE;QACN,IAAI,EAAE,4BAA4B;QAClC,KAAK,EAAE,8CAA8C;KACtD;IACD;;;;;;OAMG;IACH,gBAAgB,EAAE,+CAA+C;IACjE;;;;;;OAMG;IACH,gBAAgB,EAAE,sDAAsD;IACxE,aAAa,EAAE,CAAC;IAChB,QAAQ,EAAE,CAAC;CACZ,CAAC;AAEW,QAAA,kBAAkB,GAAG,+CAA+C,CAAC;AAErE,QAAA,yBAAyB,GAAG,UAAU,CAAC;AACvC,QAAA,mBAAmB,GAAG,gBAAgB,CAAC;AAEpD;;GAEG;AACH,MAAa,0BAA2B,SAAQ,yBAAiB;IACxD,MAAM,CAAU,KAAK,CAAC,YAAY,CACvC,QAAgB,EAChB,UAA6C,EAAE;QAE/C,MAAM,eAAe,GAAG,IAAI,wBAAe,CAAC,QAAQ,CAAC,CAAC;QACtD,MAAM,IAAI,GAAG,MAAM,cAAK,CAAC,cAAc,CAAC,eAAe,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QAChF,OAAO,IAAI,0BAA0B,CAAC,eAAe,EAAE,EAAE,GAAG,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IACrF,CAAC;IAEe,KAAK,CAAC,SAAS,CAAC,aAAqB,EAAE,OAAmB;QACxE,MAAM,eAAe,GAAG;YACtB,GAAG,OAAO;YACV,GAAG,EAAE;gBACH,MAAM,EAAE,IAAA,qBAAK,EAAC,IAAI,EAAE,OAAO,CAAC;gBAC5B,GAAG,EAAE,QAAQ;aACd;YACD,IAAI,EAAE,mBAAmB;SAC1B,CAAC;QACF,OAAO,KAAK,CAAC,SAAS,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC;IACzD,CAAC;CACF;AArBD,gEAqBC;AAED;;GAEG;AACH,MAAa,gCAAiC,SAAQ,uCAAuB;IACpE,MAAM,CAAU,KAAK,CAAC,YAAY,CACvC,QAAgB,EAChB,UAAmD,EAAE;QAErD,MAAM,eAAe,GAAG,IAAI,wBAAe,CAAC,QAAQ,CAAC,CAAC;QACtD,MAAM,IAAI,GAAG,MAAM,cAAK,CAAC,cAAc,CAAC,eAAe,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QAChF,OAAO,IAAI,gCAAgC,CAAC,eAAe,EAAE,EAAE,GAAG,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAC3F,CAAC;IAEe,KAAK,CAAC,UAAU,CAAC,OAAe,EAAE,OAAgB;QAChE,MAAM,MAAM,GAAG,WAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAChD,MAAM,cAAc,GAAG,WAAM,CAAC,WAAW,CAAC;YACxC,GAAG,MAAM;YACT,IAAI,EAAE,mBAAmB;SAC1B,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG,aAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QACxD,MAAM,OAAO,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;YACxD,MAAM,EAAE,UAAU,CAAC,SAAU;YAC7B,QAAQ,EAAE,UAAU,CAAC,QAAQ,CAAC,QAAQ,EAAE;SACzC,CAAC,CAAC,CAAC;QACJ,MAAM,iBAAiB,GAAG,IAAA,qBAAK,EAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC/C,MAAM,gBAAgB,GAAG,MAAM,CAAC;QAChC,MAAM,eAAe,GAAG;YACtB,GAAG,OAAO;YACV,SAAS,EAAE,UAAU,CAAC,IAAI,CAAC,WAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,MAAM,EAAE,CAAC;YAClE,aAAa,EAAE,IAAA,iCAAiB,EAC9B,OAAO,EACP,iBAAiB,EACjB,gBAAgB,EAChB,kBAAQ,CAAC,gBAAgB,CAC1B;SACF,CAAC;QACF,OAAO,KAAK,CAAC,UAAU,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;IACpD,CAAC;CACF;AAnCD,4EAmCC"}
# \ No newline at end of file
